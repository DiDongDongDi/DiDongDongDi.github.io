<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器人操作系统ROS_1</title>
      <link href="/2019/09/14/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FROS/"/>
      <url>/2019/09/14/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9FROS/</url>
      
        <content type="html"><![CDATA[<h1 id="初识ROS"><a href="#初识ROS" class="headerlink" title="初识ROS"></a>初识ROS</h1><h2 id="ROS介绍"><a href="#ROS介绍" class="headerlink" title="ROS介绍"></a>ROS介绍</h2><blockquote><ul><li>ros的设计目标: 提高机器人研发中的软件复用率</li><li>ros集成了大量的工具, 库, 协议, 提供了类似操作系统的功能, 把原本松散的零部件耦合在了一起</li></ul></blockquote><a id="more"></a><p>解耦: 分成模块</p><blockquote><ul><li>ros是一个机器人软件平台</li><li>在这个环境上, 机器人的感知, 决策, 控制算法可以更好的组织和运行</li></ul></blockquote><h3 id="通信机制"><a href="#通信机制" class="headerlink" title="通信机制"></a>通信机制</h3><p>ros提供了松耦合的分布式的通信方法<br><img alt="ros的通信机制" data-src="http://qiniu.wangqy.top/didong/images/ros-8.png"></p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><blockquote><p>配置 启动 自检 调试 可视化 登录 测试 终止</p></blockquote><h3 id="应用功能"><a href="#应用功能" class="headerlink" title="应用功能"></a>应用功能</h3><blockquote><p>聚焦于移动性, 操作性和感知性, ros提供了实现机器人功能的广泛的库</p></blockquote><h3 id="生态系统"><a href="#生态系统" class="headerlink" title="生态系统"></a>生态系统</h3><p>ros的支持和发展依托着一个强大的社区    </p><p><img alt="有关ros的github仓库" data-src="http://qiniu.wangqy.top/didong/images/ros-12.png"></p><p><img alt="ros社区构成" data-src="http://qiniu.wangqy.top/didong/images/ros-5.png"></p><blockquote><ul><li>发行版</li><li>软件源</li><li>ros wiki</li><li>邮件列表</li><li>ros answer</li><li>博客</li></ul></blockquote><h2 id="ROS的起源与发展"><a href="#ROS的起源与发展" class="headerlink" title="ROS的起源与发展"></a>ROS的起源与发展</h2><p><img alt="ros的起源与发展" data-src="http://qiniu.wangqy.top/didong/images/ros-4.png"></p><h2 id="ROS的特点"><a href="#ROS的特点" class="headerlink" title="ROS的特点"></a>ROS的特点</h2><h3 id="点对点设计"><a href="#点对点设计" class="headerlink" title="点对点设计"></a>点对点设计</h3><blockquote><p>ros通过点对点设计以及服务和节点管理器等机制可以分散由于计算机视觉和语音识别等功能带来的实时计算压力, 这种设计能适应服务机器人遇到的挑战</p></blockquote><p><img alt="点对点的设计" data-src="http://qiniu.wangqy.top/didong/images/ros-2.png"></p><h3 id="不依赖编程语言"><a href="#不依赖编程语言" class="headerlink" title="不依赖编程语言"></a>不依赖编程语言</h3><blockquote><p>为了支持多语言编程, ros采用了一种语言中立的接口定义语言(IDL)来实现各模块之间的消息传送</p></blockquote><h3 id="精简与集成"><a href="#精简与集成" class="headerlink" title="精简与集成"></a>精简与集成</h3><blockquote><ul><li>ros建立的系统具有模块化的特点, 各<em>模块中的代码可以单独编译</em>, 而且编译使用的cmake工具使它很容易的就实现精简的理念</li><li>ros基本将<em>复杂的代码封装在库里</em>, 只是创建了一些小的应用程序为ros显示库的功能, 这就允许了对简单的代码超越原型进行移植和重新使用</li><li><em>ros不修改用户的主函数</em>, 所以代码可以被其他的机器人软件使用, 其优点是ros很容易和其他的机器人软件平台集成, 例如, 在计算机视觉方面, ros已经与opencv实现集成</li></ul></blockquote><h3 id="便于测试"><a href="#便于测试" class="headerlink" title="便于测试"></a>便于测试</h3><blockquote><ul><li>精心设计的ros系统框架将<em>底层硬件控制模块</em>和<em>顶层数据处理与决策模块</em>分离, 从而可以使用模拟器替代底层硬件模块, 独立测试顶层部分, 提高测试效率</li></ul></blockquote><blockquote><ul><li>ros另外提供了一种简单的方法可以<em>在调试过程中记录传感器数据及其他类型的消息数据, 并在试验后按时间戳回访(rosbag)</em>, 通过这种方式, 每次运行机器人可以获得更多的测试机会, 例如, 可以记录传感器的数据, 并通过多次回放测试不同的数据处理算法</li></ul></blockquote><h3 id="组件化工具包丰富"><a href="#组件化工具包丰富" class="headerlink" title="组件化工具包丰富"></a>组件化工具包丰富</h3><p>为了管理复杂的ros软件框架, ros利用了<em>大量的小工具</em>去编译和运行多种多样的ros组件, 从而设计成了内核, 而不是构建一个庞大的开发和运行环境, <em>(组件化的方式)</em>, 例如3d可视化工具rviz, rqt工具箱, gazebo仿真等等</p><h3 id="免费且开源"><a href="#免费且开源" class="headerlink" title="免费且开源"></a>免费且开源</h3><p>遵从BSD协议</p><h3 id="存在的缺点"><a href="#存在的缺点" class="headerlink" title="存在的缺点"></a>存在的缺点</h3><blockquote><ul><li>通信实时性能有限</li><li>系统稳定性尚不满足工业级要求</li><li>安全性上没有防护措施</li><li>目前仅支持linux(Ubuntu)</li></ul></blockquote><h1 id="ros系统架构及概念-ros文件系统"><a href="#ros系统架构及概念-ros文件系统" class="headerlink" title="ros系统架构及概念_ros文件系统"></a>ros系统架构及概念_ros文件系统</h1><h2 id="ros的架构"><a href="#ros的架构" class="headerlink" title="ros的架构"></a>ros的架构</h2><h3 id="ros架构的三个层次"><a href="#ros架构的三个层次" class="headerlink" title="ros架构的三个层次"></a>ros架构的三个层次</h3><blockquote><ul><li>os层: linux, ubuntu</li><li>中间层: <blockquote><ul><li>tcpros/udpros通信</li><li>向上提供client library</li></ul></blockquote></li><li>应用层:<blockquote><ul><li>master负责整个系统正常运行</li><li>功能包中模块以节点为单位</li><li>只需了解接口, 提高开发效率</li></ul></blockquote></li></ul></blockquote><p><img alt="ros架构的三个层次" data-src="http://qiniu.wangqy.top/didong/images/ros-11.png"></p><h3 id="ros系统的架构设计"><a href="#ros系统的架构设计" class="headerlink" title="ros系统的架构设计"></a>ros系统的架构设计</h3><blockquote><p>ros系统的架构主要被设计和划分成了三个部分, 每一个部分是一个层级:</p><ul><li>文件系统级: 程序是如何运行的</li><li>计算图级: 程序文件是如何组织和构建的</li><li>开源社区级: 程序的分布式管理</li></ul></blockquote><h2 id="ros的文件系统"><a href="#ros的文件系统" class="headerlink" title="ros的文件系统"></a>ros的文件系统</h2><h3 id="理解ros文件系统"><a href="#理解ros文件系统" class="headerlink" title="理解ros文件系统"></a>理解ros文件系统</h3><p>ros程序的不同组件要被放在不同的文件夹下</p><p><img alt="ros文件系统" data-src="http://qiniu.wangqy.top/didong/images/ros-7.png"></p><h3 id="catkin编译系统"><a href="#catkin编译系统" class="headerlink" title="catkin编译系统"></a>catkin编译系统</h3><blockquote><ul><li>gcc/g++</li><li>makefile: 编译工具</li><li>cmake: make工具生成器</li><li>catkin: ros对cmake的拓展</li></ul></blockquote><p><img alt="catkin编译系统" data-src="http://qiniu.wangqy.top/didong/images/ros-6.png"></p><blockquote><p>catkin编译的工作流程:</p><ul><li>首先在工作空间<code>catkin_ws/src/</code>下递归地查找其中每一个ros的package</li><li>package中会有<code>package.xml</code>和<code>CmakeLists.txt</code>文件, catkin(cmake)编译系统依据<code>CMakeLists.txt</code>文件, 从而生成makefiles(放在<code>catkin_ws/build/</code>)</li><li>然后make刚刚生成的makefiles等文件, 编译链接生成可执行文件(放在<code>catkin_ws/devel/</code>)</li></ul></blockquote><h3 id="catkin工作空间"><a href="#catkin工作空间" class="headerlink" title="catkin工作空间"></a>catkin工作空间</h3><p><code>catkin_make</code>, 编译src中所有的软件包</p><p><img alt="catkin工作空间(1)" data-src="http://qiniu.wangqy.top/didong/images/ros-9.png"></p><p><img alt="catkin工作空间(2)" data-src="http://qiniu.wangqy.top/didong/images/ros-0.png"></p><blockquote><p>创建package:</p><ul><li>进入src文件夹</li><li><code>catkin_create_pkg package depends</code>, package是包名, depends是依赖的包名, 可以依赖多个软件包</li><li><code>catkin_create_pkg</code>帮你完成了软件包的初始化, <em>填充好了CMakeLists.txt和package.xml</em>, 并且将依赖项填进了这两个文件夹中</li></ul></blockquote><blockquote><p>package的文件结构:</p><ul><li>CMakeLists.txt #packag的编译规则(必须)</li><li>package.xml       #package的描述信息(必须)</li><li>src/              #源代码文件</li><li>include/          #C++头文件</li><li>scripts/          #可执行脚本</li><li>msg/              #自定义消息</li><li>srv/              #自定义服务</li><li>models/          #3D模型文件</li><li>urdf/          #urdf文件</li><li>launch/          #launch文件</li></ul></blockquote><h3 id="软件包相关命令"><a href="#软件包相关命令" class="headerlink" title="软件包相关命令"></a>软件包相关命令</h3><ol><li>rosdep</li></ol><table><thead><tr><th>rosdep命令</th><th>作用</th></tr></thead><tbody><tr><td>rosdep check [package]</td><td>检查package的依赖是否满足</td></tr><tr><td>rosdep install [package]</td><td>安装package的依赖</td></tr><tr><td>rosdep db</td><td>生成和显示依赖数据库</td></tr><tr><td>rosdep init</td><td>初始化 /etc/ros/rosdep中的源</td></tr><tr><td>rosdep keys</td><td>检查package的依赖是否满足</td></tr><tr><td>rosdep update</td><td>更新本地的rosdep数据库</td></tr></tbody></table><ol start="2"><li>rosls</li></ol><blockquote><p>rosls [package]<br>列出某package</p></blockquote><ol start="3"><li>roscd</li></ol><blockquote><p>roscd [package]<br>进入到某package的目录</p></blockquote><ol start="4"><li>roscp </li></ol><blockquote><p>roscp [package] filename dest_path<br>直接从某个package中复制某个文件到指定目录下</p></blockquote><ol start="5"><li>rospack</li></ol><table><thead><tr><th>rospack命令</th><th>作用</th></tr></thead><tbody><tr><td>rospack help</td><td>显示rospack的用法</td></tr><tr><td>rospack list</td><td>列出本机所有package</td></tr><tr><td>rospack depends [package]</td><td>显示package的依赖包</td></tr><tr><td>rospack find [package]</td><td>定位某个package</td></tr><tr><td>rospack profile</td><td>刷新所有package的位置记录</td></tr></tbody></table><h3 id="其他常见文件类型"><a href="#其他常见文件类型" class="headerlink" title="其他常见文件类型"></a>其他常见文件类型</h3><blockquote><ul><li>launch文件<blockquote><ul><li>launch文件一般以.launch或.xml结尾, 它对ROS需要运行程序进行了打包, 通过一句命令来启动</li></ul></blockquote></li><li>msg/srv/action文件<blockquote><ul><li>ROS程序中自定义的消息/服务/动作文件</li></ul></blockquote></li><li>urdf/xacro文件<blockquote><ul><li>urdf/xacro文件是机器人模型的描述文件, 以urdf或.xacro结尾</li></ul></blockquote></li><li>yaml文件<blockquote><ul><li>yaml文件一般存储了ROS需要加载的参数信息, 一些属性的配置, 通常我们会把yaml文件存放在param/路径下</li></ul></blockquote></li><li>dae/stl文件<blockquote><ul><li>dae或stl文件是3D模型问津, 机器人的urdf或仿真环境通常会引用这类文件, 它们描述了机器人的三维模型, 相比urdf简单定义的性状, dae/stl文件可以定义复杂的模型, 可以直接从solidworks或其他建模软件导出机器人装配模型, 从而显示出更加精确的外形</li></ul></blockquote></li><li>rviz文件<blockquote><ul><li>rviz文件本质上是固定格式的文本文件, 其中存储了rviz窗口的配置(显示哪些控件, 视角, 参数), 通常rviz文件不需要我们去手动修改, 而是直接在rviz工具里保存, 下次运行时直接读取</li></ul></blockquote></li></ul></blockquote><h1 id="ROS系统架构及概念-ROS计算图"><a href="#ROS系统架构及概念-ROS计算图" class="headerlink" title="ROS系统架构及概念_ROS计算图"></a>ROS系统架构及概念_ROS计算图</h1><h2 id="ROS计算图"><a href="#ROS计算图" class="headerlink" title="ROS计算图"></a>ROS计算图</h2><h3 id="ROS计算图内容"><a href="#ROS计算图内容" class="headerlink" title="ROS计算图内容"></a>ROS计算图内容</h3><blockquote><ul><li>ROS会创建一个连接到所有进程的网络, 在系统中的任何节点都可以访问此网络, 并通过该网络与其他节点交互, 获取其他节点发布的信息, 并将自身数据发布到网络上</li><li>在这一层中最基本的概念包括: 节点, 节点管理器, 参数服务器, 消息, 服务, 话题和消息记录包</li></ul></blockquote><p><img alt="ROS计算图" data-src="http://qiniu.wangqy.top/didong/images/ros-3.png"></p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><blockquote><ul><li>节点是主要的计算执行进程(可执行文件运行时的进程)</li><li>如果你想要有一个可以与其他节点进行交互的进程, 那么你需要创建一个节点, 并将此节点连接到ROS网络; 通常情况下, 系统包含能够实现不同功能的多个节点; 你最好让每个节点都具有特定的单一的功能, 而不是在系统中创建一个包罗万象的大节点;<br>节点需要使用如roscpp或rospy的ros客户端库进行编写</li></ul></blockquote><h3 id="节点管理器-master"><a href="#节点管理器-master" class="headerlink" title="节点管理器(master)"></a>节点管理器(master)</h3><blockquote><p>节点管理器用于节点的名称注册和查找等; 它也设置节点间的通信; 如果在你的整个ROS系统中没有节点管理器, 就不会有节点, 服务, 消息之间的通信; 需要注意的是, 由于ROS本身就是一个分布式网络系统, 你可以在某一台计算机上运行节点管理器, 在该管理器上或其他计算机上运行节点</p></blockquote><blockquote><p>注意:</p><ul><li>如果master没有运行起来, 其他节点不会运行</li><li>两个roscore(master)不能在两个终端中同时运行</li></ul></blockquote><p><img alt="节点管理器" data-src="http://qiniu.wangqy.top/didong/images/ros-10.png"></p><blockquote><p>rosout节点:<br>因为这个节点用于收集和记录节点调试输出信息, 所以它总是在运行</p></blockquote><blockquote><p>rosnode命令</p></blockquote><h3 id="消息-message"><a href="#消息-message" class="headerlink" title="消息(message)"></a>消息(message)</h3><blockquote><ul><li>节点之间可以通过传送消息进行通讯</li><li>每一个消息都是一个严格的数据结构</li><li>原来标准的数据类型(整型, 浮点型, 布尔型等等)都是支持的, 同时也支持原始数组类型; 消息可以包含任意的嵌套结构和数组(很类似于C语言的结构structs)</li></ul></blockquote><blockquote><p>msg文件夹中存放消息</p></blockquote><h3 id="话题-topic"><a href="#话题-topic" class="headerlink" title="话题(topic)"></a>话题(topic)</h3><blockquote><ul><li>两个节点需要通信, 需要先定义一个共同话题</li><li>一个节点可以发布多个话题, 一个节点可以订阅多个话题</li><li>topic的名称必须是独一无二的</li><li>topic保证了消息的发布者与订阅者的相互解耦, 彼此不需要知晓对方的存在</li></ul></blockquote><p><img alt="话题" data-src="http://qiniu.wangqy.top/didong/images/ros-1.png"></p><blockquote><p>话题的缺点:</p><ul><li>同步性不高</li><li>单向通信</li></ul></blockquote><h4 id="案例与应用"><a href="#案例与应用" class="headerlink" title="案例与应用"></a>案例与应用</h4><blockquote><ul><li><code>rosrun turtlesim turtle_teleop_key</code>, 键盘控制</li><li>rqt_graph能够创建一个显示当前系统运行情况的动态图形; rqt_graph是rqt程序包中的一部分</li><li><code>rosrun rqt_graph rqt_graph</code>, 查看节点及话题</li><li><code>rostopic list</code>, 查看所有话题</li><li><code>rostopic echo /turtle/cmd_vel</code>, 输出话题信息</li><li><code>rosrun rqt_graph rqt_graph</code>, 再打开rqt_graph</li><li><code>rostopic type</code> 与 <code>rosmsg show</code> 一起使用</li><li><code>rostopic pub [topic] [msg_type] [args]</code>, 使用命令发布话题</li><li><code>rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- &#39;[2.0, 0.0, 0.0]&#39; &#39;[0.0, 0.0, 1.8]&#39;</code>, <code>-1</code>, 表示运行一次</li><li><code>rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- &#39;[2.0, 0.0, 0.0]&#39; &#39;[0.0, 0.0, 1.8]&#39;</code>, 表示频率为1, 每一秒一次</li><li>再次运行rqt_graph查看</li><li><code>rostopic hz /turtle1/pose</code>, 查看频率</li><li><code>rostopic type /turtle/cmd_vel | rosmsg show</code>, 查看话题的参数</li><li>rqt_plot命令可以实时显示一个发布到某个话题上的数据变化图形; 这里我们将使用rqt_plot命令来绘制正在发布到/turtle1/pose话题上的数据变化图形</li><li><code>rosrun rqt_plot rqt_plot</code></li></ul></blockquote><h3 id="服务-service"><a href="#服务-service" class="headerlink" title="服务(service)"></a>服务(service)</h3><blockquote><ul><li>服务是节点之间通讯的另一种方式; 服务允许节点发送请求, 并获得一个响应</li><li>请求/回复交互方式经常被用于分布式系统中; 请求服务通过sevice来进行, service被定义为一对消息结构: 一个用于请求, 一个用于回复</li></ul></blockquote><p>服务(service)与话题(topic)的对比:</p><table><thead><tr><th>名称</th><th>topic</th><th>service</th></tr></thead><tbody><tr><td>通信方式</td><td>异步通信</td><td>同步通信</td></tr><tr><td>实现原理</td><td>TCP/IP</td><td>TCP/IP</td></tr><tr><td>通信模型</td><td>Publish-Subscribe</td><td>Request-Reply</td></tr><tr><td>映射关系</td><td>多对多</td><td>多对一</td></tr><tr><td>特点</td><td>接受者收到的数据会回调(Callback)</td><td>远程过程调用(RPC)服务器端的服务</td></tr><tr><td>应用场景</td><td>连续, 高频的数据发布</td><td>偶尔使用的功能/具体的任务</td></tr><tr><td>举例</td><td>激光雷达, 里程计发布数据</td><td>开关传感器, 拍照, 逆解计算</td></tr></tbody></table><p>rosservice 用法:</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>rosservice args</td><td>打印服务的参数</td></tr><tr><td>rosservice call</td><td>以命令行的形式调用服务, 可以指定具体参数</td></tr><tr><td>rosservice find</td><td>根据服务类型查找当前服务</td></tr><tr><td>rosservice info</td><td>打印服务信息</td></tr><tr><td>rosservice list</td><td>列出当前服务类型</td></tr><tr><td>rosservice type</td><td>打印服务类型</td></tr><tr><td>rosservice uri</td><td>打印服务的 ROSRPC uri</td></tr></tbody></table><p>rossrv 用法(该命令针对的是静态的服务文件*.srv):</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>rossrv show &lt;pkg_name&gt;/srv_name</td><td>显示服务类型的所有信息</td></tr><tr><td>rossrv list</td><td>显示所有服务类型信息</td></tr><tr><td>rossrv md5 &lt;pkg_name&gt;/srv_name</td><td>显示服务类型的md5sum信息(校验)</td></tr><tr><td>rossrv package &lt;pkg_name&gt;</td><td>列出一个程序包中的所有服务类型</td></tr><tr><td>rossrv packages &lt;srv_name&gt;</td><td>列出包含服务的所有程序包</td></tr></tbody></table><h4 id="案例与应用-1"><a href="#案例与应用-1" class="headerlink" title="案例与应用"></a>案例与应用</h4><blockquote><ul><li><code>rosservice list</code>, 显示提供的服务</li><li><code>rosservice type [service]</code></li><li><code>rosservice info [service]</code></li><li><code>rossrv show [service]</code></li><li><code>rosservice call [service] [args]</code><blockquote><ul><li><code>rosservice call clear</code>, 清空线</li><li><code>rosservice call /turtle1/set_pen 255 0 0 3 0</code>, 红线</li></ul></blockquote></li><li><code>rosservice type spawn | rossrv show</code>, 查看spawn再生服务的信息</li><li><code>rosservice call spawn 2 2 0.2 &quot;turtle2&quot;</code><blockquote><ul><li>(<code>x y 角度 名字</code>), 参数</li></ul></blockquote></li><li><code>rosservice call kill &quot;name: &#39;turtle2&#39;&quot;</code><blockquote><ul><li>(或 <code>rosservice call kill &quot;turtle2&quot;`</code>)</li></ul></blockquote></li></ul></blockquote><h3 id="参数服务器"><a href="#参数服务器" class="headerlink" title="参数服务器"></a>参数服务器</h3><h3 id="消息记录包"><a href="#消息记录包" class="headerlink" title="消息记录包"></a>消息记录包</h3>]]></content>
      
      
      <categories>
          
          <category> ROS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水下机器人视觉_1_介绍</title>
      <link href="/2019/09/08/%E6%B0%B4%E4%B8%8B%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%A7%86%E8%A7%89-1-%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/09/08/%E6%B0%B4%E4%B8%8B%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%A7%86%E8%A7%89-1-%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h1><h1 id="水下机器人"><a href="#水下机器人" class="headerlink" title="水下机器人"></a>水下机器人</h1><h1 id="水下机器人视觉"><a href="#水下机器人视觉" class="headerlink" title="水下机器人视觉"></a>水下机器人视觉</h1><p>目标检测 实例分割</p><h1 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h1><a id="more"></a><blockquote><p>发展阶段: 逻辑推理 -&gt; 专家系统 -&gt; 机器学习/深度学习</p></blockquote><blockquote><ul><li>人工智能: 研究, 开发用于模拟, 延伸和扩展人的智能的理论, 方法, 技术及应用系统的一门新的技术科学</li><li>机器学习: 如果一个程序可以在任务T上, 随着经验E增加, 效果P也可以随之增加, 则称这个程序可以从经验中学习</li><li>深度学习: 基于深度人工神经网络, 自动地将简单的特征组合成更加复杂的特征, 并使用这些组合特征解决问题</li></ul></blockquote><blockquote><p>推荐算法的改变: 协同过滤 -&gt; 深度学习</p></blockquote><blockquote><p>人工智能第三次崛起的三大因素: </p><ul><li>算法 </li><li>大数据(互联网产生的海量大数据) </li><li>计算力(CPU, GPU, TPU)</li></ul></blockquote><blockquote><p>cpu和gpu的区别:</p><ul><li>cpu: 核数较少 单核运算速度较快 </li><li>gpu: 核数很多 单核运算速度较慢 擅长并行计算 做矩阵运算</li></ul></blockquote><blockquote><ul><li>经典的程序设计: 数据 + 规则 -&gt; 答案</li><li>机器学习: 数据 + 答案 -&gt; 规则</li></ul></blockquote><blockquote><p>机器学习是通过学习而不是显式编程的方式, 赋予机器解决问题能力的方法<br>training: lableled data -&gt; machine learning algorithm<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v<br>prediction: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data -&gt; learned model -&gt; prediction</p></blockquote><blockquote><p>机器学习的学习方法:</p><ul><li>监督学习(通过标签的训练数据集, 如人脸识别)</li><li>无监督学习(通过无标签数据集自动发掘模式如, 文本自聚类)</li><li>增强/强化学习(通过反馈或者奖惩罚机制学习, 如游戏, 机器人)</li><li>半监督学习<br>以上深度学习都可以做</li></ul></blockquote><blockquote><p>特征学习: 深度学习的本质之一<br>input data -&gt; feature engineering(特征工程) -&gt; traditional learning algorithm (costs lots of time)<br>input data ———————————-&gt; deep learning algorithm</p></blockquote><blockquote><p>深度学习学到了什么?<br>图片 -&gt; 底层特征 -&gt; 中层特征 -&gt; 高层特征 -&gt; 分类器 -&gt; …<br>像素 -&gt; 边缘 -&gt; 部件 -&gt; 轮廓 -&gt; 物体</p></blockquote><blockquote><p>人工提取特征 -&gt; 简单训练分类器 -&gt; 传统人工智能<br>学习特征 -&gt; 学习分类器 -&gt; 深度学习</p></blockquote><h1 id="深度学习大事件"><a href="#深度学习大事件" class="headerlink" title="深度学习大事件"></a>深度学习大事件</h1><blockquote><ul><li>alphago</li><li>图像识别(IMAGENET大赛)</li><li>语音系统表现力</li><li>问答竞赛(自然语言处理)</li></ul></blockquote><h1 id="深度学习应用领域"><a href="#深度学习应用领域" class="headerlink" title="深度学习应用领域"></a>深度学习应用领域</h1><blockquote><p>深度学习应用三大领域:</p><ul><li>视觉</li><li>语音处理</li><li>自然语言处理</li></ul></blockquote><blockquote><ul><li>看图说话</li><li>风格迁移</li><li>目标检测<blockquote><ul><li>普适的目标检测, 不局限于特定问题(如: 人脸检测)<blockquote><ul><li>是什么 目标类别</li><li>在哪里 目标位置</li></ul></blockquote></li><li>评价指标<blockquote><ul><li>精度: 分类精度 位置精度</li><li>速度</li></ul></blockquote></li></ul></blockquote></li><li>智能安防(人脸检测和生理特征识别)</li><li>疾病检测</li><li>ocr识别</li><li>无人驾驶<blockquote><ul><li>物体检测 </li><li>行人检测 </li><li>标志识别 </li><li>速度识别</li></ul></blockquote></li><li>实例分割</li><li>语音处理</li><li>自然语言处理</li></ul></blockquote><h1 id="深度学习发展历史"><a href="#深度学习发展历史" class="headerlink" title="深度学习发展历史"></a>深度学习发展历史</h1><blockquote><p>1958 感知机(神经元) -&gt; 1969 感知机被否定 -&gt; 1974 反向传播算法 -&gt; 1995 SVM reigns -&gt; 1998 卷积神经网络(手写数字识别) -&gt; 2006 Restricted Boltzmann Machine -&gt; 2012 imagenet大赛 -&gt; 2012 Google Brain Project on 16k Cores</p></blockquote><blockquote><p>深度神经网络:<br>多个感知机形成的网络</p></blockquote><p>\(深度学习 \approx 深度神经网络\)</p><blockquote><p>深度学习的问题:</p><ul><li>端到端学习: 黑盒子, 不具有逻辑可解释性</li><li>依赖于大数据, 学习效率低</li><li>能耗大, 计算成本高</li><li>信息模态单一, 泛化迁移能力差</li></ul></blockquote><p>对抗样本</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse Unhandled event loop exception No more handles 错误解决</title>
      <link href="/2019/09/03/eclipse-Unhandled-event-loop-exception-No-more-handles-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/09/03/eclipse-Unhandled-event-loop-exception-No-more-handles-%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>将tomcat安装到非root用户下后, 同时将eclipse也安装到同一用户下, 使用该用户的权限启动后, 不再出现该问题</p></blockquote><blockquote><p>建议以后统一将自定义安装软件安装到普通用户目录下, 而不是root用户</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git(hub)项目合作教程</title>
      <link href="/2019/07/01/git-hub-%E9%A1%B9%E7%9B%AE%E5%90%88%E4%BD%9C%E6%95%99%E7%A8%8B/"/>
      <url>/2019/07/01/git-hub-%E9%A1%B9%E7%9B%AE%E5%90%88%E4%BD%9C%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大二小学期的项目终于开始正式起来了, 一起做东西的人也多了, 同时大家对git(hub)的了解也逐渐多了起来, 以及java有C++做铺垫, 相对以前来说, 有更多的时间去考虑项目(代码)管理. git(hub)终于可以发挥其真正的用途.</p><a id="more"></a><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="远程库的建立"><a href="#远程库的建立" class="headerlink" title="远程库的建立"></a>远程库的建立</h2><ol><li><p>有了github账号后, new一个远程库</p></li><li><p>填入库的名称</p></li><li><p>填入库的描述, 如果在后面勾选了README, 则描述会添加到README中</p></li><li><p>选择公开库就好(私有库只支持3人及以下免费, 支持无限创建, 虽然说以前完全不免费. 有个有钱的微软爸爸就是好啊(滑稽)! 而且, 学生项目没有必要, 开源学习就好.)</p></li><li><p>由于是新开启了一个项目, 可以勾选生成README; 如果是一个已经存在的项目, 这里不用勾选, 可以在项目根目录中再添加, 以及下面两个步骤都要忽略, 否则会在push和pull的时候起冲突, 也可通过合并本地仓库和远程仓库解决冲突</p></li><li><p>选择.gitignore文件对应的项目编程语言, 关于.gitignore文件参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900004590234208" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/900004590234208</a>, 不同的编程语言有不同的模板, 可参考<a href="https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p></li><li><p>添加license, 关于不同开源项目协议的选择, 参考下面的图片</p></li></ol><p><img alt="不同开源项目协议的选择" data-src="http://www.ruanyifeng.com/blogimg/asset/201105/free_software_licenses.png"></p><p>如果想更换协议, 或是在原有项目的基础上添加协议, 参考<a href="https://www.cnblogs.com/chenmingjun/p/8555906.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenmingjun/p/8555906.html</a></p><ol start="8"><li>添加协作者, 在远程库<code>setting - Collaborators</code>中添加协作者</li></ol><h2 id="本地仓库的建立"><a href="#本地仓库的建立" class="headerlink" title="本地仓库的建立"></a>本地仓库的建立</h2><p>在新开启一个项目的情况下, <code>git clone &lt;刚建立的远程仓库的地址&gt;</code>, 克隆远程仓库, 建议使用ssh协议</p><p>或者</p><p>在已有项目的基础上, 进入项目根目录, <code>git init</code>, 创建本地仓库</p><h2 id="开始开发"><a href="#开始开发" class="headerlink" title="开始开发"></a>开始开发</h2><p>在仓库根目录下, 开始项目开发后, 或者已有项目的基础上</p><p><code>git add *</code>提交所有更改到缓存区, 或者, <code>git add &lt;文件路径&gt;</code>提交该文件的更改到缓存区</p><p>有些时候<code>git add *</code>可能不管用, 使用<code>git status</code>查看库的状态, 如果有文件没有提交到缓存区, 单独提交一下即可</p><p><code>git commit -m &lt;提交的描述&gt;</code>, 在所有文件提交到缓存区后, 需要再做一次对整体的提交, 这才是真正的提交了, 同时注意写明这一次提交的描述</p><p><code>git push origin master</code>, 推送主分支的更改到远程库, 关于分支的内容, 由于项目较简单, 故暂不应用</p><p><code>git pull</code>, 拉取远程库的更改</p><p>其他更多git(hub)的内容参考最后的链接</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>刚安装完git后, 需要设置github的账户和密码, 按照git给出的提示设置即可</p><p><code>git remote add origin &lt;github仓库地址&gt;</code>, 将本地的仓库连接到某个远程服务器, 用于本地仓库不是从远程库克隆而来.</p><p>本地仓库和远程仓库冲突时, 参考<a href="https://blog.csdn.net/M87138/article/details/44921583" target="_blank" rel="noopener">https://blog.csdn.net/M87138/article/details/44921583</a>, 如果冲突无法自动合并, 则需要通过手动合并来解决</p><p>如果push的时候总是需要输入用户名和密码, 原因是未采用ssh方式来克隆仓库; 如果就是希望使用https方式来克隆仓库, 参考<a href="https://blog.csdn.net/nongweiyilady/article/details/77772602" target="_blank" rel="noopener">https://blog.csdn.net/nongweiyilady/article/details/77772602</a></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>git教程参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600</a></p><p>git使用简易指南参考<a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">http://www.bootcss.com/p/git-guide/</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim下写java</title>
      <link href="/2019/06/25/vim%E4%B8%8B%E5%86%99java/"/>
      <url>/2019/06/25/vim%E4%B8%8B%E5%86%99java/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于已经习惯了vim下的各种姿势, 刚开始学习java时虽然有很多优秀的IDE可以选, 但本着vim下一切皆有可能, 一切都可编辑的本性, 尝试着配置vim, 使其足以应付java的学习.</p><a id="more"></a><h1 id="文件编译运行"><a href="#文件编译运行" class="headerlink" title="文件编译运行"></a>文件编译运行</h1><h2 id="单文件"><a href="#单文件" class="headerlink" title="单文件"></a>单文件</h2><ul><li><p>直接<code>vim Test.java</code></p></li><li><p>由于之前已经安装了YCM, 所以有基本的java关键字补全, 但远远不够</p></li><li><p>编译和运行时, 需要退出vim或者使用<code>!javac Test.java</code>和<code>!java Test</code>, 或者切换到另外一个命令行执行, 虽然可以使用历史命令, 但依旧很不方便</p></li><li><p>于是, 在<code>~/.vimrc</code>文件中添加如下内容:</p></li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" java代码编译执行</span></span><br><span class="line"><span class="keyword">autocmd</span> BufNewFile,BufReadPre *.java <span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span><span class="keyword">cr</span> :<span class="keyword">w</span><span class="symbol">&lt;cr&gt;</span>:!javac %<span class="symbol">&lt;cr&gt;</span>:!java %:r<span class="symbol">&lt;cr&gt;</span></span><br></pre></td></tr></table></figure><ul><li>normal模式下<code>;cr</code>直接编译执行</li></ul><h2 id="多文件"><a href="#多文件" class="headerlink" title="多文件"></a>多文件</h2><ul><li>如果多个关联的文件放在一个目录下, 为了编译执行方便, 在<code>~/.vimrc</code>中添加如下内容:</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">autocmd</span> BufNewFile,BufReadPre *.java <span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>cra :<span class="keyword">w</span><span class="symbol">&lt;cr&gt;</span>:!javac *.java<span class="symbol">&lt;cr&gt;</span>:!java Main<span class="symbol">&lt;cr&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>注意! main方法必须在Main.java文件中.</p></li><li><p>normal模式下<code>;cr</code>直接编译执行</p></li></ul><h2 id="java工程管理"><a href="#java工程管理" class="headerlink" title="java工程管理"></a>java工程管理</h2><p>采用eclim</p><h1 id="java代码补全"><a href="#java代码补全" class="headerlink" title="java代码补全"></a>java代码补全</h1><p>只有关键字的补全太鸡肋, 只能借助eclim</p><h1 id="java代码调试"><a href="#java代码调试" class="headerlink" title="java代码调试"></a>java代码调试</h1><p>jdk中有jdb工具调试, 但是可能我觉得<code>System.out.println(&quot; &quot;);</code>更好用?</p><h1 id="eclim安装配置及使用"><a href="#eclim安装配置及使用" class="headerlink" title="eclim安装配置及使用"></a>eclim安装配置及使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>以下安装过程参考自官方文档</li></ul><h3 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h3><ul><li>jdk1.8或者更高版本, 我的是jdk11</li></ul><p>这个可以直接通过apt安装(主要是官方包下载太慢), 参考<a href="https://blog.51cto.com/vvxyz/1642258" target="_blank" rel="noopener">https://blog.51cto.com/vvxyz/1642258</a></p><ul><li>vim7.1或者更高版本, 我的是vim8.1</li></ul><p>vim中, 如果<code>:echo &amp;compatible</code>输出不为0</p><p>同时<code>:filetype</code>输出不为<code>filetype detection:ON plugin:ON indent:ON</code></p><p>需要在<code>~/.vimrc</code>文件中添加:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible</span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://eclipse.org/downloads/index.php" target="_blank" rel="noopener">eclipse4.8.x(Photon)</a>, 这个包不是很大, 但是鉴于国内网速太慢, 请自备梯子, 也可以通过其他方式下载, 只要清楚eclipse的安装位置</li></ul><p>(虽然只有安装了eclipse才能安装eclim, 貌似明明可以使用eclipse却偏不用, 但是vim好用啊)</p><ul><li><p>python(2.7或3.x)</p></li><li><p>make</p></li><li><p>gcc</p></li><li><p><a href="https://github.com/ervandew/eclim/releases/download/2.8.0/eclim_2.8.0.bin" target="_blank" rel="noopener">eclim</a></p></li></ul><p><a href="https://github.com/ervandew/eclim" target="_blank" rel="noopener">github项目地址</a></p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><ul><li><p>首先需要给下好的bin文件添加执行权限, <code>chmod +x eclim_2.8.0.bin</code></p></li><li><p>由于安装时需要联网验证, 而国内又不允许, 所以请自备梯子代理</p></li></ul><p><code>./eclim_2.8.0.bin --proxy 127.0.0.1:1080</code></p><p>或者</p><p><code>./eclim_2.8.0.bin --proxy user:password@127.0.0.1:1080</code></p><ul><li><p>ip地址和端口号请自行更改</p></li><li><p>然后, 就可以安装安装提示, 进行输入安装了</p></li><li><p>其他更多安装以及更新以及卸载方式, 请参考<a href="http://eclim.org/install.html" target="_blank" rel="noopener">eclim官网安装教程</a></p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>由于eclim是通过运行服务器来处理请求, 所以需要先运行eclim服务, 找到eclimd运行程序的路径(在安装eclim时告诉了你)</p><p>为了以后执行方便, 可以<code>alias eclimd=&#39;/home/didong/eclipse/committers-2019-06/eclipse/eclimd&#39;</code>, 将其放在<code>/etc/bash.bashrc</code>中, 设置永久别名</p><p>甚至为了方便, 可以在<code>/etc/rc.local</code>文件中设置开机自启</p><p><code>eclimd -b</code>可设置后台启动</p><h3 id="java代码补全-1"><a href="#java代码补全-1" class="headerlink" title="java代码补全"></a>java代码补全</h3><p>在安装了YCM的前提下, 在<code>~/.vimrc</code>中添加<code>let g:EclimCompletionMethod = &#39;omnifunc&#39;</code></p><p>注意, java的代码补全只能在工程java文件中使用</p><p>如果没有安装YCM, 或者安装了其他的第三方补全插件, 参考<a href="http://eclim.org/vim/code_completion.html" target="_blank" rel="noopener">http://eclim.org/vim/code_completion.html</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="简单工程管理"><a href="#简单工程管理" class="headerlink" title="简单工程管理"></a>简单工程管理</h3><ul><li><p><a href="http://eclim.org/gettingstarted.html" target="_blank" rel="noopener">官网入门教程</a></p></li><li><p><code>:ProjectCreate ./my_java_project -n java</code>, 创建一个java工程, 也可以创建其他类型的工程, 详情参考官网入门教程</p></li><li><p>在创建项目后, 会有一个<code>.project</code> 文件添加到项目的根目录, 以及另外一个文件(java为.classpath文件)由于引用项目的源目录和项目使用的任何第三方库, 其他语言的文件类型, 请参考官方入门教程</p></li><li><p><code>:ProjectList</code>列出可用项目</p></li><li><p><code>:NewSrcEntry src/java</code>添加名为java的源目录, 这会在<code>.classpath</code>文件的末尾添加必要的条目<code>&lt;classpathentry kind=&quot;src&quot; path=&quot;src/java&quot;/&gt;</code>, 注意, 依旧需要自己通过<code>mkdir</code>创建目录</p></li><li><p><code>:Java</code>运行代码</p></li></ul><h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><p><code>:JavaFormat</code>, 格式化当前行或visual模式下选中行</p><p><code>:%JavaFormat</code>, 格式化整个文件</p><h3 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h3><p>将光标放到希望重命名的元素上, <code>:JavaRename 新名</code>即可</p><h3 id="类型创建"><a href="#类型创建" class="headerlink" title="类型创建"></a>类型创建</h3><blockquote><ul><li>class (a new class)</li><li>interface (a new interface)</li><li>abstrac (a new abstract class)</li><li>enum (a new enum)</li><li>@interface (a new annotation)</li></ul></blockquote><p><code>:JavaNew class MyNewClass</code></p><h3 id="其他更多"><a href="#其他更多" class="headerlink" title="其他更多"></a>其他更多</h3><p>参考<a href="http://eclim.org/vim/java/index.html" target="_blank" rel="noopener">http://eclim.org/vim/java/index.html</a></p><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p><a href="https://www.jianshu.com/p/b0fb705c171a" target="_blank" rel="noopener">https://www.jianshu.com/p/b0fb705c171a</a></p><p><a href="https://segmentfault.com/a/1190000005642590" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005642590</a></p><p><a href="eclim.org">eclim.org</a></p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell笔记</title>
      <link href="/2019/06/06/shell%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/06/06/shell%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>参考自<a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell.html</a></p><h1 id="运行shell脚本"><a href="#运行shell脚本" class="headerlink" title="运行shell脚本"></a>运行shell脚本</h1><ol><li><p>作为可执行程序, <code>./test.sh</code>, 注意添加<code>#!/bin/bash</code>标记, 打开一个子shell来读取并执行<code>test.sh</code>中的命令, 需要”执行权限”</p></li><li><p>作为解释器参数<code>bash test.sh</code>, 打开一个子shell来读取并执行<code>test.sh</code>中的命令, 可以无”执行权限”</p></li><li><p>source命令, <code>source test.sh</code>, 在当前bash环境下读取并执行<code>test.sh</code>中的命令, 可以无”执行权限”</p></li></ol><a id="more"></a><h1 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h1><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><ol><li>显式赋值</li></ol><p>注意: 变量名和等号之间不能有空格</p><p><code>your_name=&quot;didong&quot;</code></p><ol start="2"><li>语句赋值</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /etc`</span><br><span class="line">或</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls /etc)</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"didong"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure><p>注意: 花括号可选, 但花括号可以用来识别变量边界, 比如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"I am good at <span class="variable">$&#123;skill&#125;</span>Script"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h2><p><code>readonly your_name</code>, 将变量设为只读</p><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><p><code>unset your_name</code>, 删除变量, 但不能删除只读变量</p><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><ol><li>局部变量</li></ol><p>在脚本或命令中定义, 仅在当前shell示例中有效, 其他shell启动的程序不能访问局部变量</p><ol start="2"><li>环境变量</li></ol><p>所有的程序, 包括shell启动的程序, 都能访问环境变量, 有些程序需要环境变量来保证其正常运行; 必要的时候shell脚本也可以定义环境变量.</p><ol start="3"><li>shell变量</li></ol><p>shell变量是由shell程序设置的特殊变量; shell变量中有一部分是环境变量, 有一部分是局部变量, 这些变量保证了shell的正常运行</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h2><blockquote><p>限制:</p><ul><li>单引号里的任何字符都会原样输出, 单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单独一个单引号(对单引号使用转义符后也不行), 但可成对出现, 作为字符串拼接使用</li></ul></blockquote><h2 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h2><blockquote><p>优点:</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul></blockquote><h2 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">"runoob"</span></span><br><span class="line"><span class="comment"># 使用双引号拼接</span></span><br><span class="line">greeting=<span class="string">"hello, "</span><span class="variable">$your_name</span><span class="string">" !"</span></span><br><span class="line">greeting_1=<span class="string">"hello, <span class="variable">$&#123;your_name&#125;</span> !"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span>  <span class="variable">$greeting_1</span></span><br><span class="line"><span class="comment"># 使用单引号拼接</span></span><br><span class="line">greeting_2=<span class="string">'hello, '</span><span class="variable">$your_name</span><span class="string">' !'</span></span><br><span class="line">greeting_3=<span class="string">'hello, $&#123;your_name&#125; !'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span>  <span class="variable">$greeting_3</span></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, runoob ! hello, runoob !</span><br><span class="line">hello, runoob ! hello, $&#123;your_name&#125; !</span><br></pre></td></tr></table></figure><h2 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"abcd"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span> <span class="comment">#输出 4</span></span><br></pre></td></tr></table></figure><p>或使用length:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"hello, everyone my name is didong"</span></span><br><span class="line">expr length <span class="string">"<span class="variable">$string</span>"</span></span><br></pre></td></tr></table></figure><blockquote><p>使用expr命令时, 表达式中的运算符左右必须包含空格, 如果不包含空格, 将会输出表达式本身<br>对于某些运算符, 还需要我们使用<code>\</code>进行转义, 否则会提示语法错误, 如<code>*</code></p></blockquote><h3 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h3><p>expr命令是一个手工命令行计数器, 用于求表达式变量的值, 一般用于整数值, 也可用于字符串</p><p>语法: <code>expr 表达式</code></p><p>详细内容直接man</p><h2 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h2><p>从字符串第 2 个字符开始截取 4 个字符(从0开始计数):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"runoob is a great site"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出 unoo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:4&#125;</span> <span class="comment"># 输出 runo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:0-4:3&#125;</span> <span class="comment"># 0-4表示从右边算起第四个字符开始, 3表示字符个数, 输出sit</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:0-4&#125;</span> <span class="comment"># 输出site</span></span><br></pre></td></tr></table></figure><h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><p>设有变量var=<a href="http://qiniu.wangqy.top/didong/images/" target="_blank" rel="noopener">http://qiniu.wangqy.top/didong/images/</a></p><ol><li>#号截取, 删除左边字符, 保留右边字符</li></ol><p><code>echo ${var#*//}</code></p><p>从左边开始删除第一个//号及左边的所有字符</p><ol start="2"><li>##号截取, 删除左边字符, 保留右边字符</li></ol><p><code>echo ${var##*/}</code></p><p>从左边开始删除最后(最右边)一个/号及左边所有字符</p><ol start="3"><li>%号截取, 删除右边字符, 保留左边字符</li></ol><p><code>echo ${var%/*}</code></p><p>从左边开始删除第一个/号及右边字符</p><ol start="4"><li>%%号截取, 删除右边字符, 保留左边字符</li></ol><p>echo ${var%%/*}</p><p>从左边开始, 删除最后(最左边)一个/号及右边的字符</p><h2 id="查找子字符"><a href="#查找子字符" class="headerlink" title="查找子字符"></a>查找子字符</h2><p>查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"runoob is a great site"</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">"<span class="variable">$string</span>"</span> io`  <span class="comment"># 输出 4</span></span><br></pre></td></tr></table></figure><p>注意: 这里的输出是从 1 开始计数</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>只支持一维数组, 不支持多位数组, 并且没有限定数组的大小, 数组下标由0开始</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>下标的范围没有限制</p><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">valuen=<span class="variable">$&#123;array_name[n]&#125;</span> <span class="comment"># 单个元素</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;array_name[@]&#125;</span> <span class="comment"># 使用 @或* 获取所有元素</span></span><br></pre></td></tr></table></figure><h2 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取得数组元素的个数</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[@]&#125;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">length=<span class="variable">$&#123;#array_name[*]&#125;</span></span><br><span class="line"><span class="comment"># 取得数组单个元素的长度</span></span><br><span class="line">lengthn=<span class="variable">$&#123;#array_name[n]&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Bourne-shell-原生kernel下-下不支持数组-只能通过模拟来实现数组功能"><a href="#Bourne-shell-原生kernel下-下不支持数组-只能通过模拟来实现数组功能" class="headerlink" title="Bourne shell (原生kernel下) 下不支持数组, 只能通过模拟来实现数组功能"></a>Bourne shell (原生kernel下) 下不支持数组, 只能通过模拟来实现数组功能</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#注意不是/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"##############使用eval函数###############"</span></span><br><span class="line"><span class="built_in">eval</span> a1=bili</span><br><span class="line"><span class="built_in">eval</span> a2=nico</span><br><span class="line"><span class="built_in">eval</span> a3=yama</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3 ; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">eval</span> <span class="built_in">echo</span> <span class="string">"\$a<span class="variable">$i</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h3><p>语法: <code>eval cmdline</code></p><p>eval会对后面的cmdline进行两遍扫描, 如果第一遍扫描后, cmdline是个普通命令, 则执行此命令; 如果cmdline中含有变量的间接引用, 则保证间接引用的语义</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><h2 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是注释</span></span><br></pre></td></tr></table></figure><h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><ol><li><p>可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果</p></li><li><p>如下:</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">###########或</span></span><br><span class="line">:&lt;&lt;<span class="string">'</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">'</span></span><br><span class="line"><span class="comment">###########或</span></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br><span class="line"><span class="comment">###########或</span></span><br><span class="line"><span class="comment"># 等等</span></span><br><span class="line"><span class="comment"># 其中符号可以更换</span></span><br></pre></td></tr></table></figure><h1 id="read命令用于获取键盘输入信息"><a href="#read命令用于获取键盘输入信息" class="headerlink" title="read命令用于获取键盘输入信息"></a>read命令用于获取键盘输入信息</h1><p><code>read [-options] [variable...]</code></p><p>read命令一个一个词组地接受输入的参数, 每个词组需要使用空格进行分隔; 如果输入的词组个数大于需要的参数个数, 则多出的词组将被作为整体为最后一个参数接收</p><p>参数 | 说明<br>-p | 输入提示文字<br>-n | 输入字符长度限制<br>-t | 输入限时<br>-s | 隐藏输入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入一段文字:"</span> -n 6 -t 5 -s password</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"\npassword is <span class="variable">$password</span>"</span></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入一段文字:</span><br><span class="line">password is didong</span><br></pre></td></tr></table></figure><h1 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h1><blockquote><p>传递参数: 执行shell脚本时, 向脚本传递参数<br>获取参数: <code>$n</code>, 0为脚本文件名, 1为第一个参数, 2为第二个参数, 以此类推…</p></blockquote><p>特殊参数处理字符</p><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数</td></tr><tr><td>$*</td><td>以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td>$$</td><td>脚本运行的当前进程id号</td></tr><tr><td>$!</td><td>后台运行的最后一个进程的id号</td></tr><tr><td>$@</td><td>与$*相同, 但使用时加引号, 并在引号中返回每个参数</td></tr><tr><td>$-</td><td>显示shell使用的当前选项, 与set命令功能相同</td></tr><tr><td>$?</td><td>显示最后命令的退出状态, 0表示没有错误, 其他任何值表示有错误</td></tr></tbody></table><p>注意: 传递的参数中如果包含空格, 应该使用单引号或者双引号将该参数括起来, 以便于脚本将这个参数作为整体来接收</p><h2 id="中括号的用法"><a href="#中括号的用法" class="headerlink" title="中括号的用法"></a>中括号的用法</h2><p><code>[]</code>常常可以使用test命令来代替</p><p><code>[</code>与<code>]</code>与操作数之间一定要有一个空格, 否则会报错</p><h3 id="算数比较"><a href="#算数比较" class="headerlink" title="算数比较"></a><span id="jump0">算数比较</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="variable">$var</span> -eq 0 ]  <span class="comment"># 当 $var 等于 0 时, 返回真</span></span><br><span class="line">[ <span class="variable">$var</span> -ne 0 ]  <span class="comment"># 当 $var 不等于 0 时, 返回真</span></span><br></pre></td></tr></table></figure><p>其他比较操作符:</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>-gt</td><td>大于</td></tr><tr><td>-lt</td><td>小于</td></tr><tr><td>-ge</td><td>大于或等于</td></tr><tr><td>-le</td><td>小于或等于</td></tr></tbody></table><h3 id="文件系统属性测试"><a href="#文件系统属性测试" class="headerlink" title="文件系统属性测试"></a>文件系统属性测试</h3><p>操作符 |  说明<br>[ -f $file_var ] | 变量 $file_var 是一个正常的文件路径或文件名 (file), 则返回真<br>[ -x $var ] | 变量 $var 包含的文件可执行 (execute), 则返回真<br>[ -d $var ] | 变量 $var 包含的文件是目录 (directory), 则返回真<br>[ -e $var ] | 变量 $var 包含的文件存在 (exist), 则返回真<br>[ -c $var ] | 变量 $var 包含的文件是一个字符设备文件的路径 (character), 则返回真<br>[ -b $var ] | 变量 $var 包含的文件是一个块设备文件的路径 (block), 则返回真<br>[ -w $var ] | 变量 $var 包含的文件可写(write), 则返回真<br>[ -r $var ] | 变量 $var 包含的文件可读 (read), 则返回真<br>[ -L $var ] | 变量 $var 包含是一个符号链接 (link), 则返回真</p><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>在进行字符串比较时, 最好使用双中括号<code>[[ ]]</code>, 因为单中括号可能会导致一些错误, 因此最好避开它们</p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>[[ $str1 = $str2 ]]</td><td>当 str1等于str2 时返回真, <code>=</code>前后有空格, 如果不加空格, 就变成了赋值语句</td></tr><tr><td>[[ $str1 == $str2 ]]</td><td>同上</td></tr><tr><td>[[ $str1 != $str2 ]]</td><td>如果 str1 与 str2 不相同, 则返回真</td></tr><tr><td>[[ -z $str1 ]]</td><td>如果 str1 是空字符串, 则返回真</td></tr><tr><td>[[ -n $str1 ]]</td><td>如果 str1 是非空字符串, 则返回真</td></tr></tbody></table><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><h4 id="中括号中"><a href="#中括号中" class="headerlink" title="中括号中"></a>中括号中</h4><p>可以通过-a(and)或-o(or)结合多个条件进行测试:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="variable">$var1</span> -ne 0 -a <span class="variable">$var2</span> -gt 2 ]  <span class="comment"># 使用逻辑与 -a</span></span><br><span class="line">[ <span class="variable">$var1</span> -ne 0 -o <span class="variable">$var2</span> -gt 2 ]  <span class="comment"># 使用逻辑或 -o</span></span><br></pre></td></tr></table></figure><h4 id="中括号外"><a href="#中括号外" class="headerlink" title="中括号外"></a>中括号外</h4><p>使用逻辑运算符<code>&amp;&amp;</code>和<code>||</code>将多个条件组合起来:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1=<span class="string">"Not empty"</span></span><br><span class="line">str2=<span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> [[ -n <span class="variable">$str1</span> ]] &amp;&amp; [[ -z <span class="variable">$str2</span> ]];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> str1 is nonempty and str2 is empty string.</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h3><p>test命令也可以执行条件检测, 用test可以避免使用过多的括号, 如:</p><p><code>if [ $var -eq 0 ]; then echo &quot;True&quot;; fi</code></p><p>等价于:</p><p><code>if test $var -eq 0; then echo &quot;True&quot;; fi</code></p><h2 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>用于设置shell的执行方式</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>set [+-abCdefhHklmnpPtuvx]</code></p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>标示已修改的变量, 以供输出至环境变量</td></tr><tr><td>b</td><td>使被中止的后台程序立刻回报执行状态</td></tr><tr><td>C</td><td>转向所产生的文件无法覆盖已存在的文件</td></tr><tr><td>d</td><td>Shell预设会用杂凑表记忆使用过的指令, 以加速指令的执行; 使用-d参数可取消</td></tr><tr><td>e</td><td>若指令回传值不等于0, 则立即退出shell</td></tr><tr><td>f</td><td>取消使用通配符</td></tr><tr><td>h</td><td>自动记录函数的所在位置</td></tr><tr><td>H</td><td>可利用<code>!</code>加&lt;指令编号&gt;的方式来执行history中记录的指令</td></tr><tr><td>k</td><td>指令所给的参数都会被视为此指令的环境变量</td></tr><tr><td>l</td><td>记录for循环的变量名称</td></tr><tr><td>m</td><td>使用监视模式</td></tr><tr><td>n</td><td>只读取指令, 而不实际执行</td></tr><tr><td>p</td><td>启动优先顺序模式</td></tr><tr><td>P</td><td>执行指令时, 会以实际的文件或目录来取代符号连接</td></tr><tr><td>t</td><td>执行完随后的指令, 即退出shell</td></tr><tr><td>u</td><td>当执行时使用到未定义过的变量, 则显示错误信息</td></tr><tr><td>v</td><td>显示shell所读取的输入值</td></tr><tr><td>x</td><td>执行指令后, 会显示该指令及所下的参数</td></tr><tr><td>+&lt;参数&gt;</td><td>取消某个set曾启动的参数</td></tr></tbody></table><h1 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h1><p>原生bash不支持简单的数学运算, 但是可以通过其他命令来实现, 如awk和expr, expr最常用</p><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><p><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code> <code>=</code> <code>==</code> <code>!=</code></p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符只支持数字, 不支持字符串, 除非字符串的值是数值</p><p>参照<a href="#jump0">算数比较部分</a></p><h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><p>注: 变量a为10, b为20</p><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>!</td><td>非运算</td><td>[ ! false ] 返回 true</td></tr><tr><td>-o</td><td>或运算</td><td>[ $a -lt 20 -o $b -gt 100 ] 返回 true</td></tr><tr><td>-a</td><td>与运算</td><td>[ $a -lt 20 -a $b -gt 100 ] 返回 false</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>逻辑的AND</td></tr><tr><td>&#124;&#124;</td><td>逻辑的OR</td></tr></tbody></table><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>变量a为”abc”, b为”efg”</p><p>运算符 | 说明 | 举例<br>= | 相等 | [ $a = $b ] 返回 false<br>!= | 不相等 | [$a != $b ] 返回 true<br>-z | 检测字符串长度是否为0, 为0返回true | [ -z $a ] 返回 false<br>-n | 检测字符串长度是否为0, 不为0返回true | [ -n $a ]返回 true<br>$ | 检测字符串是否为空, 不为空返回true | [ $a ]返回 true</p><h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><p>用于检测Unix文件的各种属性</p><p>操作符 | 说明<br>-b file | 检测文件是否是块设备, 如果是, 则返回true<br>-c file | 检测文件是否是字符设备文件, 如果是, 则返回true<br>-d file | 检测文件是否是目录, 如果是, 则返回true<br>-f file | 检测文件是否是普通文件(既不是目录也不是设备文件), 如果是, 则返回true<br>-g file | 检测文件是否设置了SGID位, 如果是, 则返回true<br>-k file | 检测文件是否设置了粘着位(Sticky Bit), 如果是, 则返回true<br>-p file | 检测文件是否是有名管道, 如果是, 则返回true<br>-u file | 检测文件是否设置了SUID位, 如果是, 则返回true<br>-r file | 检测文件是否可读, 如果是, 则返回true<br>-w file | 检测文件是否可写, 如果是, 则返回true<br>-x file | 检测文件是否可执行, 如果是, 则返回true<br>-s file | 检测文件是否为空(文件大小是否大于0), 不为空返回true<br>-e file | 检测文件(包括目录)是否存在, 如果是, 则返回true<br>-S file | 判断某文件是否socket<br>-L file | 检测文件是否存在并且是一个符号链接</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>使用<code>[[ ... ]]</code>条件判断结构, 而不是<code>[ ... ]</code>, 能够防止脚本中的许多逻辑错误. 比如, <code>&amp;&amp;</code>, <code>||</code>, <code>&lt;</code>和<code>&gt;</code>操作附能够正常存在于<code>[[]]</code>条件判断结构中, 但是如果出现在<code>[]</code>结构中的话, 会报错</p></blockquote><blockquote><p>使用<code>[]</code>时, <code>&gt;</code>和<code>&lt;</code>需要使用反斜线转义</p></blockquote><p>相加的写法</p><p>1.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">c=`expr <span class="variable">$&#123;a&#125;</span> + <span class="variable">$&#123;b&#125;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$c</span>"</span></span><br></pre></td></tr></table></figure><p>2.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$&#123; `expr 10 + 20` &#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$c</span>"</span></span><br></pre></td></tr></table></figure><p>3.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=$[ 10 + 20]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$c</span>"</span></span><br></pre></td></tr></table></figure><p>4.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line">c=$((<span class="variable">$a</span>+<span class="variable">$b</span>))</span><br></pre></td></tr></table></figure><h1 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h1><ol><li>显示普通字符串</li></ol><p><code>echo &quot;It is a test&quot;</code></p><p>双引号可省略</p><p><code>echo It is a test</code></p><ol start="2"><li>显示转义字符</li></ol><p><code>echo &quot;\&quot;It is a test\&quot;&quot;</code></p><p>结果为</p><p><code>&quot;It is a test&quot;</code></p><p>同样, 双引号也可以省略</p><ol start="3"><li>显示变量</li></ol><p>read 命令从标准输入中读取一行, 并把输入行的每个字段的值指定给shell变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$name</span> It is a test"</span></span><br></pre></td></tr></table></figure><ol start="4"><li>显示换行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"OK! \n"</span> <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OK!</span><br><span class="line"></span><br><span class="line">It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ol start="5"><li>显示不换行</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">"OK! \c"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OK! It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ol start="6"><li>显示结果定向至文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"It is a test"</span> &gt; myfile</span><br></pre></td></tr></table></figure><ol start="7"><li>原样输出字符串, 不进行转义或取变量(用单引号)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'$name\"'</span></span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>\<span class="string">"</span></span><br></pre></td></tr></table></figure><ol start="8"><li>显示命令执行结果(反引号)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `date`</span><br></pre></td></tr></table></figure><p>结果将显示当前日期</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>能否引用变量 | 能否引用转义符 | 能否引用文本格式符(如: 换行符, 制表符)<br>单引号 | 否 | 否 | 否<br>双引号 | 能 | 能 | 能<br>无引号 | 能 | 能 | 否</p><h1 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h1><p>printf由POSIX标准所定义, 因此使用printf的脚本比使用echo移植性好</p><p>printf使用引用文本或空格分割的参数</p><p>语法; <code>printf format-string [arguments...]</code></p><p>具体格式化字符串参照C中的printf()函数</p><blockquote><p>注意:</p><ul><li>单引号与双引号效果一样</li><li>没有引号也可以输出</li><li>格式只指定了一个参数, 但多出的参数仍然会安装该格式输出, format-string被重用</li><li>如果没有arguments, 那么 %s 用 NULL 代替, %d 用 0 代替</li></ul></blockquote><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>和Java, PHP等语言不一样, sh的流程控制不可为空, 如果else分支没有语句执行, 就不要写这个else</p><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">...</span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>也可以写成一行(每行命令末尾要加分号)</p><h3 id="if-else-1"><a href="#if-else-1" class="headerlink" title="if else"></a>if else</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">...</span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command1</span><br><span class="line"><span class="keyword">elif</span> condition2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">command2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> item1 item2 ... itemN</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">...</span><br><span class="line">commandN</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>也可以写成一行(每行命令末尾要加分号)</p><p>类似于C中的for循环</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((assignment;condition;next));</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">command1;</span><br><span class="line">command2;</span><br><span class="line">...</span><br><span class="line">commandN;</span><br><span class="line"><span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>注意: 如果要在循环体中进行for中的next操作, 记得变量要加<code>$</code>, 不然程序会变成死循环</p><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span> <span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>let命令是BASH中用于计算的工具, 用于执行一个或多个表达式, 变量计算中不需要加上<code>$</code>来表示变量. 如果表达式中包含了空格或其他特殊字符, 则必须引起来.</p><p>语法格式: <code>let arg [arg ...]</code>, 其中arg为要执行的表达式</p><p>与C/C++表达式类似</p><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> :</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (( ; ; ))</span><br></pre></td></tr></table></figure><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><p>until循环执行一系列命令<code>直至条件为true</code>时停止, while循环执行一系列命令<code>直至条件为false</code>时停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span></span><br><span class="line">模式1)</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">...</span><br><span class="line">commandN</span><br><span class="line">;;</span><br><span class="line">模式2)</span><br><span class="line">command1</span><br><span class="line">command2</span><br><span class="line">...</span><br><span class="line">commandN</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>如果没有匹配的模式, 使用<code>*</code>捕获该值</p><h2 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><h1 id="shell函数"><a href="#shell函数" class="headerlink" title="shell函数"></a>shell函数</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="keyword">function</span> ] funname [()]</span><br><span class="line">&#123;</span><br><span class="line">action;</span><br><span class="line">[<span class="built_in">return</span> int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明:</p><ul><li>可以带<code>function funname()</code>定义, 也可以直接<code>funname()</code>定义, 不带任何参数</li><li>参数返回, 可以显示加<code>return</code>返回, 如果不加, 将以最后一条命令运行结果, 作为返回值, return后跟数值<code>n(o-255)</code></li><li><code>funname</code>调用函数</li></ul></blockquote><h1 id="输入-输出重定向"><a href="#输入-输出重定向" class="headerlink" title="输入/输出重定向"></a>输入/输出重定向</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>command &gt; file</td><td>将输出重定向到file</td></tr><tr><td>command &lt; file</td><td>将输入重定向到file</td></tr><tr><td>command &gt;&gt; file</td><td>将输出以追加的方式重定向到file</td></tr><tr><td>n &gt; file</td><td>将文件描述符为n的文件重定向到file</td></tr><tr><td>n &gt;&gt; file</td><td>将文件描述符为n的文件以追加的方式重定向到file</td></tr><tr><td>n &gt;&amp; m</td><td>将输出文件m和n合并</td></tr><tr><td>n &lt;&amp; m</td><td>将输入文件m和n合并</td></tr><tr><td>&lt;&lt; tag</td><td>将开始标记tag和结束标记tag之间的内容作为输入</td></tr></tbody></table><blockquote><p>文件描述符0通常是标准输入(STDIN), 1是标准输出(STDOUT), 2是标准错误输出(STDERR)</p></blockquote><blockquote><p><code>command1 &lt; infile &gt; outfile</code><br>同时替换输入和输出, 执行command1, 从文件infile读取内容, 然后将输出写入到outfile中</p></blockquote><blockquote><p>如果希望stderr重定向到file<br><code>command 2 &gt; file</code><br>如果希望stderr追加到file文件末尾<br><code>command 2 &gt; file</code></p></blockquote><blockquote><p>如果希望将stdout和stderr合并后重定向到file<br><code>command &gt; file 2&gt;&amp;1</code><br>或者<br><code>command &gt;&gt; file 2&gt;&amp;1</code></p></blockquote><h2 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt;&lt; delimiter</span><br><span class="line">document</span><br><span class="line">delimiter</span><br></pre></td></tr></table></figure><blockquote><p>将两个delimiter之间的内容(documnet)作为输入传递给command<br>结尾的delimiter一定要顶格写, 前面不能有任何字符, 后面也不能有任何字符, 包括空格和tab缩进<br>开始的delimiter前后的空格会被忽略掉</p></blockquote><p>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wc -l &lt;&lt; EOF</span><br><span class="line">DIDA</span><br><span class="line">LAB</span><br><span class="line">DiDong</span><br><span class="line">EOF</span><br><span class="line">3 <span class="comment"># 输出结果为3行</span></span><br></pre></td></tr></table></figure><h2 id="dev-null文件"><a href="#dev-null文件" class="headerlink" title="/dev/null文件"></a>/dev/null文件</h2><blockquote><p>如果希望执行某个命令, 但又不希望在屏幕上显示输出结果, 那么可以将输出重定向到<code>/dev/null</code><br><code>command &gt; /dev/null</code><br><code>/dev/null</code>是一个特殊的文件, 写入到它的内容都会被丢弃; 如果尝试从该文件读取内容, 什么也读不到<br>如果希望屏蔽stdout和stderr<br><code>command &gt; /dev/null 2&gt;&amp;1</code></p></blockquote><h2 id="顺序问题"><a href="#顺序问题" class="headerlink" title="顺序问题"></a>顺序问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find /etc -name .bashrc &gt; list 2&gt;&amp;1</span><br><span class="line"><span class="comment"># 和</span></span><br><span class="line">find /etc -name .bashrc 2&gt;&amp;1 &gt; list</span><br><span class="line"><span class="comment"># 之间的区别</span></span><br></pre></td></tr></table></figure><blockquote><p>第一种<br>先要将输出到stdout的内容重定向到文件, 此时文件list就是这个程序的stdout, 再将stderr重定向到stdout, 也就是文件list<br>第二种<br>先将要输出的stderr的内容重定向到stdout, 此时会产生一个<code>stdout拷贝</code>, 作为程序的stderr, 而程序原本要输出到stdout的内容, 依然是对接在stdout原身上的, 因此第二步重定向stdout, 对stdout的拷贝不产生任何影响</p></blockquote><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><blockquote><p>直接在FreeBSD或者csh中使用<code>command &gt; file 2&gt;&amp;1</code>的时候会得到这个错误:<code>Ambiguous output redirect</code>. 出错的原因在于FreeBSD默认使用csh, 在csh中如果想把标准输出和错误输出同时重定向到一个文件, 需要用<code>command &gt;&amp; file</code></p></blockquote><h1 id="shell文件包含"><a href="#shell文件包含" class="headerlink" title="shell文件包含"></a>shell文件包含</h1><p>包含外部脚本, 方便封装一些公用的代码作为一个独立的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. filename</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure><p>被包含的文件不需要可执行权限</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记_2_实验1_答案</title>
      <link href="/2019/06/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0-2-%E5%AE%9E%E9%AA%8C1-%E7%AD%94%E6%A1%88/"/>
      <url>/2019/06/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0-2-%E5%AE%9E%E9%AA%8C1-%E7%AD%94%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab1-report"><a href="#Lab1-report" class="headerlink" title="Lab1 report"></a>Lab1 report</h1><h2 id="练习1"><a href="#练习1" class="headerlink" title="[练习1]"></a>[练习1]</h2><p>[练习1.1] 操作系统镜像文件 ucore.img 是如何一步一步生成的?(需要比较详细地解释 Makefile 中<br>每一条相关命令和命令参数的含义,以及说明命令导致的结果)</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">bin/ucore.img</span><br><span class="line">| 生成ucore.img的相关代码为</span><br><span class="line">| $(UCOREIMG): $(kernel) $(bootblock)</span><br><span class="line">|$(V)dd if=/dev/zero of=$@ count=10000</span><br><span class="line">|$(V)dd if=$(bootblock) of=$@ conv=notrunc</span><br><span class="line">|$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc</span><br><span class="line">|</span><br><span class="line">| 为了生成ucore.img，首先需要生成bootblock、kernel</span><br><span class="line">|</span><br><span class="line">|&gt;bin/bootblock</span><br><span class="line">|| 生成bootblock的相关代码为</span><br><span class="line">|| $(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign)</span><br><span class="line">||@echo + ld $@</span><br><span class="line">||$(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ \</span><br><span class="line">||-o $(call toobj,bootblock)</span><br><span class="line">||@$(OBJDUMP) -S $(call objfile,bootblock) &gt; \</span><br><span class="line">||$(call asmfile,bootblock)</span><br><span class="line">||@$(OBJCOPY) -S -O binary $(call objfile,bootblock) \</span><br><span class="line">||$(call outfile,bootblock)</span><br><span class="line">||@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)</span><br><span class="line">||</span><br><span class="line">|| 为了生成bootblock，首先需要生成bootasm.o、bootmain.o、sign</span><br><span class="line">||</span><br><span class="line">||&gt;obj/boot/bootasm.o, obj/boot/bootmain.o</span><br><span class="line">||| 生成bootasm.o,bootmain.o的相关makefile代码为</span><br><span class="line">||| bootfiles = $(call listf_cc,boot) </span><br><span class="line">||| $(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),\</span><br><span class="line">|||$(CFLAGS) -Os -nostdinc))</span><br><span class="line">||| 实际代码由宏批量生成</span><br><span class="line">||| </span><br><span class="line">||| 生成bootasm.o需要bootasm.S</span><br><span class="line">||| 实际命令为</span><br><span class="line">||| gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs \</span><br><span class="line">||| -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc \</span><br><span class="line">||| -c boot/bootasm.S -o obj/boot/bootasm.o</span><br><span class="line">||| 其中关键的参数为</span><br><span class="line">||| -ggdb  生成可供gdb使用的调试信息。这样才能用qemu+gdb来调试bootloader or ucore。</span><br><span class="line">|||-m32  生成适用于32位环境的代码。我们用的模拟硬件是32bit的80386，所以ucore也要是32位的软件。</span><br><span class="line">||| -gstabs  生成stabs格式的调试信息。这样要ucore的monitor可以显示出便于开发者阅读的函数调用栈信息</span><br><span class="line">||| -nostdinc  不使用标准库。标准库是给应用程序用的，我们是编译ucore内核，OS内核是提供服务的，所以所有的服务要自给自足。</span><br><span class="line">|||-fno-stack-protector  不生成用于检测缓冲区溢出的代码。这是for 应用程序的，我们是编译内核，ucore内核好像还用不到此功能。</span><br><span class="line">||| -Os  为减小代码大小而进行优化。根据硬件spec，主引导扇区只有512字节，我们写的简单bootloader的最终大小不能大于510字节。</span><br><span class="line">||| -I&lt;dir&gt;  添加搜索头文件的路径</span><br><span class="line">||| </span><br><span class="line">||| 生成bootmain.o需要bootmain.c</span><br><span class="line">||| 实际命令为</span><br><span class="line">||| gcc -Iboot/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc \</span><br><span class="line">||| -fno-stack-protector -Ilibs/ -Os -nostdinc \</span><br><span class="line">||| -c boot/bootmain.c -o obj/boot/bootmain.o</span><br><span class="line">||| 新出现的关键参数有</span><br><span class="line">||| -fno-builtin  除非用__builtin_前缀，</span><br><span class="line">|||              否则不进行builtin函数的优化</span><br><span class="line">||</span><br><span class="line">||&gt;bin/sign</span><br><span class="line">||| 生成sign工具的makefile代码为</span><br><span class="line">||| $(call add_files_host,tools/sign.c,sign,sign)</span><br><span class="line">||| $(call create_target_host,sign,sign)</span><br><span class="line">||| </span><br><span class="line">||| 实际命令为</span><br><span class="line">||| gcc -Itools/ -g -Wall -O2 -c tools/sign.c \</span><br><span class="line">||| -o obj/sign/tools/sign.o</span><br><span class="line">||| gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign</span><br><span class="line">||</span><br><span class="line">|| 首先生成bootblock.o</span><br><span class="line">|| ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 \</span><br><span class="line">||obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o</span><br><span class="line">|| 其中关键的参数为</span><br><span class="line">||-m &lt;emulation&gt;  模拟为i386上的连接器</span><br><span class="line">||-nostdlib  不使用标准库</span><br><span class="line">||-N  设置代码段和数据段均可读写</span><br><span class="line">||-e &lt;entry&gt;  指定入口</span><br><span class="line">||-Ttext  制定代码段开始位置</span><br><span class="line">||</span><br><span class="line">|| 拷贝二进制代码bootblock.o到bootblock.out</span><br><span class="line">|| objcopy -S -O binary obj/bootblock.o obj/bootblock.out</span><br><span class="line">|| 其中关键的参数为</span><br><span class="line">||-S  移除所有符号和重定位信息</span><br><span class="line">||-O &lt;bfdname&gt;  指定输出格式</span><br><span class="line">||</span><br><span class="line">|| 使用sign工具处理bootblock.out，生成bootblock</span><br><span class="line">|| bin/sign obj/bootblock.out bin/bootblock</span><br><span class="line">|</span><br><span class="line">|&gt;bin/kernel</span><br><span class="line">|| 生成kernel的相关代码为</span><br><span class="line">|| $(kernel): tools/kernel.ld</span><br><span class="line">|| $(kernel): $(KOBJS)</span><br><span class="line">|| @echo + ld $@</span><br><span class="line">|| $(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS)</span><br><span class="line">|| @$(OBJDUMP) -S $@ &gt; $(call asmfile,kernel)</span><br><span class="line">|| @$(OBJDUMP) -t $@ | $(SED) &apos;1,/SYMBOL TABLE/d; s/ .* / /; \</span><br><span class="line">|| /^$$/d&apos; &gt; $(call symfile,kernel)</span><br><span class="line">|| </span><br><span class="line">|| 为了生成kernel，首先需要 kernel.ld init.o readline.o stdio.o kdebug.o</span><br><span class="line">||kmonitor.o panic.o clock.o console.o intr.o picirq.o trap.o</span><br><span class="line">||trapentry.o vectors.o pmm.o  printfmt.o string.o</span><br><span class="line">|| kernel.ld已存在</span><br><span class="line">||</span><br><span class="line">||&gt;obj/kern/*/*.o </span><br><span class="line">||| 生成这些.o文件的相关makefile代码为</span><br><span class="line">||| $(call add_files_cc,$(call listf_cc,$(KSRCDIR)),kernel,\</span><br><span class="line">|||$(KCFLAGS))</span><br><span class="line">||| 这些.o生成方式和参数均类似，仅举init.o为例，其余不赘述</span><br><span class="line">||&gt;obj/kern/init/init.o</span><br><span class="line">||| 编译需要init.c</span><br><span class="line">||| 实际命令为</span><br><span class="line">|||gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 \</span><br><span class="line">|||-gstabs -nostdinc  -fno-stack-protector \</span><br><span class="line">|||-Ilibs/ -Ikern/debug/ -Ikern/driver/ \</span><br><span class="line">|||-Ikern/trap/ -Ikern/mm/ -c kern/init/init.c \</span><br><span class="line">|||-o obj/kern/init/init.o</span><br><span class="line">|| </span><br><span class="line">|| 生成kernel时，makefile的几条指令中有@前缀的都不必需</span><br><span class="line">|| 必需的命令只有</span><br><span class="line">|| ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel \</span><br><span class="line">|| obj/kern/init/init.o obj/kern/libs/readline.o \</span><br><span class="line">|| obj/kern/libs/stdio.o obj/kern/debug/kdebug.o \</span><br><span class="line">|| obj/kern/debug/kmonitor.o obj/kern/debug/panic.o \</span><br><span class="line">|| obj/kern/driver/clock.o obj/kern/driver/console.o \</span><br><span class="line">|| obj/kern/driver/intr.o obj/kern/driver/picirq.o \</span><br><span class="line">|| obj/kern/trap/trap.o obj/kern/trap/trapentry.o \</span><br><span class="line">|| obj/kern/trap/vectors.o obj/kern/mm/pmm.o \</span><br><span class="line">|| obj/libs/printfmt.o obj/libs/string.o</span><br><span class="line">|| 其中新出现的关键参数为</span><br><span class="line">||-T &lt;scriptfile&gt;  让连接器使用指定的脚本</span><br><span class="line">|</span><br><span class="line">| 生成一个有10000个块的文件，每个块默认512字节，用0填充</span><br><span class="line">| dd if=/dev/zero of=bin/ucore.img count=10000</span><br><span class="line">|</span><br><span class="line">| 把bootblock中的内容写到第一个块</span><br><span class="line">| dd if=bin/bootblock of=bin/ucore.img conv=notrunc</span><br><span class="line">|</span><br><span class="line">| 从第二个块开始写kernel中的内容</span><br><span class="line">| dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc</span><br></pre></td></tr></table></figure><p>[练习1.2] 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么?</p><p>从sign.c的代码来看，一个磁盘主引导扇区只有512字节。且<br>第510个（倒数第二个）字节是0x55，<br>第511个（倒数第一个）字节是0xAA。</p><h2 id="练习2"><a href="#练习2" class="headerlink" title="[练习2]"></a>[练习2]</h2><p>[练习2.1] 从 CPU 加电后执行的第一条指令开始,单步跟踪 BIOS 的执行。</p><p>练习2可以单步跟踪，方法如下：</p><p>1 修改 lab1/tools/gdbinit,内容为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set architecture i8086</span><br><span class="line">target remote :1234</span><br></pre></td></tr></table></figure></p><p>2 在 lab1目录下，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make debug</span><br></pre></td></tr></table></figure></p><p>3 在看到gdb的调试界面(gdb)后，在gdb调试界面下执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">si</span><br></pre></td></tr></table></figure></p><p>即可单步跟踪BIOS了。</p><p>4 在gdb界面下，可通过如下命令来看BIOS的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x /2i $pc  //显示当前eip处的汇编指令</span><br></pre></td></tr></table></figure></p><blockquote><p>[进一步的补充]</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">改写Makefile文件</span><br><span class="line">debug: $(UCOREIMG)</span><br><span class="line">$(V)$(TERMINAL) -e &quot;$(QEMU) -S -s -d in_asm -D $(BINDIR)/q.log -parallel stdio -hda $&lt; -serial null&quot;</span><br><span class="line">$(V)sleep 2</span><br><span class="line">$(V)$(TERMINAL) -e &quot;gdb -q -tui -x tools/gdbinit&quot;</span><br></pre></td></tr></table></figure><p>在调用qemu时增加<code>-d in_asm -D q.log</code>参数，便可以将运行的汇编指令保存在q.log中。<br>为防止qemu在gdb连接后立即开始执行，删除了<code>tools/gdbinit</code>中的<code>continue</code>行。</p><p>[练习2.2] 在初始化位置0x7c00 设置实地址断点,测试断点正常。</p><p>在tools/gdbinit结尾加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   set architecture i8086  //设置当前调试的CPU是8086</span><br><span class="line">b *0x7c00  //在0x7c00处设置断点。此地址是bootloader入口点地址，可看boot/bootasm.S的start地址处</span><br><span class="line">c          //continue简称，表示继续执行</span><br><span class="line">x /2i $pc  //显示当前eip处的汇编指令</span><br><span class="line">set architecture i386  //设置当前调试的CPU是80386</span><br></pre></td></tr></table></figure><p>运行”make debug”便可得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint 2, 0x00007c00 in ?? ()</span><br><span class="line">=&gt; 0x7c00:      cli    </span><br><span class="line">   0x7c01:      cld    </span><br><span class="line">   0x7c02:      xor    %eax,%eax</span><br><span class="line">   0x7c04:      mov    %eax,%ds</span><br><span class="line">   0x7c06:      mov    %eax,%es</span><br><span class="line">   0x7c08:      mov    %eax,%ss </span><br><span class="line">   0x7c0a:      in     $0x64,%al</span><br><span class="line">   0x7c0c:      test   $0x2,%al</span><br><span class="line">   0x7c0e:      jne    0x7c0a</span><br><span class="line">   0x7c10:      mov    $0xd1,%al</span><br></pre></td></tr></table></figure><p>[练习2.3] 在调用qemu 时增加-d in_asm -D q.log 参数，便可以将运行的汇编指令保存在q.log 中。<br>将执行的汇编代码与bootasm.S 和 bootblock.asm 进行比较，看看二者是否一致。</p><p>在tools/gdbinit结尾加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b *0x7c00</span><br><span class="line">c</span><br><span class="line">x /10i $pc</span><br></pre></td></tr></table></figure></p><p>便可以在q.log中读到”call bootmain”前执行的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c00:  cli    </span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c01:  cld    </span><br><span class="line">0x00007c02:  xor    %ax,%ax</span><br><span class="line">0x00007c04:  mov    %ax,%ds</span><br><span class="line">0x00007c06:  mov    %ax,%es</span><br><span class="line">0x00007c08:  mov    %ax,%ss</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c0a:  in     $0x64,%al</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c0c:  test   $0x2,%al</span><br><span class="line">0x00007c0e:  jne    0x7c0a</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c10:  mov    $0xd1,%al</span><br><span class="line">0x00007c12:  out    %al,$0x64</span><br><span class="line">0x00007c14:  in     $0x64,%al</span><br><span class="line">0x00007c16:  test   $0x2,%al</span><br><span class="line">0x00007c18:  jne    0x7c14</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c1a:  mov    $0xdf,%al</span><br><span class="line">0x00007c1c:  out    %al,$0x60</span><br><span class="line">0x00007c1e:  lgdtw  0x7c6c</span><br><span class="line">0x00007c23:  mov    %cr0,%eax</span><br><span class="line">0x00007c26:  or     $0x1,%eax</span><br><span class="line">0x00007c2a:  mov    %eax,%cr0</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c2d:  ljmp   $0x8,$0x7c32</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c32:  mov    $0x10,%ax</span><br><span class="line">0x00007c36:  mov    %eax,%ds</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c38:  mov    %eax,%es</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c3a:  mov    %eax,%fs</span><br><span class="line">0x00007c3c:  mov    %eax,%gs</span><br><span class="line">0x00007c3e:  mov    %eax,%ss</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c40:  mov    $0x0,%ebp</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007c45:  mov    $0x7c00,%esp</span><br><span class="line">0x00007c4a:  call   0x7d0d</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">IN: </span><br><span class="line">0x00007d0d:  push   %ebp</span><br></pre></td></tr></table></figure></p><p>其与bootasm.S和bootblock.asm中的代码相同。</p><h2 id="练习3"><a href="#练习3" class="headerlink" title="[练习3]"></a>[练习3]</h2><p>分析bootloader 进入保护模式的过程。</p><p>从<code>%cs=0 $pc=0x7c00</code>，进入后</p><p>首先清理环境：包括将flag置0和将段寄存器置0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.code16</span><br><span class="line">    cli</span><br><span class="line">    cld</span><br><span class="line">    xorw %ax, %ax</span><br><span class="line">    movw %ax, %ds</span><br><span class="line">    movw %ax, %es</span><br><span class="line">    movw %ax, %ss</span><br></pre></td></tr></table></figure></p><p>开启A20：通过将键盘控制器上的A20线置于高电位，全部32条地址线可用，<br>可以访问4G的内存空间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">seta20.1:               # 等待8042键盘控制器不忙</span><br><span class="line">    inb $0x64, %al      # </span><br><span class="line">    testb $0x2, %al     #</span><br><span class="line">    jnz seta20.1        #</span><br><span class="line"></span><br><span class="line">    movb $0xd1, %al     # 发送写8042输出端口的指令</span><br><span class="line">    outb %al, $0x64     #</span><br><span class="line"></span><br><span class="line">seta20.1:               # 等待8042键盘控制器不忙</span><br><span class="line">    inb $0x64, %al      # </span><br><span class="line">    testb $0x2, %al     #</span><br><span class="line">    jnz seta20.1        #</span><br><span class="line"></span><br><span class="line">    movb $0xdf, %al     # 打开A20</span><br><span class="line">    outb %al, $0x60     #</span><br></pre></td></tr></table></figure></p><p>初始化GDT表：一个简单的GDT表和其描述符已经静态储存在引导区中，载入即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lgdt gdtdesc</span><br></pre></td></tr></table></figure></p><p>进入保护模式：通过将cr0寄存器PE位置1便开启了保护模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movl %cr0, %eax</span><br><span class="line">orl $CR0_PE_ON, %eax</span><br><span class="line">movl %eax, %cr0</span><br></pre></td></tr></table></figure></p><p>通过长跳转更新cs的基地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ljmp $PROT_MODE_CSEG, $protcseg</span><br><span class="line">.code32</span><br><span class="line">protcseg:</span><br></pre></td></tr></table></figure></p><p>设置段寄存器，并建立堆栈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">movw $PROT_MODE_DSEG, %ax</span><br><span class="line">movw %ax, %ds</span><br><span class="line">movw %ax, %es</span><br><span class="line">movw %ax, %fs</span><br><span class="line">movw %ax, %gs</span><br><span class="line">movw %ax, %ss</span><br><span class="line">movl $0x0, %ebp</span><br><span class="line">movl $start, %esp</span><br></pre></td></tr></table></figure></p><p>转到保护模式完成，进入boot主方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call bootmain</span><br></pre></td></tr></table></figure></p><h2 id="练习4"><a href="#练习4" class="headerlink" title="[练习4]"></a>[练习4]</h2><p>分析bootloader加载ELF格式的OS的过程。</p><p>首先看readsect函数，<br><code>readsect</code>从设备的第secno扇区读取数据到dst位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">readsect(void *dst, uint32_t secno) &#123;</span><br><span class="line">    waitdisk();</span><br><span class="line"></span><br><span class="line">    outb(0x1F2, 1);                         // 设置读取扇区的数目为1</span><br><span class="line">    outb(0x1F3, secno &amp; 0xFF);</span><br><span class="line">    outb(0x1F4, (secno &gt;&gt; 8) &amp; 0xFF);</span><br><span class="line">    outb(0x1F5, (secno &gt;&gt; 16) &amp; 0xFF);</span><br><span class="line">    outb(0x1F6, ((secno &gt;&gt; 24) &amp; 0xF) | 0xE0);</span><br><span class="line">        // 上面四条指令联合制定了扇区号</span><br><span class="line">        // 在这4个字节线联合构成的32位参数中</span><br><span class="line">        //   29-31位强制设为1</span><br><span class="line">        //   28位(=0)表示访问&quot;Disk 0&quot;</span><br><span class="line">        //   0-27位是28位的偏移量</span><br><span class="line">    outb(0x1F7, 0x20);                      // 0x20命令，读取扇区</span><br><span class="line"></span><br><span class="line">    waitdisk();</span><br><span class="line"></span><br><span class="line">    insl(0x1F0, dst, SECTSIZE / 4);         // 读取到dst位置，</span><br><span class="line">                                            // 幻数4因为这里以DW为单位</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>readseg简单包装了readsect，可以从设备读取任意长度的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">static void</span><br><span class="line">readseg(uintptr_t va, uint32_t count, uint32_t offset) &#123;</span><br><span class="line">    uintptr_t end_va = va + count;</span><br><span class="line"></span><br><span class="line">    va -= offset % SECTSIZE;</span><br><span class="line"></span><br><span class="line">    uint32_t secno = (offset / SECTSIZE) + 1; </span><br><span class="line">    // 加1因为0扇区被引导占用</span><br><span class="line">    // ELF文件从1扇区开始</span><br><span class="line"></span><br><span class="line">    for (; va &lt; end_va; va += SECTSIZE, secno ++) &#123;</span><br><span class="line">        readsect((void *)va, secno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在bootmain函数中，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">void</span><br><span class="line">bootmain(void) &#123;</span><br><span class="line">    // 首先读取ELF的头部</span><br><span class="line">    readseg((uintptr_t)ELFHDR, SECTSIZE * 8, 0);</span><br><span class="line"></span><br><span class="line">    // 通过储存在头部的幻数判断是否是合法的ELF文件</span><br><span class="line">    if (ELFHDR-&gt;e_magic != ELF_MAGIC) &#123;</span><br><span class="line">        goto bad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct proghdr *ph, *eph;</span><br><span class="line"></span><br><span class="line">    // ELF头部有描述ELF文件应加载到内存什么位置的描述表，</span><br><span class="line">    // 先将描述表的头地址存在ph</span><br><span class="line">    ph = (struct proghdr *)((uintptr_t)ELFHDR + ELFHDR-&gt;e_phoff);</span><br><span class="line">    eph = ph + ELFHDR-&gt;e_phnum;</span><br><span class="line"></span><br><span class="line">    // 按照描述表将ELF文件中数据载入内存</span><br><span class="line">    for (; ph &lt; eph; ph ++) &#123;</span><br><span class="line">        readseg(ph-&gt;p_va &amp; 0xFFFFFF, ph-&gt;p_memsz, ph-&gt;p_offset);</span><br><span class="line">    &#125;</span><br><span class="line">    // ELF文件0x1000位置后面的0xd1ec比特被载入内存0x00100000</span><br><span class="line">    // ELF文件0xf000位置后面的0x1d20比特被载入内存0x0010e000</span><br><span class="line"></span><br><span class="line">    // 根据ELF头部储存的入口信息，找到内核的入口</span><br><span class="line">    ((void (*)(void))(ELFHDR-&gt;e_entry &amp; 0xFFFFFF))();</span><br><span class="line"></span><br><span class="line">bad:</span><br><span class="line">    outw(0x8A00, 0x8A00);</span><br><span class="line">    outw(0x8A00, 0x8E00);</span><br><span class="line">    while (1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="练习5"><a href="#练习5" class="headerlink" title="[练习5]"></a>[练习5]</h2><p>实现函数调用堆栈跟踪函数 </p><p>ss:ebp指向的堆栈位置储存着caller的ebp，以此为线索可以得到所有使用堆栈的函数ebp。<br>ss:ebp+4指向caller调用时的eip，ss:ebp+8等是（可能的）参数。</p><p>输出中，堆栈最深一层为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ebp:0x00007bf8 eip:0x00007d68 \</span><br><span class="line">args:0x00000000 0x00000000 0x00000000 0x00007c4f</span><br><span class="line">    &lt;unknow&gt;: -- 0x00007d67 --</span><br></pre></td></tr></table></figure></p><p>其对应的是第一个使用堆栈的函数，bootmain.c中的bootmain。<br>bootloader设置的堆栈从0x7c00开始，使用”call bootmain”转入bootmain函数。<br>call指令压栈，所以bootmain中ebp为0x7bf8。</p><h2 id="练习6"><a href="#练习6" class="headerlink" title="[练习6]"></a>[练习6]</h2><p>完善中断初始化和处理</p><p>[练习6.1] 中断向量表中一个表项占多少字节？其中哪几位代表中断处理代码的入口？</p><p>中断向量表一个表项占用8字节，其中2-3字节是段选择子，0-1字节和6-7字节拼成位移，<br>两者联合便是中断处理程序的入口地址。</p><p>[练习6.2] 请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。</p><p>见代码</p><p>[练习6.3] 请编程完善trap.c中的中断处理函数trap，在对时钟中断进行处理的部分填写trap函数</p><p>见代码</p><h2 id="练习7"><a href="#练习7" class="headerlink" title="[练习7]"></a>[练习7]</h2><p>增加syscall功能，即增加一用户态函数（可执行一特定系统调用：获得时钟计数值），<br>当内核初始完毕后，可从内核态返回到用户态的函数，而用户态的函数又通过系统调用得到内核态的服务</p><p>在idt_init中，将用户态调用SWITCH_TOK中断的权限打开。<br>    SETGATE(idt[T_SWITCH_TOK], 1, KERNEL_CS, __vectors[T_SWITCH_TOK], 3);</p><p>在trap_dispatch中，将iret时会从堆栈弹出的段寄存器进行修改<br>    对TO User<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tf-&gt;tf_cs = USER_CS;</span><br><span class="line">tf-&gt;tf_ds = USER_DS;</span><br><span class="line">tf-&gt;tf_es = USER_DS;</span><br><span class="line">tf-&gt;tf_ss = USER_DS;</span><br></pre></td></tr></table></figure></p><pre><code>对TO Kernel</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tf-&gt;tf_cs = KERNEL_CS;</span><br><span class="line">tf-&gt;tf_ds = KERNEL_DS;</span><br><span class="line">tf-&gt;tf_es = KERNEL_DS;</span><br></pre></td></tr></table></figure><p>在lab1_switch_to_user中，调用T_SWITCH_TOU中断。<br>注意从中断返回时，会多pop两位，并用这两位的值更新ss,sp，损坏堆栈。<br>所以要先把栈压两位，并在从中断返回后修复esp。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asm volatile (</span><br><span class="line">    &quot;sub $0x8, %%esp \n&quot;</span><br><span class="line">    &quot;int %0 \n&quot;</span><br><span class="line">    &quot;movl %%ebp, %%esp&quot;</span><br><span class="line">    : </span><br><span class="line">    : &quot;i&quot;(T_SWITCH_TOU)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>在lab1_switch_to_kernel中，调用T_SWITCH_TOK中断。<br>注意从中断返回时，esp仍在TSS指示的堆栈中。所以要在从中断返回后修复esp。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">asm volatile (</span><br><span class="line">    &quot;int %0 \n&quot;</span><br><span class="line">    &quot;movl %%ebp, %%esp \n&quot;</span><br><span class="line">    : </span><br><span class="line">    : &quot;i&quot;(T_SWITCH_TOK)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>但这样不能正常输出文本。根据提示，在trap_dispatch中转User态时，将调用io所需权限降低。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf-&gt;tf_eflags |= 0x3000;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记_2_实验1</title>
      <link href="/2019/06/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0-2-%E5%AE%9E%E9%AA%8C1/"/>
      <url>/2019/06/06/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0-2-%E5%AE%9E%E9%AA%8C1/</url>
      
        <content type="html"><![CDATA[<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>完成一个能够切换到x86的保护模式并显示字符的bootloader</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>Bootloader可以让CPU进入保护模式, 读磁盘并加载ELF执行文件格式, 并显示字符</p><p>OS只是一个可以处理时钟中断和显示字符的幼儿园级别OS</p><a id="more"></a><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p>连续内存的管理</p><p>中断的管理</p><h1 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h1><blockquote><p>一个被系统认为是符合规范的硬盘主引导扇区的特征是什么?<br><code>tools/sign.c</code>中完成了特征的标记</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tools/sign.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;<span class="comment">//关于main函数参数的问题, 参考https://blog.csdn.net/yhawaii/article/details/7361302</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span><span class="comment">//struct stat结构体用来描述一个linux文件系统中的文件属性的结构, 参考https://www.cnblogs.com/CSU-PL/archive/2013/06/06/3120757.html</span></span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: &lt;input filename&gt; &lt;output filename&gt;\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stat(argv[<span class="number">1</span>], &amp;st) != <span class="number">0</span>) &#123;<span class="comment">//通过路径获取bootloader文件属性, argv[1]为文件路径</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error opening file '%s': %s\n"</span>, argv[<span class="number">1</span>], strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"'%s' size: %lld bytes\n"</span>, argv[<span class="number">1</span>], (<span class="keyword">long</span> <span class="keyword">long</span>)st.st_size);</span><br><span class="line">    <span class="keyword">if</span> (st.st_size &gt; <span class="number">510</span>) &#123;<span class="comment">//结束标志是两个字节(0x55AA)</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%lld &gt;&gt; 510!!\n"</span>, (<span class="keyword">long</span> <span class="keyword">long</span>)st.st_size);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(buf));<span class="comment">//缓冲区清空</span></span><br><span class="line">    FILE *ifp = fopen(argv[<span class="number">1</span>], <span class="string">"rb"</span>);</span><br><span class="line">    <span class="keyword">int</span> size = fread(buf, <span class="number">1</span>, st.st_size, ifp);</span><br><span class="line">    <span class="keyword">if</span> (size != st.st_size) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"read '%s' error, size is %d.\n"</span>, argv[<span class="number">1</span>], size);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(ifp);</span><br><span class="line">    buf[<span class="number">510</span>] = <span class="number">0x55</span>;<span class="comment">//标记</span></span><br><span class="line">    buf[<span class="number">511</span>] = <span class="number">0xAA</span>;</span><br><span class="line">    FILE *ofp = fopen(argv[<span class="number">2</span>], <span class="string">"wb+"</span>);</span><br><span class="line">    size = fwrite(buf, <span class="number">1</span>, <span class="number">512</span>, ofp);</span><br><span class="line">    <span class="keyword">if</span> (size != <span class="number">512</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"write '%s' error, size is %d.\n"</span>, argv[<span class="number">2</span>], size);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(ofp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"build 512 bytes boot sector: '%s' success!\n"</span>, argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h1><ol><li>lab1-mon</li></ol><p>lab1_result的Makefile中:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">lab1-mon: <span class="variable">$(UCOREIMG)</span></span></span><br><span class="line"><span class="variable">$(V)</span><span class="variable">$(TERMINAL)</span> -e <span class="string">"<span class="variable">$(QEMU)</span> -S -s -d in_asm -D <span class="variable">$(BINDIR)</span>/q.log -monitor stdio -hda <span class="variable">$&lt;</span> -serial null"</span> <span class="comment"># 将qemu执行指令的信息记录下来, 放到q.log</span></span><br><span class="line"><span class="variable">$(V)</span>sleep 2</span><br><span class="line"><span class="variable">$(V)</span><span class="variable">$(TERMINAL)</span> -e <span class="string">"gdb -q -x tools/lab1init"</span> <span class="comment"># 和gdb结合来调试正在执行的bootloader, lab1init中是一些初始化的执行指令</span></span><br></pre></td></tr></table></figure><ol start="2"><li>lab1init</li></ol><p>lab1init内容(gdb可以识别的一些命令)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file bin/kernel</span><br><span class="line">target remote :1234</span><br><span class="line">set architecture i8086</span><br><span class="line">b *0x7c00</span><br><span class="line">continue</span><br><span class="line">x /2i $pc</span><br></pre></td></tr></table></figure><blockquote><p>说明:</p><ul><li>lab1init中是gdb能识别的一些命令</li><li>第一条指令: 加载bin/kernel</li><li>第二条指令: 与qemu通过TRP连接</li><li>最后一条指令打印指令指针寄存器(pc/eip)的内容(当前正在执行的指令的地址)</li></ul></blockquote><h1 id="计算机启动流程-从计算机上电到进入ucore"><a href="#计算机启动流程-从计算机上电到进入ucore" class="headerlink" title="计算机启动流程(从计算机上电到进入ucore)"></a>计算机启动流程(从计算机上电到进入ucore)</h1><ol><li><p>计算机上电, 运行第一条长跳转指令(CS和EIP都会更新)到BIOS代码中执行</p></li><li><p>BIOS执行其功能, 同时加载存储设备的第一个扇区的512字节到内存的0x7c00处, 然后跳转到这里开始执行</p></li><li><p>bootloader关闭中断, 清除方向标志, 确保内存地址由小到大增加</p></li><li><p>ds, es, ss 段寄存器置零</p></li><li><p>准备开启A20, 首先等待8042键盘控制器不忙(检查0x64端口或P2端口), 写入0xd1; 再次等待不忙, 写入0xdf到0x60端口; 由此完成了打开A20的操作</p></li><li><p>初始化gdt表, gdt表在这512个字节中的24个字节, 一共3个表项</p></li><li><p>将cr0就寄存器PE位(即最低位)置1, 从而进入保护模式</p></li><li><p>通过一个长跳转(段间跳转), 更新cs的基地址, 同时进入32位保护模式的代码部分</p></li><li><p>将保护模式下的数据段选择子, 放入ds, es, fs, gs, ss 段寄存器</p></li><li><p>设置ebp和esp寄存器初值</p></li><li><p>进入bootmain函数(进入c代码部分)</p></li><li><p>读取存储设备的八个扇区(8个512字节), 到内存中, 读取elf文件的头部</p></li><li><p>检查elf头部的幻数, 验证elf文件是否合法</p></li><li><p>读取elf头部的描述表(描述了elf文件应加载到内存什么位置)</p></li><li><p>按照描述表将elf文件中数据载入内存</p></li><li><p>根据elf头部存储的入口信息, 找到内核入口, 并进入</p></li></ol><h1 id="BIOS的向后兼容"><a href="#BIOS的向后兼容" class="headerlink" title="BIOS的向后兼容"></a>BIOS的向后兼容</h1><blockquote><p>Intel的CPU具有很好的向后兼容性。在16位的8086 CPU时代，内存限制在1MB范围内，且BIOS的代码固化在EPROM中。在基于Intel的8086 CPU的PC机中的EPROM被编址在1ＭB内存地址空间的最高64KB中。PC加电后，CS寄存器初始化为0xF000，IP寄存器初始化为0xFFF0，所以CPU要执行的第一条指令的地址为CS:IP=0xF000:0XFFF0（Segment:Offset 表示）=0xFFFF0（Linear表示）。这个地址位于被固化EPROM中，指令是一个长跳转指令JMP F000:E05B。这样就开启了BIOS的执行过程。</p></blockquote><blockquote><p>到了32位的80386 CPU时代，内存空间扩大到了4G，多了段机制和页机制，但Intel依然很好地保证了80386向后兼容8086。地址空间的变化导致无法直接采用8086的启动约定。如果把BIOS启动固件编址在0xF000起始的64KB内存地址空间内，就会把整个物理内存地址空间隔离成不连续的两段，一段是0xF000以前的地址，一段是1MB以后的地址，这很不协调。为此，intel采用了一个折中的方案：默认将执行BIOS ROM编址在32位内存地址空间的最高端，即位于4GB地址的最后一个64KB内。在PC系统开机复位时，CPU进入实模式，并将CS寄存器设置成0xF000，将它的shadow register的Base值初始化设置为0xFFFF0000，EIP寄存器初始化设置为0x0000FFF0。所以机器执行的第一条指令的物理地址是0xFFFFFFF0。80386的BIOS代码也要和以前8086的BIOS代码兼容，故地址0xFFFFFFF0处的指令还是一条长跳转指令<code>jmp F000:E05B</code>。注意，这个长跳转指令会触发更新CS寄存器和它的shadow register，即执行<code>jmp F000 : E05B</code>后，CS将被更新成0xF000。表面上看CS其实没有变化，但CS的shadow register被更新为另外一个值了，它的Base域被更新成0x000F0000，此时形成的物理地址为Base+EIP=0x000FE05B，这就是CPU执行的第二条指令的地址。此时这条指令的地址已经是1M以内了，且此地址不再位于BIOS ROM中，而是位于RAM空间中。由于Intel设计了一种映射机制，将内存高端的BIOS ROM映射到1MB以内的RAM空间里，并且可以使这一段被映射的RAM空间具有与ROM类似的只读属性。所以PC机启动时将开启这种映射机制，让4GB地址空间的最高一个64KB的内容等同于1MB地址空间的最高一个64K的内容，从而使得执行了长跳转指令后，其实是回到了早期的8086 CPU初始化控制流，保证了向下兼容。</p></blockquote><h2 id="BIOS中A20的设置"><a href="#BIOS中A20的设置" class="headerlink" title="BIOS中A20的设置"></a>BIOS中A20的设置</h2><p>参考<a href="https://zhidao.baidu.com/question/24524472.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/24524472.html</a></p><h2 id="如果在保护模式下不启用A20"><a href="#如果在保护模式下不启用A20" class="headerlink" title="如果在保护模式下不启用A20"></a>如果在保护模式下不启用A20</h2><p>参考<a href="https://www.zhihu.com/question/29375534" target="_blank" rel="noopener">https://www.zhihu.com/question/29375534</a></p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ipv6网络相关</title>
      <link href="/2019/06/06/ipv6%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/"/>
      <url>/2019/06/06/ipv6%E7%BD%91%E7%BB%9C%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="ipv6网络影响因素"><a href="#ipv6网络影响因素" class="headerlink" title="ipv6网络影响因素"></a>ipv6网络影响因素</h1><ol><li>操作系统配置(windows, deepin, …)</li></ol><a id="more"></a><ol start="2"><li><p>接入网(DLUT, DLUT-EDA无线, DLUT-EDA有线, OurEDA需要认证, OurEDA无需认证, 移动, 联通, …)</p></li><li><p>连接方式(直连, 代理)</p></li><li><p>网站(国内, 国外)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GCC内联汇编笔记</title>
      <link href="/2019/05/28/GCC%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/28/GCC%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是内联汇编"><a href="#什么是内联汇编" class="headerlink" title="什么是内联汇编?"></a>什么是内联汇编?</h1><blockquote><p>内联函数<br>我们可以要求编译器将一个函数的代码插入到调用者的代码中函数实际调用的地方</p></blockquote><a id="more"></a><blockquote><p>inline(内联)的作用<br>减少函数调用开销, 同时如果所有实参的值为常量, 它们的已知值可以再编译期允许简化, 因此并非所有的内联函数代码都需要被包含进去, 代码大小的影响是不可预测的, 这取决于特定的情况</p></blockquote><blockquote><p>内联汇编<br>写为内联函数的汇编程序<br>可以操作并且使其输出通过通过C变量显示出来, 因此<code>asm</code>可作为汇编指令和包含它的C程序之间的接口</p></blockquote><h1 id="源操作数和目的操作数顺序"><a href="#源操作数和目的操作数顺序" class="headerlink" title="源操作数和目的操作数顺序"></a>源操作数和目的操作数顺序</h1><p>Op-code src dst (Intel语法相反)</p><h1 id="寄存器命名"><a href="#寄存器命名" class="headerlink" title="寄存器命名"></a>寄存器命名</h1><p>%eax</p><h1 id="立即数"><a href="#立即数" class="headerlink" title="立即数"></a>立即数</h1><p>$0xFFFF</p><h1 id="操作数大小"><a href="#操作数大小" class="headerlink" title="操作数大小"></a>操作数大小</h1><p>取决于操作码名字的最后一个字符</p><table><thead><tr><th style="text-align:center">AT&amp;T</th><th style="text-align:center">b</th><th style="text-align:center">w</th><th style="text-align:center">l</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">字节</td><td style="text-align:center">字</td><td style="text-align:center">长型</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">8</td><td style="text-align:center">16</td><td style="text-align:center">32</td></tr><tr><td style="text-align:center">Intel</td><td style="text-align:center">byte</td><td style="text-align:center">word</td><td style="text-align:center">dword</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">ptr</td><td style="text-align:center">ptr</td><td style="text-align:center">ptr</td></tr></tbody></table><table><thead><tr><th style="text-align:center">AT&amp;T</th><th style="text-align:center">movb foo, %al</th></tr></thead><tbody><tr><td style="text-align:center">Intel</td><td style="text-align:center">mov al, byte ptr foo</td></tr></tbody></table><h1 id="存储器操作数"><a href="#存储器操作数" class="headerlink" title="存储器操作数"></a>存储器操作数</h1><table><thead><tr><th style="text-align:center">AT&amp;T</th><th style="text-align:center">section:disp(base, index, scale)</th></tr></thead><tbody><tr><td style="text-align:center">Intel</td><td style="text-align:center">section:[base + index*scale + disp]</td></tr></tbody></table><p>注意: 当一个常量用于disp或scale, 不能添加<code>$</code>前缀</p><blockquote><p>base: 基址寄存器 ebx<br>index: 索引(寄存器)<br>scale: 比例(数值)<br>disp: 位移(数值)</p></blockquote><h1 id="基本内联"><a href="#基本内联" class="headerlink" title="基本内联"></a>基本内联</h1><blockquote><p>asm(“汇编代码”); 或者 <strong>asm</strong>(“汇编代码”);<br>采用后者的原因: asm和标识符冲突时, 或是为了与ANSI C兼容</p></blockquote><blockquote><p>指令多于一条</p><ul><li>每个一行</li><li>用双引号圈起</li><li>每条指令添加后缀<code>\n\t</code><blockquote><ul><li>gcc将每一条当做字符串发送给as(GAS, GNU汇编器), 并且通过使用<code>\n\t</code>发送正确格式化后的行给汇编器</li></ul></blockquote></li></ul></blockquote><p>e.g.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__asm__(<span class="string">"movl %eax, %ebx\n\t"</span></span><br><span class="line"><span class="string">"movl $56, %esi\n\t"</span></span><br><span class="line"><span class="string">"movl %ecx, $label(%edx, %ebx, $4)\n\t"</span></span><br><span class="line"><span class="string">"movb %ah, (%ebx)"</span>);</span><br></pre></td></tr></table></figure><h1 id="扩展汇编"><a href="#扩展汇编" class="headerlink" title="扩展汇编"></a>扩展汇编</h1><h2 id="为什么需要扩展汇编"><a href="#为什么需要扩展汇编" class="headerlink" title="为什么需要扩展汇编?"></a>为什么需要扩展汇编?</h2><blockquote><p>如果在代码中, 我们涉及到一些寄存器(即改变其内容), 但在没有恢复这些变化的情况下从汇编中返回, 将会导致一些意想不到的事情.<br>这是因为GCC并不知道寄存器内容的变化, 这会导致问题, 特别是当编译器做了某些优化.<br>在没有告知GCC的情况下, 他将会假设一些寄存器存储了一些值, 而我们可能已经改变却没有告知GCC, 它会像什么事都没发生一样(GCC不会假设寄存器装入的值是有效的, 当退出改变了寄存器值的内联汇编后, 寄存器的值不会保存到相应的变量或内存空间)继续运行.<br>我们可以做的是, 使用那些没有副作用的指令, 或者当我们退出时恢复这些寄存器, 要不就等着程序崩溃.<br>这就是为什么我们需要一些扩展功能, 扩展汇编给我们提供了那些功能.</p></blockquote><h2 id="扩展汇编的使用"><a href="#扩展汇编的使用" class="headerlink" title="扩展汇编的使用"></a>扩展汇编的使用</h2><blockquote><p>扩展汇编中, 我们可以同时指定操作数.<br>它允许我们指定输入寄存器, 输出寄存器以及修饰寄存器列表.<br>GCC不强制用户必须指定使用的寄存器.<br>我们可以把头疼的事留给GCC, 这可能可以更好地适应GCC的优化.</p></blockquote><p>结构:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">asm</span>(汇编语句</span><br><span class="line">:输出操作数<span class="comment">/*可选的*/</span></span><br><span class="line">:输入操作数<span class="comment">/*可选的*/</span></span><br><span class="line">:修饰寄存器列表<span class="comment">/*可选的*/</span>);</span><br></pre></td></tr></table></figure><blockquote><p>每一个操作数由一个操作数字符串所描述, 其后紧接一个括弧括起的C表达式.<br>逗号用于分离每一个组内的操作数.<br>总操作数的数目限制在10个, 或者机器描述中的任何指令格式中的最大操作数数目, 以较大者为准.<br>如果没有输出操作数但存在输入操作数, 你必须将两个连续的冒号放置于输出操作数原本会放置的地方周围.</p></blockquote><p>e.g.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用汇编指令使b变量的值等于a变量的值</span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>, b;</span><br><span class="line"><span class="keyword">asm</span>(<span class="string">"movl %1, %%eax;</span></span><br><span class="line"><span class="string">movl %%eax, %0;"</span></span><br><span class="line">:<span class="string">"=r"</span>(b)<span class="comment">/*输出*/</span></span><br><span class="line">:<span class="string">"r"</span>(a)<span class="comment">/*输入*/</span></span><br><span class="line">:<span class="string">"%eax"</span>);<span class="comment">/*修饰寄存器*/</span></span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><ol><li><code>b</code>为输出操作数, 用<code>%0</code>引用; <code>a</code>为输入操作数, 用<code>%1</code>引用</li><li><code>r</code>为操作数约束, <code>r</code>告诉GCC可以使用任意寄存器存储操作数; 输出操作数应该有一个约束修饰符<code>=</code>, 表明它是一个只写的输出操作数.</li><li>寄存器名字以<code>%%</code>为前缀, 这有利于GCC区分操作数和寄存器, 操作数以<code>%</code>为前缀; 第三个冒号之后的修饰寄存器<code>%eax</code>用于告诉GCC<code>%eax</code>的值将会在asm内部被修改, 所以GCC将不会使用此寄存器存储任何其他值.</li><li>当asm执行完毕, b变量会映射到更新的值, 因为它被指定为输出操作数; 换句话说asm内b变量的修改应该会被映射到asm外部.</li></ol></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p>约束字符串主要用于决定操作数的寻址方式, 同时也用于指定使用的寄存器.</p></blockquote><blockquote><p>输出操作数表达式必须为左值.<br>输入操作数的要求不像这样严格.<br>他们可以为表达式.<br>扩展汇编特性常常用于编译器所不知道的机器指令.<br>如果输出表达式无法直接寻址(即, 它是一个位域), 我们的约束字符串必须给定一个寄存器.<br>在这种情况下, GCC将会使用该寄存器作为汇编的输出, 然后存储该寄存器的内容到输出.</p></blockquote><blockquote><p>普通的输出操作数必须为只写的.<br>GCC将会假设指令前的操作数值是死的, 并且不需要被(提前)生成.<br>扩展汇编也支持输入-输出或者读-写操作数.</p></blockquote><blockquote><p>如果我们的指令可以修改条件码寄存器(cc), 我们必须将<code>cc</code>添加进修饰寄存器列表.<br>如果我们的指令, 以不可预测的方式修改了内存, 那么需要将<code>memory</code>添加进修饰寄存器列表.<br>这可以使GCC不会在汇编指令间保持缓存于寄存器的内存值.<br>如果被影响的内存不在汇编的输入或输出列表中, 我们也必须添加<code>volatile</code>关键字.</p></blockquote><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><blockquote><p>如果我们的汇编语句必须在我们放置它的地方执行(如不能为了优化而被移出循环语句), 将关键词<code>volatile</code>放置在<code>asm</code>后面, <code>()</code>前面.<br>以防止它被移动, 删除或者其他操作, 我们将其声明为<code>asm volatile(... :... :... :...);</code><br>如果担心发生冲突, 请使用<code>__volatile__</code>.</p></blockquote><blockquote><p>如果我们的汇编只是用于一些计算并且没有任何副作用, 不使用<code>volatile</code>关键词会更好.<br>不使用<code>volatile</code>可以帮助gcc优化代码并使代码更漂亮.</p></blockquote><h2 id="常用约束"><a href="#常用约束" class="headerlink" title="常用约束"></a>常用约束</h2><h3 id="寄存器操作数约束"><a href="#寄存器操作数约束" class="headerlink" title="寄存器操作数约束"></a>寄存器操作数约束</h3><p>GPR(General Purpose Register, 通用寄存器)</p><p>要指定寄存器, 你必须使用特定寄存器约束直接地指定寄存器的名字, 它们为:</p><table><thead><tr><th style="text-align:center">r</th><th style="text-align:center">Register(s)</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">%eax, %ax, %al</td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">%ebx, %bx, %bl</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">%ecx, %cx, %cl</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">%edx, %dx, %dl</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">%esi, %si</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">%edi, %di</td></tr></tbody></table><h3 id="内存操作数约束"><a href="#内存操作数约束" class="headerlink" title="内存操作数约束"></a>内存操作数约束</h3><blockquote><p>当操作数位于内存时, 任何对它们的操作将直接发生在内存位置, 这与寄存器约束相反, 后者首先将值存储在要修改的寄存器中, 然后将它写回内存位置.<br>但寄存器约束通常用于一个指令必须使用它们或者它们可以大大提高处理速度的地方.<br>当需要在<code>asm</code>内更新一个C变量, 而又不是使用寄存器去保存它的值, 使用内存最为有效.</p></blockquote><p>e.g.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IDTR寄存器的值存储于内存位置loc处</span></span><br><span class="line"><span class="keyword">asm</span>(<span class="string">"sidt %0\n"</span>::<span class="string">"m"</span>(loc));</span><br></pre></td></tr></table></figure><p>注意: 每条指令应以分界符结尾, 有效的分界符有换行符<code>\n</code>和分号<code>;</code>, <code>\n</code>可以紧随一个制表符<code>\t</code>.</p><h3 id="匹配-数字-约束"><a href="#匹配-数字-约束" class="headerlink" title="匹配(数字)约束"></a>匹配(数字)约束</h3><blockquote><p>在某些情况下, 一个变量可能既充当输入操作数, 也充当输出操作数.<br>可以通过使用匹配约束在<code>asm</code>中指定这种情况.</p></blockquote><p>e.g.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">asm</span>(<span class="string">"incl %0"</span> :<span class="string">"=a"</span>(var) :<span class="string">"0"</span>(var));</span><br></pre></td></tr></table></figure><blockquote><p>说明:<br>寄存器<code>%eax</code>既用作输入变量, 也用作输出变量.<br>var输入被读进<code>%eax</code>, 并且等递增后更新的<code>%eax</code>再次被存储进var.<br>这里的<code>0</code>用于指定与第0个输出变量相同的约束.<br>它指定var输出示例应只被存储在<code>%eax</code>中.<br>该约束可用于:</p><blockquote><ul><li>在输入从变量读取或变量修改后且修改被写回同一变量的情况</li><li>在不需要将输入操作数实例和输出操作数实例分开的情况</li></ul></blockquote><p>使用匹配约束最重要的意义在于它们可以有效地使用可用寄存器.</p></blockquote><h3 id="其他一些约束"><a href="#其他一些约束" class="headerlink" title="其他一些约束"></a>其他一些约束</h3><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>m</td><td>允许一个内存操作数, 可以使用机器普遍支持的任一种地址</td></tr><tr><td>o</td><td>允许一个内存操作数, 但只有当地址是可偏移的; 即, 该地址加上一个小的偏移量可以得到一个有效地址</td></tr><tr><td>V</td><td>一个不允许偏移的内存操作数; 换言之, 任何适合<code>m</code>约束而不适合<code>o</code>约束的操作数</td></tr><tr><td>i</td><td>允许一个(带有常量)的立即整型操作数; 这包括其值仅在汇编时期知道的符号常量</td></tr><tr><td>n</td><td>允许一个带有已知数字的立即整型操作数; 许多系统不支持汇编时期的常量, 因为操作数少于一个字宽; 对于此种操作数, 约束应该使用<code>n</code>而不是<code>i</code></td></tr><tr><td>g</td><td>允许任一寄存器, 内存或者立即整型操作数, 不包括通用寄存器之外的寄存器</td></tr></tbody></table><h3 id="x86特有约束"><a href="#x86特有约束" class="headerlink" title="x86特有约束"></a>x86特有约束</h3><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>寄存器操作数约束, 查看上面的给定的表格</td></tr><tr><td>q</td><td>寄存器<code>a</code>, <code>b</code>, <code>c</code>, 或者<code>d</code></td></tr><tr><td>l</td><td>范围从0到31的常量(对于32位移位)</td></tr><tr><td>J</td><td>范围从0到63的常量(对于64位移位)</td></tr><tr><td>K</td><td>0xff</td></tr><tr><td>L</td><td>0xffff</td></tr><tr><td>M</td><td>0, 1, 2 或 3(lea指令的移位)</td></tr><tr><td>N</td><td>范围从0到255的常量(对于out指令)</td></tr><tr><td>f</td><td>浮点寄存器</td></tr><tr><td>t</td><td>第一个(栈顶)浮点寄存器</td></tr><tr><td>u</td><td>第二个浮点寄存器</td></tr><tr><td>A</td><td>指定<code>a</code>或<code>d</code>寄存器; 这主要用于想要返回64位整型数, 使用<code>d</code>寄存器保存最高有效位和<code>a</code>寄存器保存最低有效位</td></tr></tbody></table><h2 id="约束修饰符"><a href="#约束修饰符" class="headerlink" title="约束修饰符"></a>约束修饰符</h2><p>当使用约束时, 对于更精确的控制超过了对约束作用的需求, GCC给我们提供了约束修饰符.</p><table><thead><tr><th>约束修饰符</th><th>I/O</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>O</td><td>对于这条指令, 操作数为只写的; 旧值会被忽略并被输出数据所替换; 只能写在第一个字符的位置</td></tr><tr><td>&amp;</td><td>O</td><td>用符号&amp;进行修饰时,等于向GCC声明, “GCC不得为任何Input操作表达式分配与此Output操作表达式相同的寄存器”; 其原因是修饰符&amp;意味着被其修饰的Output操作表达式要在所有的Input操作表达式被输入之前输出; 即, GCC会先使用输出值对被修饰符&amp;修饰的Output操作表达式进行填充,然后,才对Input操作表达式进行输入; 这样的话,如果不使用修饰符&amp;对Output操作表达式进行修饰,一旦后面的Input操作表达式使用了与Output操作表达式相同的寄存器,就会产生输入输出数据混乱的情况; 相反,如果用修饰符&amp;修饰输出操作表达式, 那么, 就意味着GCC会先把Input操作表达式的值输入到选定的寄存器中,然后经过处理,最后才用输出值填充对应的Output操作表达式; 只能写在第二个字符的位置; 参考自<a href="https://blog.csdn.net/koozxcv/article/details/49612791" target="_blank" rel="noopener">https://blog.csdn.net/koozxcv/article/details/49612791</a></td></tr><tr><td>+</td><td>O</td><td>对于这条指令, 操作数为可读可写的; 只能写在第一个字符的位置</td></tr><tr><td>%</td><td>I</td><td>表示此Input操作表达式中的C/C++表达式可以与下一个Input操作表达式中的C/C++表达式互换</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>teamviewer安装问题</title>
      <link href="/2019/05/24/teamviewer%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/"/>
      <url>/2019/05/24/teamviewer%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派安装teamviewer"><a href="#树莓派安装teamviewer" class="headerlink" title="树莓派安装teamviewer"></a>树莓派安装teamviewer</h1><a id="more"></a><blockquote><p>ID不是邮件中发送的, 而是命令<code>teamviewer info</code>中的ID</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL必知必会笔记</title>
      <link href="/2019/05/19/MYSQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/05/19/MYSQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="了解SQL"><a href="#了解SQL" class="headerlink" title="了解SQL"></a>了解SQL</h1><blockquote><p>数据库<br>保存有组织的数据的容器(通常是一个文件或一组文件)</p></blockquote><a id="more"></a><blockquote><p>表<br>某种特定类型数据的结构化清单</p></blockquote><blockquote><p>模式<br>关于数据库和表的布局及特性的信息</p></blockquote><blockquote><p>列<br>表中的每个字段. 所有表都是由一个或多个列组成的.</p></blockquote><blockquote><p>数据类型<br>所容许的数据的类型. 每个表列都有相应的数据类型, 它限制(或容许)该列中存储的数据.</p></blockquote><blockquote><p>行<br>表中的一个记录</p></blockquote><blockquote><p>主键<br>一列(或一组列), 其值能能够唯一区分表中每个行</p></blockquote><blockquote><p>关键字<br>作为MySQL语言组成部分的一个保留字. 绝不要用关键字命名一个表或列.</p></blockquote><p>注: 括号中为替换内容</p><blockquote><p>打开数据库<br>USE {database};</p></blockquote><blockquote><p>显示可用数据库<br>SHOW DATABASES;</p></blockquote><blockquote><p>显示一个数据库内的表<br>SHOW TABLES;</p></blockquote><blockquote><p>显示表列<br>SHOW COLUMNS FROM {table};<br>或<br>DESCRIBE {table};</p></blockquote><blockquote><p>自动增量(auto_increment)<br>某些表列需要唯一值; mysql可以自动地为每个行分配下一个可用编号, 不用在添加一行时手动分配唯一值</p></blockquote><blockquote><p>显示广泛的服务器状态信息<br>SHOW STATUS;</p></blockquote><blockquote><p>显示创建特定数据库或表的mysql语句<br>SHOW CREATE DATABASE<br>或<br>SHOW CREATE TABLE</p></blockquote><blockquote><p>显示授予用户<br>SHOW GRANTS</p></blockquote><blockquote><p>显示服务器错误或警告信息<br>SHOW ERRORS<br>或<br>SHOW WARNINGS</p></blockquote><blockquote><p>获得和过滤模式信息<br>INFORMATION_SCHEMA</p></blockquote><p>注: 样例表为一个想象的随身物品推销商使用的订单录入系统, 往后的脚本中, 大写为关键字, 小写为内容.</p><blockquote><p>使用全文搜索的表, 必须指定<br>ENGINE=MyISAM</p></blockquote><p>注: 取消笔记, 直接参照书</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><blockquote><p><em>mysql必知必会</em> 这本书的触发器部分有错误, 估计是版本原因, 故后面的内容采用 <em>深入浅出mysql</em> 这本书</p></blockquote><blockquote><p>子查询中的每个表都要有别名</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ctags中文注释错误</title>
      <link href="/2019/05/16/ctags%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A%E9%94%99%E8%AF%AF/"/>
      <url>/2019/05/16/ctags%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="ctags-代码与中文注释同行"><a href="#ctags-代码与中文注释同行" class="headerlink" title="ctags 代码与中文注释同行"></a>ctags 代码与中文注释同行</h1><a id="more"></a><p>会出现, 即使tag文件中有这个模式的匹配, 在vim中也无法找到对应的匹配的情况</p><p>建议, 中文注释与代码不要同行</p><h1 id="ctags-匹配到多个结果"><a href="#ctags-匹配到多个结果" class="headerlink" title="ctags 匹配到多个结果"></a>ctags 匹配到多个结果</h1><p>使用<code>:tn</code>显示下一个, <code>:tp</code>显示上一个</p><p>也可用映射, <code>;tl</code>显示下一个, <code>;th</code>显示上一个</p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim按下回车后大括号自动换行缩进</title>
      <link href="/2019/05/12/vim%E6%8C%89%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%A4%A7%E6%8B%AC%E5%8F%B7%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%E7%BC%A9%E8%BF%9B/"/>
      <url>/2019/05/12/vim%E6%8C%89%E4%B8%8B%E5%9B%9E%E8%BD%A6%E5%90%8E%E5%A4%A7%E6%8B%AC%E5%8F%B7%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%E7%BC%A9%E8%BF%9B/</url>
      
        <content type="html"><![CDATA[<p>问题描述: 在一对大括号之间回车，自动分为3行并调整缩进</p><a id="more"></a><p>代码:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" 大括号自动分行, C/C++下的自动命令</span></span><br><span class="line"><span class="keyword">autocmd</span> BufWritePre,BufRead *.<span class="keyword">c</span> :<span class="keyword">inoremap</span> <span class="symbol">&lt;Enter&gt;</span> <span class="symbol">&lt;c-r&gt;</span>=BracketsEnter(<span class="string">'&#125;'</span>)<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">autocmd</span> BufWritePre,BufRead *.cpp :<span class="keyword">inoremap</span> <span class="symbol">&lt;Enter&gt;</span> <span class="symbol">&lt;c-r&gt;</span>=BracketsEnter(<span class="string">'&#125;'</span>)<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BracketsEnter</span><span class="params">(char)</span></span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">getline</span>(<span class="string">'.'</span>)[<span class="keyword">col</span>(<span class="string">'.'</span>)-<span class="number">1</span>] == <span class="variable">a:char</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"\&lt;Enter&gt;\&lt;Tab&gt;\&lt;Esc&gt;mpa\&lt;Enter&gt;\&lt;Esc&gt;`pa"</span> </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"\&lt;Enter&gt;"</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endf</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Deepin搜狗拼音输入法故障</title>
      <link href="/2019/05/10/Deepin%E6%90%9C%E7%8B%97%E6%8B%BC%E9%9F%B3%E8%BC%B8%E5%85%A5%E6%B3%95%E6%95%85%E9%9A%9C/"/>
      <url>/2019/05/10/Deepin%E6%90%9C%E7%8B%97%E6%8B%BC%E9%9F%B3%E8%BC%B8%E5%85%A5%E6%B3%95%E6%95%85%E9%9A%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Deepin搜狗拼音输入法故障"><a href="#Deepin搜狗拼音输入法故障" class="headerlink" title="Deepin搜狗拼音输入法故障"></a>Deepin搜狗拼音输入法故障</h1><a id="more"></a><blockquote><p>搜狗拼音输入法出错<br>解决方法: <code>rm -rf ~/.config/SogouPY</code>, 重启电脑</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注意事项</title>
      <link href="/2019/05/09/SQL%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2019/05/09/SQL%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>mysql错误1215：无法添加外键<br>可参考<a href="https://blog.csdn.net/wangpeng047/article/details/19624351" target="_blank" rel="noopener">https://blog.csdn.net/wangpeng047/article/details/19624351</a><br>我的原因：添加外键时，<code>references</code>后面的被参照关系同样要指定主键</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Deepin下安装MySQL（APT Repository）</title>
      <link href="/2019/05/08/Deepin%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/"/>
      <url>/2019/05/08/Deepin%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/</url>
      
        <content type="html"><![CDATA[<p>本文参考自<a href="https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/" target="_blank" rel="noopener">官方文档</a></p><h1 id="添加APT库"><a href="#添加APT库" class="headerlink" title="添加APT库"></a>添加APT库</h1><ol><li>下载APT库</li></ol><a id="more"></a><p>在<a href="https://dev.mysql.com/downloads/repo/apt/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/apt/</a>处下载deb包</p><ol start="2"><li><p>执行<code>sudo dpkg -i &lt;PATH&gt;</code>，<code>&lt;PATH&gt;</code>    为刚下载的包的地址</p></li><li><p>由于这个库是为Debian和Ubuntu准备的，在检测到系统不符时，会让你选择系统，选择<code>Ubuntu Trusty</code>就可以（亲测）</p></li><li><p>然后其他默认即可，也可以修改安装的版本</p></li><li><p>执行<code>sudo apt-get update</code>，这一步是必须的</p></li></ol><h1 id="使用APT安装MySQL"><a href="#使用APT安装MySQL" class="headerlink" title="使用APT安装MySQL"></a>使用APT安装MySQL</h1><p><code>sudo apt-get install mysql-server</code>，server和client以及数据库公共文件都会被安装</p><h1 id="启用和终止MySQL-Server"><a href="#启用和终止MySQL-Server" class="headerlink" title="启用和终止MySQL Server"></a>启用和终止MySQL Server</h1><p>查看server状态（安装后会自动启动），<code>sudo service mysql status</code></p><p>终止server，<code>sudo service mysql stop</code></p><p>重启server，<code>sudo service mysql start</code></p><h1 id="使用APT卸载mysql"><a href="#使用APT卸载mysql" class="headerlink" title="使用APT卸载mysql"></a>使用APT卸载mysql</h1><ol><li><p><code>sudo apt-get remove mysql-server</code></p></li><li><p><code>sudo apt-get autoremove</code></p></li><li><p>卸载其他组件, <code>sudo apt-get remove &lt;package-name&gt;</code></p></li><li><p>列出从mysql apt库安装的包, <code>dpkg -l | grep mysql | grep ii</code></p></li></ol><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><ol><li>错误1</li></ol><ul><li><p>ERROR 2003 (HY000): Can’t connect to MySQL server on ‘127.0.0.1’ (111)</p></li><li><p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’ (2)</p></li><li><p>在正常的mysql下, 当server正常启动时, 才会创建<code>mysqld/mysqld.sock</code></p></li><li><p>参考<a href="https://blog.csdn.net/weixin_39543992/article/details/78105383" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39543992/article/details/78105383</a>, 安装MariaDB</p></li><li><p>出现root用户连接被拒(密码正确)</p></li><li><p>尝试卸载重装mysql</p></li><li><p>出现错误, ERROR 1524 (HY000): Plugin ‘unix_socket’ is not loaded</p></li><li><p>参考<a href="https://unix.stackexchange.com/questions/420530/error-1524-hy000-plugin-unix-socket-is-not-loaded-mysql" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/420530/error-1524-hy000-plugin-unix-socket-is-not-loaded-mysql</a>, 彻底错误, 卸载mysql和mariadb-server</p></li><li><p>放弃apt安装的方法, 采用其他方法</p></li></ul><ol start="2"><li>错误2</li></ol><ul><li><p>Failed to start mysql.service: Unit mysql.service is masked.</p></li><li><p>解决方法, <code>sudo systemctl unmask mysql.service</code></p></li><li><p>ERROR 1045 (28000): Access denied for user ‘didong‘@’localhost’ (using password: NO)</p></li><li><p>解决方法, 添加 sudo</p></li><li><p>ERROR 1524 (HY000): Plugin ‘unix_socket’ is not loaded</p></li><li><p>参考<a href="ERROR 1524 (HY000">ERROR 1524 (HY000): Plugin ‘unix_socket’ is not loaded</a>: Plugin ‘unix_socket’ is not loaded), 解决</p></li><li><p>期间遇到<code>mysql.USER</code>找不到的问题, 其原因是应使用<code>user</code>(小写)</p></li><li><p>成功安装解决</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>通过这一次的安装mysql(其实第一次很顺利地安装成功了, 通过apt库的形式, 但是后来貌似由于没关mysql服务器关机重启, 导致了错误1的出现), 重装软件或者换另外一种方式重装或许是一种解决方法, 但是另一方面, 在原有的安装的基础上, 通过解决一个个错误来完成, 或许是一种更好的方法, 当重装无用, 或不方便的时候, 况且还能积累经验, 增强以后解决类似问题的能力. 还要注意一些细节问题, 这往往可以让你少花许多时间, 解决问题的时候一定不要情绪烦躁, 而要冷静.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vimscript笔记——0——单行命令</title>
      <link href="/2019/05/06/vimscript%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%940%E2%80%94%E2%80%94%E5%8D%95%E8%A1%8C%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/05/06/vimscript%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%940%E2%80%94%E2%80%94%E5%8D%95%E8%A1%8C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><p><code>:echo $MYVIMRC</code>得知<code>.vimrc</code>文件的位置</p><a id="more"></a><h1 id="打印信息"><a href="#打印信息" class="headerlink" title="打印信息"></a>打印信息</h1><p><code>:echo &quot;Hello, world!</code>，信息不会保存</p><p><code>:echom &quot;Hello, world!</code>，信息会保存</p><p><code>:messages</code>，查看信息</p><h1 id="设置选项"><a href="#设置选项" class="headerlink" title="设置选项"></a>设置选项</h1><p><code>:set &lt;name&gt;</code>，打开选项</p><p><code>:set no&lt;name&gt;</code>，关闭选项</p><p><code>:set &lt;name&gt;!</code>，切换选项</p><p><code>:set &lt;name&gt;?</code>，查看选项当前值</p><p><code>:set &lt;name&gt;=&lt;value&gt;</code>，改变非布尔选项的选项值</p><p><code>:set &lt;name&gt; no&lt;name&gt; &lt;name&gt;=&lt;value&gt; ...</code>，设置多个选项的值</p><h1 id="基本映射"><a href="#基本映射" class="headerlink" title="基本映射"></a>基本映射</h1><p><code>:map 映射命令 原命令</code></p><p><code>&lt;keyname&gt;</code>可用于特殊字符（按键）</p><h1 id="模式映射"><a href="#模式映射" class="headerlink" title="模式映射"></a>模式映射</h1><p><code>nmap</code>，normal模式下有效</p><p><code>vmap</code>，visual模式下有效</p><p><code>imap</code>，insert模式下有效</p><h1 id="精确映射"><a href="#精确映射" class="headerlink" title="精确映射"></a>精确映射</h1><p>非递归映射，任何时候使用</p><p><code>noremap</code>，任何模式下有效</p><p><code>nnoremap</code>，normal模式下有效</p><p><code>vnoremap</code>，visual模式下有效</p><p><code>inoremap</code>，insert模式下有效</p><h1 id="Leaders"><a href="#Leaders" class="headerlink" title="Leaders"></a>Leaders</h1><p><code>let mapleader = &quot;;&quot;</code>，Leader</p><p><code>:let maplocalleader = &quot;,&quot;</code>，Local Leader</p><h1 id="Abreviations"><a href="#Abreviations" class="headerlink" title="Abreviations"></a>Abreviations</h1><p>用于insert、replace和command模式下</p><p><code>iabbrev 输入字符 输出字符</code></p><p>Keyword Characters，输入非字母、数字、下划线的字符就会引发abbreviations替换</p><h1 id="本地缓冲区的选项设置和映射"><a href="#本地缓冲区的选项设置和映射" class="headerlink" title="本地缓冲区的选项设置和映射"></a>本地缓冲区的选项设置和映射</h1><p>映射，e.g. <code>:nnoremap &lt;buffer&gt; &lt;localleader&gt;x dd</code></p><p>设置，<code>:setlocal &lt;name&gt;</code> <code>:setlocal no&lt;name&gt;</code></p><p>遮盖，本地缓冲区的映射会遮盖全局的映射</p><h1 id="自动命令"><a href="#自动命令" class="headerlink" title="自动命令"></a>自动命令</h1><p><code>autocmd &lt;event0&gt;,&lt;event1&gt;,... &lt;pattern&gt; :&lt;command&gt;</code></p><p>FileType事件，e.g. <code>autocmd FileType python nnoremap &lt;buffer&gt; &lt;localleader&gt;c I#&lt;esc&gt;</code></p><h1 id="本地缓冲区缩写"><a href="#本地缓冲区缩写" class="headerlink" title="本地缓冲区缩写"></a>本地缓冲区缩写</h1><p><code>iabbrev &lt;buffer&gt; 输入字符 输出字符</code></p><h1 id="自动命令组"><a href="#自动命令组" class="headerlink" title="自动命令组"></a>自动命令组</h1><p>为防止<code>.vimrc</code>中的<code>autocmd ...</code>自动命令被重复加载，需要将其放置在自动命令组中，并在自动命令组开头加上清除命令：</p><p>e.g. </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">augroup</span> testgroup</span><br><span class="line">:autocmd!</span><br><span class="line">:<span class="keyword">autocmd</span> BufWrite * :<span class="keyword">echom</span> <span class="string">"Cats"</span></span><br><span class="line">:<span class="keyword">augroup</span> END</span><br></pre></td></tr></table></figure><h1 id="Operator-Pending映射"><a href="#Operator-Pending映射" class="headerlink" title="Operator-Pending映射"></a>Operator-Pending映射</h1><p>一个Operator（操作）就是一个命令，你可以在这个命令的后面输入一个Movement（移动）命令，然后Vim开始对文本执行前面的操作命令，这个操作命令会从你当前所在的位置开始执行，一直到这个移动命令会把你带到的位置结束。</p><p>常用Operator有<code>d</code>、<code>y</code>和<code>c</code>，e.g.</p><table><thead><tr><th>按键</th><th>操作</th><th>移动</th></tr></thead><tbody><tr><td>dw</td><td>删除</td><td>到下一个单词</td></tr><tr><td>ci(</td><td>修改</td><td>在括号内</td></tr><tr><td>yt,</td><td>复制</td><td>到到逗号</td></tr></tbody></table><p>Movement映射，<code>:onoremap 映射命令 原命令</code></p><blockquote><p> 下面两条规则可以让你可以很直观的以多种方式创建operator-pending映射：</p><ul><li>如果你的operator-pending映射以在可视模式下选中文本结束，Vim会操作这些文本。</li><li>否则，Vim会操作从光标的原始位置到一个新位置之间的文本。</li></ul></blockquote><p>e.g. <code>:onoremap ah :&lt;c-u&gt;execute &quot;normal! ?^==\\+\r:nohlsearch\rg_vk0&quot;&lt;cr&gt;</code></p><p><code>execute</code>用于替换字符串中的所有特殊字符串</p><p><code>normal!</code>用于执行后面的字符</p><h1 id="状态条"><a href="#状态条" class="headerlink" title="状态条"></a>状态条</h1><p>状态条中代码的通用格式：<code>%-0{minwid}.{maxwid}{item}</code>，除了<code>%</code>和<code>item</code>外其他都是可选的</p><p>分割，可以使用<code>+=</code>来一条一条地定义要显示的代码</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim方向键等功能按键和鼠标乱码解决</title>
      <link href="/2019/05/04/vim%E6%96%B9%E5%90%91%E9%94%AE%E7%AD%89%E5%8A%9F%E8%83%BD%E6%8C%89%E9%94%AE%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/05/04/vim%E6%96%B9%E5%90%91%E9%94%AE%E7%AD%89%E5%8A%9F%E8%83%BD%E6%8C%89%E9%94%AE%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>突然之间vim的方向键等功能按键和鼠标在insert模式下出现乱码，在搜索一段时间后，大部分采用<code>set compatible</code>的方案，而我的<code>.vimrc</code>文件中已经有这句话了，只好采用了不是特别完美的解决方案</p><a id="more"></a><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在<code>.vimrc</code>文件中添加如下代码：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">" 方向键乱码解决</span></span><br><span class="line"><span class="keyword">inoremap</span> OA <span class="symbol">&lt;UP&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> OB <span class="symbol">&lt;DOWN&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> OC <span class="symbol">&lt;RIGHT&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> OD <span class="symbol">&lt;LEFT&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 功能键乱码问题解决</span></span><br><span class="line"><span class="keyword">inoremap</span> [<span class="number">6</span>~ <span class="symbol">&lt;pagedown&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> [<span class="number">5</span>~ <span class="symbol">&lt;pageup&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> OH <span class="symbol">&lt;home&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> OF <span class="symbol">&lt;end&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> [<span class="number">3</span>~ <span class="symbol">&lt;del&gt;</span></span><br><span class="line"><span class="keyword">inoremap</span> [<span class="number">2</span>~ <span class="symbol">&lt;ins&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" 鼠标设置</span></span><br><span class="line"><span class="keyword">set</span> mouse=nvc</span><br></pre></td></tr></table></figure><h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><blockquote><p>由于是采用映射的方法，所以会存在，在insert模式下按下被映射的字符时，如果速度过快，对应的字符不会输出而会转换为对应的命令，但是由于这些字符其中有些输入的可能性很小，所以问题不是很大</p></blockquote><blockquote><p>鼠标将insert模式下的功能禁用了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记——1——操作系统概述_操作系统实验环境准备_启动_中断_异常和系统调用</title>
      <link href="/2019/04/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%941%E2%80%94%E2%80%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87_%E5%90%AF%E5%8A%A8_%E4%B8%AD%E6%96%AD_%E5%BC%82%E5%B8%B8%E5%92%8C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
      <url>/2019/04/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%941%E2%80%94%E2%80%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87_%E5%90%AF%E5%8A%A8_%E4%B8%AD%E6%96%AD_%E5%BC%82%E5%B8%B8%E5%92%8C%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统的结构"><a href="#操作系统的结构" class="headerlink" title="操作系统的结构"></a>操作系统的结构</h1><p><img alt="操作系统的结构" data-src="http://qiniu.wangqy.top/didong/images/os-20.png"></p><blockquote><ul><li>一共分为四层</li><li>内核由系统调用接口、系统调用接口下的各个功能模块和硬件抽象层组成</li></ul></blockquote><a id="more"></a><h1 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h1><h2 id="内核特征"><a href="#内核特征" class="headerlink" title="内核特征"></a>内核特征</h2><blockquote><ul><li>并发</li><li>共享<blockquote><ul><li>宏观上, 同时访问</li><li>微观上, 互斥访问</li></ul></blockquote></li><li>虚拟, 多道程序设计</li><li>异步<blockquote><ul><li>程序的执行不是一贯到底的, 而是走走停停, 向前推进的速度不可知</li><li>只要运行环境相同, OS需要保证程序运行的结果相同</li></ul></blockquote></li></ul></blockquote><h2 id="内核结构分类"><a href="#内核结构分类" class="headerlink" title="内核结构分类"></a>内核结构分类</h2><ul><li>单内核</li></ul><p>单内核（Monolithic kernel），是个很大的进程。它的内部又能够被分为若干模块（或是层次或其他）。但是在运行的时候，它是个单独的二进制大映象。其模块间的通讯是通过直接调用其他模块中的函数实现的，而不是消息传递。</p><p>单内核结构在硬件之上定义了一个高阶的抽象界面，应用一组原语(或者叫系统调用)来实现操作系统的功能，例如进程管理，文件系统，和存储管理等等，这些功能由多个运行在核心态的模块来完成。</p><p>尽管每一个模块都是单独地服务这些操作，内核代码是高度集成的，而且难以编写正确。因为所有的模块都在同一个内核空间上运行，一个很小的bug都会使整个系统崩溃。然而，如果开发顺利，单内核结构就可以从运行效率上得到好处。</p><p>很多现代的单内核结构内核，如Linux和FreeBSD内核，能够在运行时将模块调入执行，这就可以使扩充内核的功能变得更简单，也可以使内核的核心部分变得更简洁。</p><p>单内核结构是非常有吸引力的一种设计，由于在同一个地址空间上实现所有低级操作的系统控制代码的复杂性的效率会比在不同地址空间上实现更高些。 单核结构正趋向于容易被正确设计，所以它的发展会比微内核结构更迅速些。</p><p>单内核结构的例子：传统的UNIX内核—-例如伯克利大学发行的版本，Linux内核。</p><ul><li>微内核</li></ul><p>微内核（Microkernelkernel）结构由一个非常简单的硬件抽象层和一组比较关键的原语或系统调用组成，这些原语仅仅包括了建立一个系统必需的几个部分，如线程管理，地址空间和进程间通信等。</p><p>用户模块间通信使用消息传递。</p><p>微核的目标是将系统服务的实现和系统的基本操作规则分离开来。例如，进程的输入/输出锁定服务可以由运行在微核之外的一个服务组件来提供。这些非常模块化的用户态服务器用于完成操作系统中比较高级的操作，这样的设计使内核中最核心的部分的设计更简单。一个服务组件的失效并不会导致整个系统的崩溃，内核需要做的，仅仅是重新启动这个组件，而不必影响其它的部分。</p><p>微内核将许多OS服务放入分离的进程，如文件系统,设备驱动程序,而进程通过消息传递调用OS服务。微内核结构必然是多线程的,第一代微内核,在核心提供了较多的服务,因此被称为’胖微内核’,它的典型代表是MACH。它既是GNU HURD也是APPLE SERVER OS的核心，第二代为微内核只提供最基本的OS服务,典型的OS是QNX,QNX在理论界很有名,被认为是一种先进的OS。</p><p>微内核只提供了很小一部分的硬件抽象，大部分功能由一种特殊的用户态程序：服务器来完成。微核经常被用于机器人和医疗器械的嵌入式设计中，因为它的系统的关键部分都处在相互分开的，被保护的存储空间中。这对于单核设计来说是不可能的，就算它采用了运行时加载模块的方式。</p><p>微内核的例子：AIX，BeOS，L4微内核系列，Mach中用于GNU Hurd和Mac OS X，Minix，MorphOS，QNX，RadiOS，VSTa。</p><ul><li>混合内核</li></ul><p>混合内核它很像微内核结构，只不过它的的组件更多的在核心态中运行以获得更快的执行速度。</p><p>混合内核实质上是微内核，只不过它让一些微核结构运行在用户空间的代码运行在内核空间，这样让内核的运行效率更高些。这是一种妥协做法，设计者参考了微内核结构的系统运行速度不佳的理论。然而后来的实验证明，纯微内核的系统实际上也可以是高效率的。大多数现代操作系统遵循这种设计范畴，微软公司开发的Windows操作系统就是一个很好的例子。另外还有XNU，运行在苹果Mac OS X上的内核，也是一个混合内核。</p><p>混合内核的例子： BeOS 内核 ，DragonFly BSD，ReactOS 内核</p><p>Windows NT、Windows 2000、Windows XP、Windows Server 2003以及Windows Vista等基于NT技术的操作系统。</p><ul><li>外内核</li></ul><p>外内核系统，也被称为纵向结构操作系统，是一种比较极端的设计方法。</p><p>外内核这种内核不提供任何硬件抽象操作，但是允许为内核增加额外的运行库，通过这些运行库应用程序可以直接地或者接近直接地对硬件进行操作。</p><p>它的设计理念是让用户程序的设计者来决定硬件接口的设计。外内核本身非常的小，它通常只负责系统保护和系统资源复用相关的服务。</p><p>传统的内核设计(包括单核和微核)都对硬件作了抽象，把硬件资源或设备驱动程序都隐藏在硬件抽象层下。比方说，在这些系统中，如果分配一段物理存储，应用程序并不知道它的实际位置。</p><p>而外核的目标就是让应用程序直接请求一块特定的物理空间，一块特定的磁盘块等等。系统本身只保证被请求的资源当前是空闲的，应用程序就允许直接存取它。既然外核系统只提供了比较低级的硬件操作，而没有像其他系统一样提供高级的硬件抽象，那么就需要增加额外的运行库支持。这些运行库运行在外核之上，给用户程序提供了完整的功能。</p><p>理论上，这种设计可以让各种操作系统运行在一个外核之上，如Windows和Unix。并且设计人员可以根据运行效率调整系统的各部分功能。</p><p><img alt="外内核" data-src="http://qiniu.wangqy.top/didong/images/os-33.png"></p><h1 id="虚拟机管理器（VMM）"><a href="#虚拟机管理器（VMM）" class="headerlink" title="虚拟机管理器（VMM）"></a>虚拟机管理器（VMM）</h1><p>建立和维护一个管理虚拟机的框架，同时为其他vxd程序（virtual X driver，虚拟设备驱动程序）提供许多重要的服务</p><p>VMW负责资源的隔离, 操作系统负责资源的管理</p><p><img alt="有无虚拟机的区别" data-src="http://qiniu.wangqy.top/didong/images/os-50.png"></p><h1 id="建议工具"><a href="#建议工具" class="headerlink" title="建议工具"></a>建议工具</h1><blockquote><ul><li>shell命令: ls, cd, rm, pwd, …</li><li>系统维护工具: apt, git</li><li>源码阅读与编辑工具: eclipse-CDT, understand, gedit, <code>vim</code></li><li>源码比较工具: <code>diff</code>, meld</li><li>开发编译调试工具: gcc, gdb, make</li><li>硬件模拟器: qemu</li></ul></blockquote><h1 id="用户态与内核态结构"><a href="#用户态与内核态结构" class="headerlink" title="用户态与内核态结构"></a>用户态与内核态结构</h1><p><img alt="用户态与内核态结构" data-src="http://qiniu.wangqy.top/didong/images/os-90.png"></p><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p><img alt="实验1" data-src="http://qiniu.wangqy.top/didong/images/os-6.png"></p><p><img alt="实验2" data-src="http://qiniu.wangqy.top/didong/images/os-2.png"></p><p><img alt="实验3" data-src="http://qiniu.wangqy.top/didong/images/os-79.png"></p><p><img alt="实验4" data-src="http://qiniu.wangqy.top/didong/images/os-64.png"></p><p><img alt="实验5" data-src="http://qiniu.wangqy.top/didong/images/os-82.png"></p><p><img alt="实验6" data-src="http://qiniu.wangqy.top/didong/images/os-63.png"></p><p><img alt="实验7" data-src="http://qiniu.wangqy.top/didong/images/os-42.png"></p><p><img alt="实验8" data-src="http://qiniu.wangqy.top/didong/images/os-27.png"></p><p><img alt="扩展实验" data-src="http://qiniu.wangqy.top/didong/images/os-40.png"></p><p>注意: 扩展实验的内容尽可能去做, 扩展ucore, 不局限于上面的内容</p><h1 id="80836相关知识"><a href="#80836相关知识" class="headerlink" title="80836相关知识"></a>80836相关知识</h1><h2 id="四种运行模式"><a href="#四种运行模式" class="headerlink" title="四种运行模式"></a>四种运行模式</h2><p>实模式, 保护模式, SMM模式和虚拟8086模式</p><blockquote><p>实模式</p><ul><li>加电启动后处于实模式</li><li>软件可访问的物理内存空间不超过1MB, 无法发挥<code>Intel 80386</code>以上级别的32位CPU的4GB内存管理能力</li></ul></blockquote><blockquote><p>保护模式</p><ul><li>支持内存分页</li><li>提供了对虚拟内存的良好支持</li><li>支持多任务</li><li>支持优先级, 不同的程序可以运行在不同的优先级上; 优先级一共分<code>0~34</code>个级别,操作系统运行在最高的优先级0上, 应用程序则运行在比较低的级别上</li><li>配合良好的检查机制后, 既可以在任务间实现数据的安全共享也可以很好地隔离各个任务</li></ul></blockquote><h2 id="逻辑地址-线性地址-物理地址-之间的区别"><a href="#逻辑地址-线性地址-物理地址-之间的区别" class="headerlink" title="逻辑地址, 线性地址, 物理地址 之间的区别"></a>逻辑地址, 线性地址, 物理地址 之间的区别</h2><blockquote><p>物理内存地址空间</p><ul><li>处理器提交到总线上用于访问计算机系统中的内存和设备的最终地址, 此地址唯一</li></ul></blockquote><blockquote><p>线性地址空间</p><ul><li>在操作系统的虚存管理之下每个运行的应用程序能访问的地址空间</li><li>每个运行的应用程序认为自己独享整个计算机系统的地址空间, 这样可让多个运行的应用程序之间相互隔离</li></ul></blockquote><blockquote><p>逻辑地址空间</p><ul><li>应用程序直接使用的地址空间</li></ul></blockquote><blockquote><p>地址转换</p><ul><li>段机制启动, 页机制未启动: 逻辑地址 -&gt; 段机制处理 -&gt; 线性地址 = 物理地址</li><li>段机制和页机制都启动: 逻辑地址 -&gt; 段机制处理 -&gt; 线性地址 -&gt; 页机制处理 -&gt; 物理地址</li></ul></blockquote><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><h3 id="寄存器种类"><a href="#寄存器种类" class="headerlink" title="寄存器种类"></a>寄存器种类</h3><blockquote><p>8组寄存器</p><ul><li>通用寄存器</li><li>段寄存器</li><li>指令指针寄存器</li><li>标志寄存器</li><li>控制寄存器</li><li>系统地址寄存器, 调试寄存器, 测试寄存器</li></ul></blockquote><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><blockquote><ul><li>EAX: 累加器</li><li>EBX: 基址寄存器</li><li>ECX: 计数器</li><li>EDX: 数据寄存器</li><li>ESI: 源地址指针寄存器</li><li>EDI: 目的地址指针寄存器</li><li>EBP: 基址指针寄存器</li></ul></blockquote><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><blockquote><ul><li>CS: 代码段(Code Segment)</li><li>DS: 数据段(Data Segment)</li><li>ES: 附加数据段(Extra Segment)</li><li>SS: 堆栈段(Stack Segment)</li><li>FS: 附加段</li><li>GS: 附加段</li></ul></blockquote><h3 id="指令寄存器和标志寄存器"><a href="#指令寄存器和标志寄存器" class="headerlink" title="指令寄存器和标志寄存器"></a>指令寄存器和标志寄存器</h3><blockquote><p>EIP(指令寄存器)</p><ul><li>EIP的低16位就是8086的IP, 存储下一条要执行指令的内存地址</li><li>在分段地址转换中, 表示指令的段内偏移地址</li></ul></blockquote><blockquote><p>EFLAGS(标志寄存器)</p><ul><li>IF(Interrupt Flag): 中断允许标志位, 由CLI和STI两条指令来控制; 设置IF使CPU可识别外部(可屏蔽)中断请求; 复位IF禁止中断; IF对不可屏蔽外部中断和故障中断的识别没有任何作用</li><li>CF, PF, ZF, …</li></ul></blockquote><h1 id="ucore中用到的一些-通用-数据结构"><a href="#ucore中用到的一些-通用-数据结构" class="headerlink" title="ucore中用到的一些(通用)数据结构"></a>ucore中用到的一些(通用)数据结构</h1><h2 id="传统的双向循环链表及其缺点"><a href="#传统的双向循环链表及其缺点" class="headerlink" title="传统的双向循环链表及其缺点"></a>传统的双向循环链表及其缺点</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">foo</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">prev</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;<span class="keyword">foo_t</span>;</span><br></pre></td></tr></table></figure><p>缺点: 需要为每种特定数据结构类型定义针对这个数据结构的特定链表插入, 删除等各种操作, 会导致代码冗余</p><h1 id="ucore中使用的双向循环链表"><a href="#ucore中使用的双向循环链表" class="headerlink" title="ucore中使用的双向循环链表"></a>ucore中使用的双向循环链表</h1><p><img alt="ucore中的双向链表结构定义" data-src="http://qiniu.wangqy.top/didong/images/os-48.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表操作函数</span></span><br><span class="line">list_init(<span class="keyword">list_entry_t</span> *elm)</span><br><span class="line">list_add_after</span><br><span class="line">list_add_before</span><br><span class="line">list_del(<span class="keyword">list_entry_t</span> *listelm)</span><br><span class="line"><span class="comment">// 访问链表节点所在的宿主数据结构</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> le2page(le, member) to_struct((le), struct Page, member)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> to_struct(ptr, type, member)\</span></span><br><span class="line">((type *)((<span class="keyword">char</span> *)(ptr) - offsetof(type, member)))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> offsetof(type, member)\</span></span><br><span class="line">((<span class="keyword">size_t</span>)(&amp;((type *)<span class="number">0</span>)-&gt;member))</span><br><span class="line"><span class="keyword">free_area_t</span> free_area;</span><br><span class="line"><span class="keyword">list_entry_t</span> *le = &amp;free_area.free_list;</span><br><span class="line"><span class="keyword">while</span>((le=list_next(le))!=&amp;free_area.free_list)&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Page</span> *<span class="title">p</span> = <span class="title">le2page</span>(<span class="title">le</span>, <span class="title">page_link</span>);</span></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算机启动流程"><a href="#计算机启动流程" class="headerlink" title="计算机启动流程"></a>计算机启动流程</h1><p><img alt="计算机启动流程" data-src="http://qiniu.wangqy.top/didong/images/os-39.png"></p><p><img alt="没有主引导记录和活动分区的启动流程" data-src="http://qiniu.wangqy.top/didong/images/os-15.png"></p><blockquote><p>注意:<br>内存可写与不可写<br>内存逻辑上统一, 物理上分割</p></blockquote><h2 id="BIOS-Base-Input-Output-System"><a href="#BIOS-Base-Input-Output-System" class="headerlink" title="BIOS(Base Input Output System)"></a>BIOS(Base Input Output System)</h2><blockquote><p>以中断方式提供了基本的I/O功能</p><ul><li>INT 10h: 字符显示</li><li>INT 13h: 磁盘扇区读写</li><li>INT 15h: 检测内存大小</li><li>INT 16h: 键盘输入</li></ul></blockquote><p>只能在x86的实模式下访问</p><h2 id="CPU初始化"><a href="#CPU初始化" class="headerlink" title="CPU初始化"></a>CPU初始化</h2><blockquote><ul><li>CPU加电稳定后从0XFFFF0读第一条指令<blockquote><ul><li>CS:IP = 0xf000:fff0</li><li>第一条指令是跳转指令</li></ul></blockquote></li><li>CPU初始状态为16位实模式<blockquote><ul><li>CS:IP是16位寄存器</li><li>指令指针PC=16*CS+IP</li><li>最大地址空间是1MB(2^20B)</li></ul></blockquote></li></ul></blockquote><h2 id="BIOS初始化"><a href="#BIOS初始化" class="headerlink" title="BIOS初始化"></a>BIOS初始化</h2><blockquote><ul><li>硬件自检POST</li><li>检测系统中内存和显卡等关键部件的存在和工作状态</li><li>查找并执行显卡等接口卡BIOS, 进行设备初始化</li><li>执行系统BIOS, 进行系统检测<blockquote><ul><li>检测和配置系统中安装的即插即用设备</li></ul></blockquote></li><li>更新CMOS中的扩展系统配置数据ESCD</li><li>按指定启动顺序从软盘, 硬盘或光驱启动</li></ul></blockquote><h2 id="BIOS启动固件"><a href="#BIOS启动固件" class="headerlink" title="BIOS启动固件"></a>BIOS启动固件</h2><p><img alt="BIOS启动固件在内存中的位置" data-src="http://qiniu.wangqy.top/didong/images/os-add-0.jpg"></p><blockquote><p>BIOS启动固件的内容</p><ul><li>基本输入输出的程序(磁盘, 键盘, …)</li><li>系统设置信息(启动位置, …)</li><li>开机后自检程序</li><li>系统自启动程序等</li></ul></blockquote><blockquote><p>Q: 为什么不直接从BIOS里头把操作系统的内核映像读进来?<br>A: 磁盘上有文件系统(多种多样), 不能在机器刚出厂的时候就限制死磁盘文件系统的格式, 同时也不能在BIOS中加上认识所有文件系统代码. 有一个基本约定, 不需要认识格式, 也能从磁盘中读第一块(加载程序).</p></blockquote><h2 id="系统启动规范"><a href="#系统启动规范" class="headerlink" title="系统启动规范"></a>系统启动规范</h2><h3 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h3><ol><li><p>固化到计算机主板上的程序</p></li><li><p>包括系统设置, 自检程序和系统自启动程序</p></li><li><p>BIOS-MBR(多分区需求, 主引导记录总共512字节, 只能描述最多4个分区, 每个占16字节), BIOS-GPT(全局唯一标识分区表, 可以描述更多的分区结构), PXE(网络启动, 加网络协议栈)</p></li></ol><h3 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h3><blockquote><p>统一可扩展固件借口</p><ul><li>接口标准</li><li>在所有平台上一致的操作系统启动服务</li></ul></blockquote><h3 id="增加可信启动流程"><a href="#增加可信启动流程" class="headerlink" title="增加可信启动流程"></a>增加可信启动流程</h3><p>BIOS起来后, 读磁盘时, 对引导记录的可信性进行一个检查, 引导记录里有签名.</p><h2 id="主引导记录MBR格式"><a href="#主引导记录MBR格式" class="headerlink" title="主引导记录MBR格式"></a>主引导记录MBR格式</h2><p><img alt="MBR格式" data-src="http://qiniu.wangqy.top/didong/images/os-57.png"></p><h2 id="分区引导扇区格式"><a href="#分区引导扇区格式" class="headerlink" title="分区引导扇区格式"></a>分区引导扇区格式</h2><p><img alt="分区引导扇区格式" data-src="http://qiniu.wangqy.top/didong/images/os-34.png"></p><h2 id="加载程序"><a href="#加载程序" class="headerlink" title="加载程序"></a>加载程序</h2><p><img alt="加载程序流程" data-src="http://qiniu.wangqy.top/didong/images/os-22.png"></p><h1 id="中断-异常和系统调用"><a href="#中断-异常和系统调用" class="headerlink" title="中断, 异常和系统调用"></a>中断, 异常和系统调用</h1><blockquote><p>为什么需要系统调用</p><ul><li>在计算机运行中, 内核是被信任的第三方</li><li>只有内核可以执行特权指令</li><li>方便应用程序</li></ul></blockquote><blockquote><p>为什么需要中断和异常</p><ul><li>当外设连接计算机时, 会出现什么现象?</li><li>当应用程序处理意想不到的行为时, 会出现什么现象?</li></ul></blockquote><blockquote><p>系统调用希望解决的问题</p><ul><li>用户应用程序是如何得到系统服务的?</li><li>系统调用和功能调用的不同之处是什么?</li></ul></blockquote><h2 id="内核的进入与退出"><a href="#内核的进入与退出" class="headerlink" title="内核的进入与退出"></a>内核的进入与退出</h2><p><img alt="内核的进入与退出" data-src="http://qiniu.wangqy.top/didong/images/os-74.png"></p><h2 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h2><blockquote><ul><li>系统调用(system call)<blockquote><ul><li>应用程序主动向操作系统发出的服务请求</li></ul></blockquote></li><li>异常(exception)<blockquote><ul><li>非法指令或者其他原因导致当前指令执行失败(如内存出错)后的处理请求</li></ul></blockquote></li><li>中断(hardware interrupt)<blockquote><ul><li>来自硬件设备的处理请求</li></ul></blockquote></li></ul></blockquote><p><img alt="中断, 异常和系统调用比较" data-src="http://qiniu.wangqy.top/didong/images/os-26.png"></p><h2 id="中断和异常处理机制"><a href="#中断和异常处理机制" class="headerlink" title="中断和异常处理机制"></a>中断和异常处理机制</h2><blockquote><p>硬件处理<br>在CPU初始化时设置中断使能标志</p><ul><li>依据内部或外部事件设置中断标志</li><li>依据中断向量调用相应中断服务例程</li></ul></blockquote><blockquote><p>软件处理</p><ul><li>现场保存(编译器)</li><li>中断服务处理(服务例程)</li><li>清除中断标记(服务例程)</li><li>现场恢复(编译器)</li></ul></blockquote><h2 id="中断嵌套"><a href="#中断嵌套" class="headerlink" title="中断嵌套"></a>中断嵌套</h2><blockquote><ul><li>硬件中断服务例程可被打断<blockquote><ul><li>不同硬件中断源可能在硬件中断处理时出现</li><li>硬件中断服务例程中需要临时禁止中断请求</li><li>中断请求会保持到CPU做出响应</li></ul></blockquote></li><li>异常服务例程可被打断<blockquote><ul><li>异常服务例程执行时可能出现硬件中断</li></ul></blockquote></li><li>异常服务例程可嵌套<blockquote><ul><li>异常服务例程可能出现缺页</li></ul></blockquote></li></ul></blockquote><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p><img alt="标准C库的例子" data-src="http://qiniu.wangqy.top/didong/images/os-25.png"></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><ul><li>操作系统服务的编程接口</li><li>通常由高级语言编写(C或者C++)</li><li>程序访问通常是通过高层次的API接口而不是直接进行系统调用</li><li>三种最常用的应用程序编程接口(API)<blockquote><ul><li>Win32 API用于Windows</li><li>POSIX API用于POSIX-based system(包括UNIX, LINUX, Mac OS X的所有版本)</li><li>Java API用于JAVA虚拟机(JVM)</li></ul></blockquote></li></ul></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li>每个系统调用对应一个系统调用号</li></ol><p>系统调用接口根据系统调用号来维护表的索引</p><ol start="2"><li>系统调用接口调用内核态中的系统调用功能实现, 并返回系统调用的状态和结果</li></ol><ol start="3"><li>用户不需要知道系统调用的实现</li></ol><p>需要设置调用参数和获取返回结果</p><p>操作系统接口的细节大部分都隐藏在应用编程接口后(通过运行程序支持的库来管理)</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="文件复制过程中的系统调用序列"><a href="#文件复制过程中的系统调用序列" class="headerlink" title="文件复制过程中的系统调用序列"></a>文件复制过程中的系统调用序列</h4><blockquote><p>源文件———————————————&gt;目标文件</p><ul><li>获取输入文件名<blockquote><ul><li>在屏幕显示提示</li><li>等待并接收键盘输入</li></ul></blockquote></li><li>获取输出文件名<blockquote><ul><li>在屏幕显示提示</li><li>等待并接收键盘输入</li></ul></blockquote></li><li>打开输入文件</li><li>如果文件不存在, 出错退出</li><li>创建输出文件</li><li>如果文件存在, 出错退出</li><li>循环<blockquote><ul><li>读取输入文件</li><li>写入输出文件</li></ul></blockquote></li><li>直到读取结束</li><li>关闭输出文件</li><li>在屏幕显示完成信息</li><li>正常退出</li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_fork 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_exit 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_wait 3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_pipe 4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_write 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_read 6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_close 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_kill 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_exec 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_open 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_mknod 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_unlink 12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_fstat 13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_link 14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_mkdir 15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_chdir 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_dup 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_getpid 18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_sbrk 19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_sleep 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SYS_procmem 21</span></span><br></pre></td></tr></table></figure><h4 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h4><blockquote><p>在ucore中库函数read()的功能是读文件</p><blockquote><p>user/libs/file.h: <code>int read(int fd, void *buf, int length)</code></p></blockquote><p>库函数read()的参数和返回值</p><blockquote><p>int fd –&gt; 文件句柄<br>void *buf –&gt; 数据缓冲区指针<br>int length –&gt; 数据缓冲区长度<br>int return_value: 返回读出数据长度</p></blockquote><p>库函数read()使用示例</p><blockquote><p>int sfs_filetest1.c: <code>ret = read(fd, data, len);</code></p></blockquote></blockquote><h4 id="系统调用库接口示例"><a href="#系统调用库接口示例" class="headerlink" title="系统调用库接口示例"></a>系统调用库接口示例</h4><p><img alt="系统调用库接口示例" data-src="http://qiniu.wangqy.top/didong/images/os-73.png"></p><h4 id="ucore系统调用read-fd-buffer-length-的实现"><a href="#ucore系统调用read-fd-buffer-length-的实现" class="headerlink" title="ucore系统调用read(fd, buffer, length)的实现"></a>ucore系统调用read(fd, buffer, length)的实现</h4><ol><li>kern/trap/trapentry.S: alltraps()</li></ol><p>用户态一个int进到内核, 这是一个软中断, 所有这些到这段汇编程序, 获取到中断所需的相关信息组成的数据结构(tf)</p><ol start="2"><li>kern/trap/trap.c: trap()</li></ol><p>tf-&gt;trapno == T_SYSCALL</p><p>T_SYSCALL: 系统调用对应的中断向量</p><ol start="3"><li>kern/syscall/syscall.c: syscall()</li></ol><p>tf-&gt;tf_regs.reg_eax == SYS_read</p><p>reg_eax: 系统调用编号</p><ol start="4"><li>kern/syscall/syscall.c: sys_read()</li></ol><p>从tf-&gt;sp 获取fd, buf, length</p><p>参数(从用户态转到内核态)</p><ol start="5"><li>kern/fs/sysfile.c: sysfile_read()</li></ol><p>读取文件</p><p>实现直接操作底下的驱动程序</p><ol start="6"><li>kern/trap/trapentry.S: trapret()</li></ol><p>ireturn: 将读到的内容的长度返回给用户态</p><h3 id="函数调用与系统调用的不同"><a href="#函数调用与系统调用的不同" class="headerlink" title="函数调用与系统调用的不同"></a>函数调用与系统调用的不同</h3><blockquote><p>系统调用<br>INT和IRET指令用于系统调用<br>有堆栈切换和特权级的转换</p></blockquote><blockquote><p>函数调用<br>CALL和RET用于常规调用<br>没有堆栈切换</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>由于系统调用的量很大, 系统调用中断向量表之后总共占用一个中断编号<br>不同的系统调用功能, 用系统调用表来实现, 从而根据系统调用功能的不同, 选择不同的系统调用实现</p></blockquote><blockquote><p>所有的系统调用都是通过一个宏展开形成相应的函数</p></blockquote><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><blockquote><p>OS发生异常时</p><ol><li>有可能帮你解决问题, 如内存访问错误, 通过虚拟内存的方式, 从而执行下一跳指令</li><li>或是终止应用程序, 操作系统收回资源, 如除零发生时</li></ol></blockquote><h2 id="中断-异常和系统调用的开销"><a href="#中断-异常和系统调用的开销" class="headerlink" title="中断, 异常和系统调用的开销"></a>中断, 异常和系统调用的开销</h2><p>超过函数调用</p><blockquote><p>开销</p><ul><li>引导机制<blockquote><ul><li>切换用户态和内核态</li></ul></blockquote></li><li>建立内核堆栈</li><li>验证参数</li><li>内核态映射到用户态的地址空间, 更新页面映射权限<blockquote><ul><li>切换到内核态时, 访问代码有切换, 内核需要访问用户态的一些信息, 这些映射会导致缓存有变化</li></ul></blockquote></li><li>内核态独立地址空间, TLB<blockquote><ul><li>Translation Lookaside Buffer</li><li>转换检测缓冲区是一个内存管理单元, 用于改进虚拟地址到物理地址转换速度的缓存</li><li>会有失效</li></ul></blockquote></li></ul></blockquote><h1 id="x86启动顺序"><a href="#x86启动顺序" class="headerlink" title="x86启动顺序"></a>x86启动顺序</h1><h2 id="寄存器初始值"><a href="#寄存器初始值" class="headerlink" title="寄存器初始值"></a>寄存器初始值</h2><p><img alt="寄存器初始值" data-src="http://qiniu.wangqy.top/didong/images/os-86.png"></p><h2 id="第一条指令"><a href="#第一条指令" class="headerlink" title="第一条指令"></a>第一条指令</h2><ul><li><p>CS = F00H, EIP = 0000FFF0H</p></li><li><p>实际地址是:</p></li></ul><p>Base + EIP = FFFF0000H + 0000FFF0H = FFFFFFF0H</p><p>这是BIOS的EPROM(Erasable Programmable Read Only Memory)所在地</p><ul><li><p>当CS被新值加载, 则地址转换规则将开始起作用</p></li><li><p>通常第一条指令是一条长跳转指令(这样CS和EIP都会更新)到BIOS代码中执行</p></li></ul><h2 id="处于实模式的段"><a href="#处于实模式的段" class="headerlink" title="处于实模式的段"></a>处于实模式的段</h2><p><img alt="处于实模式的段" data-src="http://qiniu.wangqy.top/didong/images/os-87.png"></p><h2 id="从BIOS到Bootloader"><a href="#从BIOS到Bootloader" class="headerlink" title="从BIOS到Bootloader"></a>从BIOS到Bootloader</h2><ul><li><p>BIOS加载存储设备(比如软盘, 硬盘, 光盘, USB盘)上的第一个扇区(主引导扇区, Master Boot Record, or MBR)的512字节到内存的0x7c00 …</p></li><li><p>然后跳转到<code>@ 0x7c00</code>的第一条指令开始执行</p></li></ul><h2 id="从bootloader到OS"><a href="#从bootloader到OS" class="headerlink" title="从bootloader到OS"></a>从bootloader到OS</h2><blockquote><p>bootloader做的事<br>使能保护模式(protection mode) &amp; 段机制(segment-level protection)</p><blockquote><p>使能保护模式, bootloader/OS要设置CR0的bit 0 (PE)<br>段机制在保护模式下是自动使能的<br>从硬盘上读取<code>kernel in ELF</code>格式的<code>ucore kernel</code>(跟在MBR后面的扇区)并放到内存中固定位置<br>跳转到ucore OS的入口点(entry point)执行, 这时控制权到了ucore OS中</p></blockquote></blockquote><h2 id="段机制"><a href="#段机制" class="headerlink" title="段机制"></a>段机制</h2><p><img alt="段机制" data-src="http://qiniu.wangqy.top/didong/images/os-53.png"></p><p><img alt="线性地址的形成" data-src="http://qiniu.wangqy.top/didong/images/os-77.png"></p><blockquote><p>说明<br>GDT: 全局描述符表(段表), 由bootloader建立<br>gdtdesc: 段描述符<br>index: GDT中的索引<br>RPL: 段的优先级(0, 1, 2, 3)<br>GDTR: 段表寄存器</p></blockquote><p><img alt="段选择子结构" data-src="http://qiniu.wangqy.top/didong/images/os-72.png"></p><h2 id="加载ELF格式的ucore-OS-kernel"><a href="#加载ELF格式的ucore-OS-kernel" class="headerlink" title="加载ELF格式的ucore OS kernel"></a>加载ELF格式的ucore OS kernel</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">elfhdrd</span>&#123;</span></span><br><span class="line">uint magic;<span class="comment">//must equal ELF_MAGIC</span></span><br><span class="line">uchar elf[<span class="number">12</span>];</span><br><span class="line">ushort type;</span><br><span class="line">ushort machine;</span><br><span class="line">uint version;</span><br><span class="line">uint entry;<span class="comment">//program entry point(in va)</span></span><br><span class="line">uint  phoff;<span class="comment">//offset of the program headerr tables</span></span><br><span class="line">uint shoff;</span><br><span class="line">uint flags;</span><br><span class="line">ushort ehsize;</span><br><span class="line">ushort phentsize;</span><br><span class="line">ushort phnum;<span class="comment">//number of program header tables</span></span><br><span class="line">ushort shentsize;</span><br><span class="line">ushort shnum;</span><br><span class="line">ushort shstrndx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proghdr</span>&#123;</span></span><br><span class="line">uint type;<span class="comment">//segment type</span></span><br><span class="line">uint offset; <span class="comment">//beginning of the segment in the file</span></span><br><span class="line">uint va;<span class="comment">//where this segment should be placed at</span></span><br><span class="line">uint pa;</span><br><span class="line">uint filesz;</span><br><span class="line">uint memsz;<span class="comment">//size of the segment in byte</span></span><br><span class="line">uint flags;</span><br><span class="line">uint align;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C函数调用的实现"><a href="#C函数调用的实现" class="headerlink" title="C函数调用的实现"></a>C函数调用的实现</h1><blockquote><ul><li>理解C函数调用在汇编级是如何实现的</li><li>理解如何在汇编级代码中调用C函数</li><li>理解基于EBP寄存器的函数调用栈</li></ul></blockquote><p><img alt="C函数调用的实现" data-src="http://qiniu.wangqy.top/didong/images/os-8.png"></p><blockquote><p>其他需要注意事项<br>参数(parameters) &amp; 函数返回值(return values)可通过寄存器或位于内存中的栈来传递<br>不需要保存/回复(save/restore)所有寄存器</p></blockquote><h1 id="GCC内联汇编"><a href="#GCC内联汇编" class="headerlink" title="GCC内联汇编"></a>GCC内联汇编</h1><blockquote><p>什么是内联汇编?</p><ul><li>这时GCC对C语言的扩张</li><li>可直接在C语句中插入汇编指令<br>有何用处?</li><li>调用C语言不支持的指令</li><li>用汇编在C语言中手动优化<br>如何工作?</li><li>用给定的模板和约束来生成汇编指令</li><li>在C函数内形成汇编源码</li></ul></blockquote><p><a href="https://wangqy.cc/2019/05/28/GCC%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">GCC内联汇编笔记</a></p><h1 id="x86中的中断处理"><a href="#x86中的中断处理" class="headerlink" title="x86中的中断处理"></a>x86中的中断处理</h1><h2 id="中断源"><a href="#中断源" class="headerlink" title="中断源"></a>中断源</h2><blockquote><ul><li>中断 Interrupts<br>外部中断 External(hardware generated) interrupts<br>串口, 硬盘, 网卡, 时钟, …<br>软件产生的中断 Software generated interrupts<br>The INT n 指令, 通常用于系统调用</li></ul></blockquote><blockquote><ul><li>异常 Exceptions<br>程序错误<br>软件产生的异常 Software generated exceptions<br>INTO, INT 3 and BOUND<br>机器检查出的异常S</li></ul></blockquote><h2 id="确定中断服务例程-ISR"><a href="#确定中断服务例程-ISR" class="headerlink" title="确定中断服务例程(ISR)"></a>确定中断服务例程(ISR)</h2><p><img alt="确定中断服务例程(ISR)" data-src="http://qiniu.wangqy.top/didong/images/os-14.png"></p><p><img alt="中断门和陷阱门" data-src="http://qiniu.wangqy.top/didong/images/os-59.png"></p><h2 id="切换到中断服务例程-ISR"><a href="#切换到中断服务例程-ISR" class="headerlink" title="切换到中断服务例程(ISR)"></a>切换到中断服务例程(ISR)</h2><p>不同特权级的中断切换对堆栈的影响</p><p><img alt="不同特权级的中断切换对堆栈的影响" data-src="http://qiniu.wangqy.top/didong/images/os-51.png"></p><h2 id="从中断服务例程-ISR-返回"><a href="#从中断服务例程-ISR-返回" class="headerlink" title="从中断服务例程(ISR)返回"></a>从中断服务例程(ISR)返回</h2><p><img alt="从中断服务例程(ISR)返回" data-src="http://qiniu.wangqy.top/didong/images/os-24.png"></p><h2 id="系统调用-1"><a href="#系统调用-1" class="headerlink" title="系统调用"></a>系统调用</h2><blockquote><ul><li>用户程序通过系统调用访问OS内核服务</li><li>如何实现<blockquote><p>需要指定中断号<br>使用Trap, 也称Software generated interrupt<br>或使用特殊指令(SYSENTER/SYSEXIT)</p></blockquote></li></ul></blockquote><h1 id="关键习题"><a href="#关键习题" class="headerlink" title="关键习题"></a>关键习题</h1><blockquote><ol start="0"><li>批处理的主要缺点是()</li></ol><ul><li style="list-style: none"><input type="checkbox"> 效率低</li><li style="list-style: none"><input type="checkbox" checked> 失去了交互性</li><li style="list-style: none"><input type="checkbox"> 失去了并行性</li><li style="list-style: none"><input type="checkbox"> 以上都不是</li></ul></blockquote><blockquote><ol><li>多道批处理系统主要考虑的是()</li></ol><ul><li style="list-style: none"><input type="checkbox"> 交互性</li><li style="list-style: none"><input type="checkbox"> 及时性</li><li style="list-style: none"><input type="checkbox" checked> 系统效率</li><li style="list-style: none"><input type="checkbox" checked> 吞吐量<br>说明: 在单道批处理系统中, 内存中仅有一道作业. 无法充分利用系统中的所有资源, 致使系统性能较差. 为了进一步提高资源的利用率和系统吞吐量, 由此形成了多道批处理系统.</li></ul></blockquote><blockquote><ol start="2"><li>下列选项中, 不可能在用户态发生的事件是()</li></ol><ul><li style="list-style: none"><input type="checkbox"> 系统调用</li><li style="list-style: none"><input type="checkbox"> 外部中断</li><li style="list-style: none"><input type="checkbox" checked> 进程切换</li><li style="list-style: none"><input type="checkbox"> 缺页<br>说明:<br>系统调用是提供给应用程序使用的, 由用户态发出, 进入内核态执行; 外部中断随时可能发生; 应用程序执行时可能发生缺页; 进程切换完全由内核来控制.</li></ul></blockquote><blockquote><ol start="3"><li>中断处理和子程序调用都需要压榨你以保护现场. 中断处理一定会保存而子程序调用不需要保存其内容的是()</li></ol><ul><li style="list-style: none"><input type="checkbox"> 程序计数器</li><li style="list-style: none"><input type="checkbox" checked> 程序状态字寄存器</li><li style="list-style: none"><input type="checkbox"> 通用数据寄存器</li><li style="list-style: none"><input type="checkbox"> 通用地址寄存器</li></ul></blockquote><blockquote><ol start="4"><li>CPU执行操作系统代码的时候称为处理机处于()</li></ol><ul><li style="list-style: none"><input type="checkbox"> 自由态</li><li style="list-style: none"><input type="checkbox"> 目态</li><li style="list-style: none"><input type="checkbox" checked> 管态</li><li style="list-style: none"><input type="checkbox"> 就绪态<br>说明: 内核态又称为管态</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记——0</title>
      <link href="/2019/04/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%940/"/>
      <url>/2019/04/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%940/</url>
      
        <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><a id="more"></a><blockquote><ul><li><a href="http://os.cs.tsinghua.edu.cn/oscourse/OS2017spring" target="_blank" rel="noopener">课程网站</a></li><li><a href="https://piazza.com/tsinghua.edu.cn/spring2015/30240243x/home" target="_blank" rel="noopener">清华操作系统课程讨论区——piazza</a></li><li>汇编语言（<a href="https://www.jianshu.com/p/4a7b716a2d1b" target="_blank" rel="noopener">https://www.jianshu.com/p/4a7b716a2d1b</a>，<a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html</a>，<a href="https://www.w3cschool.cn/assembly/" target="_blank" rel="noopener">https://www.w3cschool.cn/assembly/</a>，<a href="https://www.linuxprobe.com/gcc-how-to.html" target="_blank" rel="noopener">https://www.linuxprobe.com/gcc-how-to.html</a>，<a href="https://www.cnblogs.com/lsgxeva/p/8948153.html" target="_blank" rel="noopener">https://www.cnblogs.com/lsgxeva/p/8948153.html</a>）</li><li><a href="https://objectkuan.gitbooks.io/ucore-docs/content/" target="_blank" rel="noopener">uCore OS实验指导书</a></li><li><a href="https://chyyuu.gitbooks.io/os_course_qa/content/" target="_blank" rel="noopener">操作系统课程问答</a></li><li><a href="https://github.com/oscourse-tsinghua/rcore_plus/wiki/OS-2019-%E5%A4%A7%E5%AE%9E%E9%AA%8C%E5%88%9D%E7%A8%BF" target="_blank" rel="noopener">OS 2019 大实验部分内容</a></li><li><a href="https://github.com/chyyuu/aos_course_info/blob/master/readinglist.md" target="_blank" rel="noopener">aos_course_info</a></li><li><a href="https://chyyuu.gitbooks.io/os_tutorial_lab/content/" target="_blank" rel="noopener">OS Tutorial Labs</a></li><li><a href="https://xuyongjiande.gitbooks.io/os_exercises/content/index.html" target="_blank" rel="noopener">MOOC OS习题集</a></li><li><a href="https://github.com/oscourse-tsinghua/rcore_plus" target="_blank" rel="noopener">rcore_plus</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/02/make.html" target="_blank" rel="noopener">Make命令教程</a></li><li><a href="https://blog.csdn.net/21cnbao/article/details/7385161" target="_blank" rel="noopener">Linux gdb调试器用法</a></li><li><a href="http://www.xuetangx.com/" target="_blank" rel="noopener">学堂在线课程主要内容</a></li><li><a href="https://www.shiyanlou.com/courses/221" target="_blank" rel="noopener">实验楼</a></li><li><a href="https://github.com/chyyuu/ucore_os_lab" target="_blank" rel="noopener">ucore_os_lab</a></li><li><a href="https://github.com/chyyuu/os_course_exercises" target="_blank" rel="noopener">os_course_exercises</a></li><li><a href="https://github.com/chyyuu/ucore_os_docs" target="_blank" rel="noopener">ucore_os_docs</a></li><li><a href="https://github.com/chyyuu/os_course_info" target="_blank" rel="noopener">ucore_os_info</a></li><li><a href="https://github.com/chyyuu/ucore_os_plus" target="_blank" rel="noopener">ucore_os_plus</a></li><li>《操作系统概念 第七版》</li><li>《操作系统精髓与设计原理 第八版》</li><li><em>Operating Systems - Three Easy Pieces</em></li><li><a href="http://doc.outofmemory.cn/gcc/#I194" target="_blank" rel="noopener">gcc教程</a></li><li><a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">shell脚本教程</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入时自动删除后面的字</title>
      <link href="/2019/04/21/%E8%BE%93%E5%85%A5%E6%97%B6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%E5%90%8E%E9%9D%A2%E7%9A%84%E5%AD%97/"/>
      <url>/2019/04/21/%E8%BE%93%E5%85%A5%E6%97%B6%E8%87%AA%E5%8A%A8%E5%88%A0%E9%99%A4%E5%90%8E%E9%9D%A2%E7%9A%84%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>按下键盘上的<code>insert</code>键，将输入模式改为<code>插入</code></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络专业术语目录（附解释）</title>
      <link href="/2019/04/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/04/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>整个目录参考自<a href="https://wenku.baidu.com/view/f5b7e76e26d3240c844769eae009581b6bd9bd9f.html?re=view" target="_blank" rel="noopener">百度文库</a>；增加了某些名词；增加了解释；目录并不完整，解释也有可能并不全面甚至空白，或者存在错误，还请指正。</p><h1 id="计算机网络专业术语目录"><a href="#计算机网络专业术语目录" class="headerlink" title="计算机网络专业术语目录"></a>计算机网络专业术语目录</h1><a id="more"></a><table><thead><tr><th style="text-align:left">英文名词</th><th style="text-align:center">中文翻译</th><th style="text-align:right">名词解释</th></tr></thead><tbody><tr><td style="text-align:left">Persistent HTTP</td><td style="text-align:center">持久性HTTP或坚持的HTTP</td><td style="text-align:right">建立TCP连接后，可以持续传输对象，而不需要重复建立连接</td></tr><tr><td style="text-align:left">Nonpersistent HTTP</td><td style="text-align:center">非持久HTTP或非坚持HTTP</td><td style="text-align:right">建立TCP连接后，每发送完一个对象后，再次发送下一个对象需要重新建立连接</td></tr><tr><td style="text-align:left">stop-and-wait</td><td style="text-align:center">停等</td><td style="text-align:right">一个一个地发送报文段，只有在收到上一个的肯定确认，才能发送下一个，即非流水线</td></tr><tr><td style="text-align:left">NAT（Network Address Translation）</td><td style="text-align:center">网络地址转换</td><td style="text-align:right">在公有IP地址和私有IP地址之间进行转换，每个外网端口号对应内网主机当中的一个进程</td></tr><tr><td style="text-align:left">Flooding</td><td style="text-align:center">洪泛</td><td style="text-align:right">每次收到邻居节点消息之后都无条件转发给其他邻居，导致消息被重复转发，占用资源</td></tr><tr><td style="text-align:left">PDU（Protocol Data Unit）</td><td style="text-align:center">协议数据单元</td><td style="text-align:right">同一层所有协议处理的数据单元（消息，报文段，数据报，帧，bit）</td></tr><tr><td style="text-align:left">Average Throughput</td><td style="text-align:center">平均吞吐量</td><td style="text-align:right">一段时间内的平均传输成功的数据的量</td></tr><tr><td style="text-align:left">Congestion Control</td><td style="text-align:center">拥塞控制</td><td style="text-align:right">调节发送端发包速率，避免路由器缓存溢出</td></tr><tr><td style="text-align:left">Flow Control</td><td style="text-align:center">流量控制</td><td style="text-align:right">调节发送端发包速率，防止接收端缓存溢出</td></tr><tr><td style="text-align:left">Carrier Sense</td><td style="text-align:center">载波侦听</td><td style="text-align:right">一个节点在传输前先听信道</td></tr><tr><td style="text-align:left">End system</td><td style="text-align:center">端系统</td><td style="text-align:right">除了传统的PC、Linux工作站等还包括手机、TV等一众可以连接到互联网的设备</td></tr><tr><td style="text-align:left">Modem</td><td style="text-align:center">调制解调器</td><td style="text-align:right">进行数字信号和模拟信号之间的转换</td></tr><tr><td style="text-align:left">Base station</td><td style="text-align:center">基站</td><td style="text-align:right">将有线信号转换为无线信号</td></tr><tr><td style="text-align:left">Communication link</td><td style="text-align:center">通信链路</td><td style="text-align:right">传输信号的物理线路</td></tr><tr><td style="text-align:left">Physical media</td><td style="text-align:center">物理介质</td><td style="text-align:right">信号传输的载体</td></tr><tr><td style="text-align:left">Coaxial cable</td><td style="text-align:center">同轴电缆</td><td style="text-align:right">一种物理通信链路</td></tr><tr><td style="text-align:left">Fiber optics</td><td style="text-align:center">光纤</td><td style="text-align:right">一种速度接近光速的物理通信链路</td></tr><tr><td style="text-align:left">Radio spectrum</td><td style="text-align:center">射频频谱</td><td style="text-align:right">无线传输链路</td></tr><tr><td style="text-align:left">Transmission rate</td><td style="text-align:center">传输速率</td><td style="text-align:right">不同的链路传输数据的速率</td></tr><tr><td style="text-align:left">Packets</td><td style="text-align:center">（数据）包或分组</td><td style="text-align:right">信息打包的结果</td></tr><tr><td style="text-align:left">Routers</td><td style="text-align:center">路由器</td><td style="text-align:right">分组交换机的一种，3层网络设备，可隔离冲突域</td></tr><tr><td style="text-align:left">Link-layer switches</td><td style="text-align:center">链路层交换机</td><td style="text-align:right">分组交换机的一种，二层网络设备，可隔离冲突域</td></tr><tr><td style="text-align:left">Path</td><td style="text-align:center">路径</td><td style="text-align:right">一个分组从发送端传输到接收端所经过的通信链路和分组交换机的顺序</td></tr><tr><td style="text-align:left">ISP (Internet Service Provider)</td><td style="text-align:center">网络服务提供商</td><td style="text-align:right">每个ISP是一个由多个分组交换机和多段通信链路组成的网络</td></tr><tr><td style="text-align:left">TCP (Transmission Control Protocol)</td><td style="text-align:center">传输控制协议</td><td style="text-align:right">一种运输层协议；特点：点对点、传输可靠有序的字节流、流水线、发送端和接收端缓存、全双工、面向连接、拥塞控制、流量控制</td></tr><tr><td style="text-align:left">IP ( Internet Protocol)</td><td style="text-align:center">网际协议</td><td style="text-align:right">一种网络层协议</td></tr><tr><td style="text-align:left">Intranets</td><td style="text-align:center">内网</td><td style="text-align:right">相对于外网来说，即局域网</td></tr><tr><td style="text-align:left">API (Application Programming Interface)</td><td style="text-align:center">应用程序编程接口</td><td style="text-align:right">应用层提供的用于一个端系统上的应用程序通过网络基础设施向另一个端系统上的应用程序发送数据的接口</td></tr><tr><td style="text-align:left">Network edge</td><td style="text-align:center">网络边缘</td><td style="text-align:right">主要由端系统组成，人们日常接触的部分</td></tr><tr><td style="text-align:left">Access Networks</td><td style="text-align:center">接入网</td><td style="text-align:right">连接一个端系统到第一个路由器（在该端系统到遥远的端系统的路径上）（边缘路由器）</td></tr><tr><td style="text-align:left">Ethernet</td><td style="text-align:center">以太网</td><td style="text-align:right">一种链路层协议</td></tr><tr><td style="text-align:left">Network core</td><td style="text-align:center">网络核心</td><td style="text-align:right">由分组交换机和通信链路组成</td></tr><tr><td style="text-align:left">Circuit Switching</td><td style="text-align:center">电路交换</td><td style="text-align:right">在端系统间通信会话期间，预留了端系统间通信的沿路径所需要的资源（缓存，链路传输速率）</td></tr><tr><td style="text-align:left">Packet Switching</td><td style="text-align:center">分组交换</td><td style="text-align:right">源将长报文分成较小的数据包（分组），每个分组通过通信链路和分组交换机传送，分组以等于该链路的最大传输速率的速度传输通过通信链路</td></tr><tr><td style="text-align:left">FDM (frequency-division multiplexing)</td><td style="text-align:center">频分多路复用</td><td style="text-align:right">链路的频谱由跨越链路创建的所有连接所共享，在连接期间链路为每条连接专用一个频段</td></tr><tr><td style="text-align:left">TDM (time-division multiplexing)</td><td style="text-align:center">时分多路复用</td><td style="text-align:right">网络在每个帧中为该连接指定一个时隙，这些时隙专门由该连接单独使用</td></tr><tr><td style="text-align:left">Statistical Multiplexing</td><td style="text-align:center">统计复用</td><td style="text-align:right">与TDM类似，但是是异步，即把公共信道的时隙实行按需分配，只对那些需要传送信息或正在工作的终端才分配给时隙</td></tr><tr><td style="text-align:left">Store-and-forward</td><td style="text-align:center">存储转发</td><td style="text-align:right">在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组</td></tr><tr><td style="text-align:left">Queuing delays</td><td style="text-align:center">排队延迟</td><td style="text-align:right">到达分组交换机的分组在输出缓存中等待的时延</td></tr><tr><td style="text-align:left">Transmission delay</td><td style="text-align:center">传输延迟或发送延迟</td><td style="text-align:right">将所有分组的比特推（传输）向链路所需要的时间</td></tr><tr><td style="text-align:left">Propagation delay</td><td style="text-align:center">传播延迟</td><td style="text-align:right">一个比特从该链路的起点到链路端路由器传播所需要的时间</td></tr><tr><td style="text-align:left">Throughput</td><td style="text-align:center">吞吐量</td><td style="text-align:right">接收端成功接收的数据的速度</td></tr><tr><td style="text-align:left">Internet backbone</td><td style="text-align:center">骨干网</td><td style="text-align:right">用来连接多个区域或地区的高速网络</td></tr><tr><td style="text-align:left">Delay</td><td style="text-align:center">延迟或时延</td><td style="text-align:right">一个报文或分组从一个网络的一端传送到另一个端所需要的时间</td></tr><tr><td style="text-align:left">Loss</td><td style="text-align:center">丢包</td><td style="text-align:right">分组到达分组交换机时发现输出缓存已经被其他等待传输的分组完全充满，到达的分组或已经排队的分组之一将被丢弃</td></tr><tr><td style="text-align:left">Packet-Switched Network</td><td style="text-align:center">分组交换网络</td><td style="text-align:right">采用分组交换技术组成的网络</td></tr><tr><td style="text-align:left">Nodal processing delay</td><td style="text-align:center">节点处理延迟</td><td style="text-align:right">检查分组首部和决定将该分组导向何处所需要的时间</td></tr><tr><td style="text-align:left">End-to-end delay</td><td style="text-align:center">端到端延迟</td><td style="text-align:right">（在网络无拥塞，即排队时延微不足道，源主机和目的主机之间有N-1台路由器的情况下）端到端时延 = N（处理时延+传输时延+传播时延）</td></tr><tr><td style="text-align:left">Instantaneous throughput</td><td style="text-align:center">瞬时吞吐量</td><td style="text-align:right">任何时间瞬间接收端成功接收数据的速率</td></tr><tr><td style="text-align:left">Network interface card</td><td style="text-align:center">网络接口卡(即网卡)</td><td style="text-align:right">物理硬件</td></tr><tr><td style="text-align:left">Message</td><td style="text-align:center">消息或报文</td><td style="text-align:right">应用层PDU</td></tr><tr><td style="text-align:left">Segment</td><td style="text-align:center">报文段</td><td style="text-align:right">运输层PDU</td></tr><tr><td style="text-align:left">Datagram</td><td style="text-align:center">数据报</td><td style="text-align:right">网络层PDU</td></tr><tr><td style="text-align:left">Frames</td><td style="text-align:center">帧</td><td style="text-align:right">链路层PDU</td></tr><tr><td style="text-align:left">Packet sniffer</td><td style="text-align:center">数据包监听器</td><td style="text-align:right">监听数据包</td></tr><tr><td style="text-align:left">Protocol Stack</td><td style="text-align:center">协议栈</td><td style="text-align:right">各层的所有协议</td></tr><tr><td style="text-align:left">Peer entities</td><td style="text-align:center">对等实体</td><td style="text-align:right">执行对等协议的实体</td></tr><tr><td style="text-align:left">Server farm</td><td style="text-align:center">服务器集群</td><td style="text-align:right">将很多服务器集中起来一起进行同一种服务，在客户端看来就像是只有一个服务器</td></tr><tr><td style="text-align:left">Infrastructure</td><td style="text-align:center">基础设施或基础架构</td><td style="text-align:right">网络的物理设施</td></tr><tr><td style="text-align:left">Self-scalability</td><td style="text-align:center">自扩展性</td><td style="text-align:right">系统自身通过添加资源来处理增长的工作</td></tr><tr><td style="text-align:left">Timing</td><td style="text-align:center">实时性</td><td style="text-align:right">时钟信号能够准确的定时，各处的时钟能够达到一致，在不同的场合需要达到ns级、us级</td></tr><tr><td style="text-align:left">Bandwidth-sensitive applications</td><td style="text-align:center">带宽敏感应用</td><td style="text-align:right">对带宽大小、稳定性等要求严格的应用</td></tr><tr><td style="text-align:left">Connection-oriented service</td><td style="text-align:center">面向连接的服务</td><td style="text-align:right">通信双方在通信时,要事先建立一条通信线路,其过程有建立连接、使用连接和释放连接三个过程</td></tr><tr><td style="text-align:left">Directory service</td><td style="text-align:center">目录服务</td><td style="text-align:right">一个储存、组织和提供信息访问服务的软件系统，在软件工程中，一个目录是指一组名字和值的映射</td></tr><tr><td style="text-align:left">Base HTML file</td><td style="text-align:center">基本HTML文件</td><td style="text-align:right">即超文本标记语言文件</td></tr><tr><td style="text-align:left">Stateless protocol</td><td style="text-align:center">（HTTP）无状态协议</td><td style="text-align:right">协议对于事务处理没有记忆能力；缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大；另一方面，在服务器不需要先前信息时它的应答就较快</td></tr><tr><td style="text-align:left">RTT (round-trip time )</td><td style="text-align:center">往返时间</td><td style="text-align:right">表示从发送端发送数据开始，到发送端收到来自接收端的确认（接收端收到数据后便立即发送确认，不包含数据传输时间）总共经历的时间</td></tr><tr><td style="text-align:left">Web proxy caches</td><td style="text-align:center">网页代理缓存</td><td style="text-align:right">中间代理服务器，用于保存最近请求的对象</td></tr><tr><td style="text-align:left">Status line</td><td style="text-align:center">状态行</td><td style="text-align:right">HTTP协议状态行，格式：HTTP版本号 状态号 原因描述<code>&lt;CRLF&gt;</code></td></tr><tr><td style="text-align:left">Out-of-band</td><td style="text-align:center">(频)带外(的)</td><td style="text-align:right">传输某些数据时，使用与普通数据不同的通道</td></tr><tr><td style="text-align:left">In-band</td><td style="text-align:center">带内(的)</td><td style="text-align:right">传输某些数据时，使用与普通数据相同的通道</td></tr><tr><td style="text-align:left">User agents</td><td style="text-align:center">用户代理</td><td style="text-align:right">用户与网络应用程序之间的接口</td></tr><tr><td style="text-align:left">Mail servers</td><td style="text-align:center">邮件服务器</td><td style="text-align:right">负责电子邮件收发管理的设备</td></tr><tr><td style="text-align:left">Pull protocol</td><td style="text-align:center">拉式协议</td><td style="text-align:right">用于获取报文（SMTP）</td></tr><tr><td style="text-align:left">Push protocol</td><td style="text-align:center">推式协议</td><td style="text-align:right">用于发送报文（POP3，HTTP，IMAP）</td></tr><tr><td style="text-align:left">Host aliasing</td><td style="text-align:center">主机别名</td><td style="text-align:right">相对于规范主机名来说，通常比规范主机名更容易记忆的主机名</td></tr><tr><td style="text-align:left">Canonical hostname</td><td style="text-align:center">规范主机名</td><td style="text-align:right">主机一开始的主机名</td></tr><tr><td style="text-align:left">Mail server aliasing</td><td style="text-align:center">邮件服务器别名</td><td style="text-align:right">相对于一般邮件服务器名来说，通常比其更加容易记忆</td></tr><tr><td style="text-align:left">Load distribution</td><td style="text-align:center">负载分配</td><td style="text-align:right">由于一个主机别名可能对应多个 规范主机名/IP地址/服务器，DNS可以将不同客户端对服务器的访问通过循环的方式，分配到不同的服务器上</td></tr><tr><td style="text-align:left">Top-level domain (TLD) servers</td><td style="text-align:center">顶级域名服务器</td><td style="text-align:right">负责顶级域名以及所有国家的顶级域名的服务器</td></tr><tr><td style="text-align:left">Authoritative DNS servers</td><td style="text-align:center">权威域名服务器</td><td style="text-align:right">收藏了公共可访问DNS记录的服务器</td></tr><tr><td style="text-align:left">Iterative queries</td><td style="text-align:center">迭代查询</td><td style="text-align:right">本地DNS服务器依次访问根、TLD、权威DNS服务器，访问后，马上返回结果，继续访问下一个</td></tr><tr><td style="text-align:left">Resource records (RRs)</td><td style="text-align:center">资源记录</td><td style="text-align:right">一个4元组：（name，value，type，TTL）</td></tr><tr><td style="text-align:left">Overlay network</td><td style="text-align:center">覆盖网</td><td style="text-align:right">一种创建在另一网络之上的计算机网络（覆盖网络中的节点可以被认为是通过虚拟或逻辑链接相连，其中每个链接对应一条路径（Path）。节点之间也可能通过下层网络中的多个物理连接实现相连。 例如对等网络或客户-服务器应用这类分布式系统都可视为覆盖网络，因为它们的节点都运行在因特网之上。 因特网自身最初也是作为一个电话网络之上的覆盖网络构建，而当今（借由VoIP的引入），电话网络正越来越变成一个创建在因特网之上的覆盖网络。）</td></tr><tr><td style="text-align:left">Peer-to-Peer (P2P) Network</td><td style="text-align:center">对等网络</td><td style="text-align:right">通信双方既可以作为服务器，又可以作为客户端</td></tr><tr><td style="text-align:left">Socket programming</td><td style="text-align:center">套接字编程</td><td style="text-align:right">通过套接字的网络编程接口，实现不同终端的进程之间的通信</td></tr><tr><td style="text-align:left">Multiplexing and demultiplexing</td><td style="text-align:center">复用与分用</td><td style="text-align:right">多路复用（在源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息从而生成报文段，然后将报文段传递到网络层） 多路分解（将运输层报文段中的数据交付到正确的套接字）</td></tr><tr><td style="text-align:left">Unidirectional data transfer</td><td style="text-align:center">单向数据传送</td><td style="text-align:right">数据只能从一端传送到另一端，不能双向传送</td></tr><tr><td style="text-align:left">Finite-state machine (FSM)</td><td style="text-align:center">有限状态机</td><td style="text-align:right">表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型</td></tr><tr><td style="text-align:left">Positive acknowledgments</td><td style="text-align:center">肯定确认</td><td style="text-align:right">ACK，成功接收到数据</td></tr><tr><td style="text-align:left">Negative acknowledgments</td><td style="text-align:center">否定确认</td><td style="text-align:right">NACK，数据接收失败</td></tr><tr><td style="text-align:left">Countdown timer</td><td style="text-align:center">(倒数)计时器</td><td style="text-align:right">用于判断报文段传输是否超时，基于时间的重传机制</td></tr><tr><td style="text-align:left">Cumulative acknowledgment</td><td style="text-align:center">累积确认</td><td style="text-align:right">发送方收到一个对序号为n的分组的确认的ACK，表明接收方已正确接收到序号为n的以前且包括n在内的所有分组</td></tr><tr><td style="text-align:left">Receive buffer</td><td style="text-align:center">接收缓冲区或接收缓存</td><td style="text-align:right">接收方用于缓存正确接收到的报文段，和重组乱序的报文段</td></tr><tr><td style="text-align:left">Resource-management cells</td><td style="text-align:center">资源管理单元</td><td style="text-align:right">在网络辅助（ATM ABR）拥塞控制中，数据单元从源经过一系列中间交换机传输到目的地，在数据单元中夹杂着资源管理单元，用来在主机和交换机之间传递与拥塞相关的信息，交换机和主机都可发送RM单元，RM单元可用来提供直接网络反馈和经由接收方的网络反馈</td></tr><tr><td style="text-align:left">Source (port number)</td><td style="text-align:center">源端口号</td><td style="text-align:right">标识源主机进程</td></tr><tr><td style="text-align:left">Destination (port number)</td><td style="text-align:center">目的端口号</td><td style="text-align:right">标识目的主机进程</td></tr><tr><td style="text-align:left">Checksum</td><td style="text-align:center">校验和</td><td style="text-align:right">用于检验接收到的报文段是否出错</td></tr><tr><td style="text-align:left">Pipelined protocols</td><td style="text-align:center">流水线(型)协议</td><td style="text-align:right">与停等协议相对，一次可以发送多个报文段，不需要等到上一个报文段的肯定确认</td></tr><tr><td style="text-align:left">Go-back-N</td><td style="text-align:center">回退N</td><td style="text-align:right">一次只能发送一定数量的报文段，当一个报文段传输失败时，该报文段之前未被确认的报文段都会重传</td></tr><tr><td style="text-align:left">Selective Repeat</td><td style="text-align:center">选择重传</td><td style="text-align:right">只重传确认传输失败的报文段</td></tr><tr><td style="text-align:left">Timeout</td><td style="text-align:center">(定时器)超时</td><td style="text-align:right">未在指定时间内接收到对某一报文段的肯定确认</td></tr><tr><td style="text-align:left">Fast Retransmit</td><td style="text-align:center">快速重传</td><td style="text-align:right">收到3个冗余ACK，TCP执行快速重传，即在该报文段的定时器过期之前重传丢失的报文段</td></tr><tr><td style="text-align:left">Three way handshake</td><td style="text-align:center">三次握手</td><td style="text-align:right">TCP连接建立时的三次握手（SYN，SYN+ACK，ACK）</td></tr><tr><td style="text-align:left">sequence number</td><td style="text-align:center">序列号(简写为 seq)</td><td style="text-align:right">报文段数据的第一个字节在整个字节流中的序号，用来标识报文段</td></tr><tr><td style="text-align:left">acknowledgement number</td><td style="text-align:center">确认号(简写为 ack;注意与大写的 ACK 不同)</td><td style="text-align:right">ack=seq+对应报文段数据部分的长度（字节），没有数据时+1</td></tr><tr><td style="text-align:left">AIMD（additive increase, multiplicative decrease）</td><td style="text-align:center">加性增乘性减</td><td style="text-align:right">拥塞控制技术中，当cwnd超过法制ssthresh后，线性增长，每个RRT内+1MSS，称为加性增；在TCP Reno下，当cwnd增长到某值，出现3个冗余ACK事件时（不是计时器超时），cwnd减半，称为乘性减</td></tr><tr><td style="text-align:left">Slow Start</td><td style="text-align:center">慢启动</td><td style="text-align:right">起始cwnd为1个MSS，然后以2的指数增长，这样TCP发送速率起始慢</td></tr><tr><td style="text-align:left">congestion-avoidance</td><td style="text-align:center">拥塞避免</td><td style="text-align:right">前一部分同加性增；后一部分，当定时器超时（未收到三个冗余ACK），发生丢包，ssthresh设置为cwnd的一半，cwnd设置为1个MSS，然后进入慢启动阶段（TCP Tahoe）</td></tr><tr><td style="text-align:left">fast recovery</td><td style="text-align:center">快速恢复</td><td style="text-align:right">在乘性减后，对于引起TCP进入快速恢复状态的缺失报文段，对收到的每个冗余ACK，cwnd的值增加一个MSS</td></tr><tr><td style="text-align:left">duplicate (ACK)</td><td style="text-align:center">冗余(ACK)</td><td style="text-align:right">对一个报文段的重复确认，导致对下一个报文段的重传</td></tr><tr><td style="text-align:left">Random Early Detection</td><td style="text-align:center">随机早期检测</td><td style="text-align:right">一种AQM（主动队列管理）算法，用来计算路由器平均队列长度，以此作为对拥塞程度的估计；计算丢弃分组的概率；平均队列长度小于最小阀值，到达的分组被接纳；大于最大阀值，被标记或丢弃；在这之间，被以某种概率标记或丢弃</td></tr><tr><td style="text-align:left">Forwarding table</td><td style="text-align:center">转发表</td><td style="text-align:right">路由器检查到达分组首部字段的值，使用该值在该路由器的转发表中索引查询，存储在转发表项中的该首部的值指出了该分组将被转发的路由器的输出链路接口</td></tr><tr><td style="text-align:left">Virtual-circuit networks</td><td style="text-align:center">虚电路网络</td><td style="text-align:right">仅在网络层提供连接服务的计算机网络</td></tr><tr><td style="text-align:left">Datagram networks</td><td style="text-align:center">数据报网络</td><td style="text-align:right">　仅在网络层提供无连接服务的计算机网络</td></tr><tr><td style="text-align:left">Signaling message</td><td style="text-align:center">信令报文</td><td style="text-align:right">　虚电路网络中，端系统向网络发送指示虚电路启动与终止的报文，以及路由器之间传递的用于建立虚电路（即修改路由器表中的连接状态）的报文</td></tr><tr><td style="text-align:left">CAM（Content Addressable Memory）　</td><td style="text-align:center">内容可寻址存储器　</td><td style="text-align:right">用于查找，在基本常数时间内返回对该地址的转发表项的内容</td></tr><tr><td style="text-align:left">Crossbar switch</td><td style="text-align:center">纵横开关</td><td style="text-align:right">　纵横式开关是一组以二维阵列排列的接触器,外围有一个框架,框架内部有数支连着多重接触器的垂直选择杆</td></tr><tr><td style="text-align:left">Active queue management</td><td style="text-align:center">主动队列管理</td><td style="text-align:right">　分组丢弃与标记策略</td></tr><tr><td style="text-align:left">Head-of-the-line (HOL)</td><td style="text-align:center">队头或线路前部　</td><td style="text-align:right">输入排队交换机的线路前部，注意HOL阻塞（即队列的第一个数据包被阻塞，原因是输出端口的竞争，交换结构只能选择一个数据报先传输</td></tr><tr><td style="text-align:left">Classless interdomain routing (CIDR)</td><td style="text-align:center">无类域间路由　</td><td style="text-align:right">IP地址的网络部分不受限制，即没有ＡＢＣＤＥ类地址的划分</td></tr><tr><td style="text-align:left">Plug-and-play</td><td style="text-align:center">即插即用</td><td style="text-align:right">　DHCP（动态主机配置协议）具有能将主机连接进一个网络的网络相关方面的自动能力，故它又被称为即插即用协议</td></tr><tr><td style="text-align:left">Anycast</td><td style="text-align:center">任播　</td><td style="text-align:right">IPv6中引入了任播地址，这种地址可以使数据交付给一组主机中的任意一个（例如，这种特性可用于向一组包含给定文档的镜像站点中的最近的一个发送一个HTTP GET报文）</td></tr><tr><td style="text-align:left">IGP（Interior gateway protocols）</td><td style="text-align:center">内部网关协议　</td><td style="text-align:right">又称为AS内部路由选择协议，一个自治网络内网关（主机和路由器）间交换路由信息的协议；路由信息能用于网间协议（IP）或者其它网络协议来说明路由传送是如何进行的；IGP协议包括RIP、OSPF、IS-IS、IGRP、EIGRP</td></tr><tr><td style="text-align:left">RIP（Routing information Protocol）</td><td style="text-align:center">路由信息协议</td><td style="text-align:right">一种DV（距离向量）协议，使用跳数作为其费用测度，每条链路的费用为1，一条路径的最大费用被限制为15，因此RIP的使用限制在网络直径不超过15跳的自治系统内</td></tr><tr><td style="text-align:left">OSPF（Open shortest Path First）</td><td style="text-align:center">开放最短路径优先</td><td style="text-align:right">自治系统内部的路由选择算法，其核心是一个使用洪泛链路状态协议和一个Dijkstra最低费用路径算法</td></tr><tr><td style="text-align:left">ABR（Area border routers）</td><td style="text-align:center">区域边界路由器</td><td style="text-align:right">位于一个或多个OSPF区域的一个路由器，其连接这个区域到骨干网络</td></tr><tr><td style="text-align:left">Sequence-number-controlled flooding</td><td style="text-align:center">序列号控制的洪泛或带序列号的受控洪泛</td><td style="text-align:right">源节点将其地（或其他唯一标识符）以及广播序列号放入广播分组，再向它的所有邻居发送该分组；每个节点维护它已经收到的、复制的和转发的源地址和每个广播分组的序号列表</td></tr><tr><td style="text-align:left">RPF(Reverse path forwarding)</td><td style="text-align:center">逆向路径转发</td><td style="text-align:right">当一台路由器接收到具有给定源地址的广播分组时，仅当该分组到达的链路正好是位于它自己的返回其源的最短单播路径上，它才向其所有初链路传输报文；否则，路由器只是丢弃分组而不转发</td></tr><tr><td style="text-align:left">Rendezvous point</td><td style="text-align:center">汇聚点</td><td style="text-align:right">基于中心的方法建立一棵生成树时，要定义一个中心节点（也称为汇合点或核）；节点向中心节点单播加入树报文</td></tr><tr><td style="text-align:left">Longest prefix matching</td><td style="text-align:center">最长前缀匹配</td><td style="text-align:right">在IP协议中，被路由器用于在路由表中进行选择的一个算法；路由表中的每个表项都指定了一个网络，所以一个目的地址可能与多个表项匹配；最明确的一个表项——即子网掩码最长的一个——就叫做最长前缀匹配；与目的地址的高位匹配得最多的表项</td></tr><tr><td style="text-align:left">Scheduling</td><td style="text-align:center">调度</td><td style="text-align:right">　</td></tr><tr><td style="text-align:left">Fragmentation</td><td style="text-align:center">分片或分段</td><td style="text-align:right">IP数据报分片，分片后的每个数据报中<code>数据部分的大小 = MTU - 首部大小</code>，同时数据部分大小须是8字节的整数倍</td></tr><tr><td style="text-align:left">Fragment Offset</td><td style="text-align:center">报文段偏移量</td><td style="text-align:right">分片后，相对于原来的数据报，分片后的数据报数据部分首字节的字节序号，单位为8字节</td></tr><tr><td style="text-align:left">NAT traversal</td><td style="text-align:center">NAT穿越</td><td style="text-align:right">处于使用了NAT设备的私有TCP/IP网络中的主机之间建立连接</td></tr><tr><td style="text-align:left">Multicast</td><td style="text-align:center">组播或多播</td><td style="text-align:right">在发送者和每一接收者之间实现点对多点网络连接；如果一台发送者同时给多个接收者传输相同的数据，也只需复制一份相同的数据包；它提高了数据传送效率，减少了骨干网络出现拥塞的可能性</td></tr><tr><td style="text-align:left">Unicast</td><td style="text-align:center">单播</td><td style="text-align:right">发送者和每一接收者之间实现点对点网络连接；如果一台发送者同时给多个的接收者传输相同的数据，也必须相应的复制多份的相同数据包</td></tr><tr><td style="text-align:left">Tunneling</td><td style="text-align:center">隧道技术　</td><td style="text-align:right">两个IPv6节点使用IPv6数据报进行交互，但中间经IPv4路由器互联，则中间IPv4路由器的集合称为一个隧道；整个IPv6数据报放到一个IPv4数据报的数据（有效载荷）字段中</td></tr><tr><td style="text-align:left">Link-State Routing Algorithm</td><td style="text-align:center">链路状态路由算法</td><td style="text-align:right">具有全局状态信息的算法，该算法必须知道网络中每条链路的费用</td></tr><tr><td style="text-align:left">Distance Vector Routing Algorithm</td><td style="text-align:center">距离向量路由算法　</td><td style="text-align:right">分散式路由选择算法，每个节点维护到网络中所有其他节点的费用（距离）估计的向量　</td></tr><tr><td style="text-align:left">Count to Infinity Problem</td><td style="text-align:center">无穷计数问题</td><td style="text-align:right">距离向量路由算法中，由于某一链路费用的增大，节点之间的信息不对称，所导致的数据报在几个相同的路由器之间不断路由，直到费用叠加到超过某一费用时结束</td></tr><tr><td style="text-align:left">Hierarchical Routing</td><td style="text-align:center">分层路由</td><td style="text-align:right">IS-IS区域提供了一种在IS-IS域中伸缩路由的方法；正常的IS-IS区域和连接它们的骨干区域形成两级的路由层次；区域内的路由称作一级路由；域内独立的区域之间的路由称作二级路由</td></tr><tr><td style="text-align:left">AS（autonomous systems）</td><td style="text-align:center">自治系统</td><td style="text-align:right">每个AS由一组通常处在相同管理控制下的路由器组成（例如，由相同的ISP运营或属于相同的公司网络）</td></tr><tr><td style="text-align:left">BGP (Border Gateway Protocol)</td><td style="text-align:center">边界网关协议</td><td style="text-align:right">一个自治系统间路由选择协议：从相邻自治系统处获得子网可达信息；向本AS内部的所有路由器传播这些可达性信息；基于可达性信息和AS策略，决定到达子网的‘好’路由</td></tr><tr><td style="text-align:left">in-network duplication</td><td style="text-align:center">网内复制</td><td style="text-align:right"></td></tr><tr><td style="text-align:left">broadcast storm</td><td style="text-align:center">广播风暴</td><td style="text-align:right">当网络中存在环时，由于采用洪泛方法实现广播，会导致一个广播分组在环内不断被复制转发</td></tr><tr><td style="text-align:left">spanning tree</td><td style="text-align:center">生成树</td><td style="text-align:right">为了避免广播风暴和冗余广播分组的传输，生成网络的生成树，使得广播时，每个节点只接收一个广播分组的副本</td></tr><tr><td style="text-align:left">redundant packets</td><td style="text-align:center">冗余数据包</td><td style="text-align:right">接收到的重复的数据包</td></tr><tr><td style="text-align:left">Broadcast channels</td><td style="text-align:center">广播信道</td><td style="text-align:right">一种链路层信道，这种信道用于连接有线局域网、卫星网和HFC（混合光纤同轴电缆）接入网中的多台主机；需要媒体访问协议来协调帧传输</td></tr><tr><td style="text-align:left">Trailer fields</td><td style="text-align:center">尾部字段</td><td style="text-align:right">以太网帧的最后有CRC校验字段</td></tr><tr><td style="text-align:left">Link access</td><td style="text-align:center">链路接入或链路访问</td><td style="text-align:right">链路层提供的服务之一；MAC（媒体访问控制）协议规定了帧在链路上传输的规则</td></tr><tr><td style="text-align:left">NIC（Network interface card）</td><td style="text-align:center">网络接口卡(即网卡)</td><td style="text-align:right">链路层的主体部分在其中实现，又称为网络适配器</td></tr><tr><td style="text-align:left">Parity checks</td><td style="text-align:center">奇偶校验</td><td style="text-align:right">一种数据校验方法，二维奇偶校验既可以检验，也可以纠错</td></tr><tr><td style="text-align:left">FEC（Forward error correction)</td><td style="text-align:center">前向纠错</td><td style="text-align:right">接收方检测和纠正差错的能力</td></tr><tr><td style="text-align:left">CRC（Cyclic Redundancy Check）</td><td style="text-align:center">循环冗余校验</td><td style="text-align:right">广泛应用的差错检测技术</td></tr><tr><td style="text-align:left">Polynomial code</td><td style="text-align:center">多项式码(即CRC码)</td><td style="text-align:right">CRC编码将要发送的比特串看作系数为0和1的一个多项式</td></tr><tr><td style="text-align:left">Multiple access</td><td style="text-align:center">多路接入或多路访问</td><td style="text-align:right">多个发送和接收节点对一个共享广播信道的访问</td></tr><tr><td style="text-align:left">Random access protocols</td><td style="text-align:center">随机接入协议</td><td style="text-align:right">一大类多访问协议：一个传输节点总是以信道的全部速率进行发送；当有碰撞时，设计碰撞的每个节点反复地重发它的帧，到该帧无碰撞地通过为止；但是碰撞后，不立即重发，而是在重发前等待一个随机时延</td></tr><tr><td style="text-align:left">CSMA/CD</td><td style="text-align:center">带冲突检测的载波侦听多路访问</td><td style="text-align:right">在发送帧的同时对信道进行侦听，以确定是否发生冲突，若在发送数据过程中检测到了冲突，则发送阻塞信息并立即停止发送数据，然后等待随机时间再次发送</td></tr><tr><td style="text-align:left">CSMA/CA</td><td style="text-align:center">带冲突避免的载波侦听多路访问</td><td style="text-align:right">利用ACK信号来避免冲突的发生，也就是说，只有当客户端收到网络上返回的ACK信号后才确认送出的数据已经正确到达目的地址；用于无线传输，因为无线传输时半双工，无法在发包的同时检测冲突，故一旦冲突发生，发包也不会停止，故应该尽量避免冲突</td></tr><tr><td style="text-align:left">Token passing protocol</td><td style="text-align:center">令牌传递协议</td><td style="text-align:right">轮流协议中的一种；没有主节点，一个称为令牌的小的特殊帧在节点之间以某种固定的次序进行交换</td></tr><tr><td style="text-align:left">ARP（Address Resolution Protocol）</td><td style="text-align:center">地址解析协议</td><td style="text-align:right">进行网路层地址（如IP地址）和链路层地址（MAC地址）的转换</td></tr><tr><td style="text-align:left">Preamble</td><td style="text-align:center">前导(字段)</td><td style="text-align:right">以太网帧中开始的部分，8个字节；前7个字节的值都是10101010，用于“唤醒”接收适配器，并且将它们的时钟和发送方的时钟同步；最后一个字节的值是10101011，最后两个比特（第一个出现的两个连续的1）警告适配器B，“重要的内容“要来了</td></tr><tr><td style="text-align:left">Exponential backoff</td><td style="text-align:center">指数回退或指数退避</td><td style="text-align:right">用于以太网以及DOCSIS电缆网络多路访问协议中的二进制指数后退算法；用于实现，当碰撞节点数量较少时，时间间隔较短，当碰撞节点数量较大时，时间间隔较长；时间间隔从<code>0～2^n-1</code>之间选择，n为发生碰撞的次数</td></tr><tr><td style="text-align:left">Repeater</td><td style="text-align:center">中继器或转发器</td><td style="text-align:right">物理层设备，在输入端接收信号并在输出端再生该信号</td></tr><tr><td style="text-align:left">Virtual-channel identifier</td><td style="text-align:center">虚拟信道标识</td><td style="text-align:right"></td></tr><tr><td style="text-align:left">Cell-loss priority</td><td style="text-align:center">信元丢失优先权</td><td style="text-align:right"></td></tr><tr><td style="text-align:left">LSR（Label-switched router）</td><td style="text-align:center">标签交换路由器</td><td style="text-align:right">一类路由器，位于一个多协议标签交换(MPLS)网络的中间；它为转换这个标签用于路由分组负责；当一个LSR接收到一个分组，它使用这个包含在这个分组头部的标签作为一个索引来决定在标签交换通道(LSP)中的下一跳，和一个来自查寻表分组相应的标签；旧的标签然后被从这个头部移除，和在这个分组被路由转发之前被替换为新的标签。</td></tr><tr><td style="text-align:left">Framing</td><td style="text-align:center">(封装)成帧</td><td style="text-align:right">将数据包封装在链路层帧中</td></tr><tr><td style="text-align:left">error detection</td><td style="text-align:center">误差检测或检错</td><td style="text-align:right">检测比特差错，主要有奇偶校验、检验和、循环冗余检测</td></tr><tr><td style="text-align:left">Channel Partitioning</td><td style="text-align:center">信道分割式(MAC 协议)</td><td style="text-align:right">TMD（时分多路复用）、（FMD）频分多路复用、CDMA（码分多址）</td></tr><tr><td style="text-align:left">Taking turns MAC protocol</td><td style="text-align:center">轮流式 MAC 协议</td><td style="text-align:right">当只有一个节点活跃时，该活跃节点具有R bps的吞吐量；当有M个节点活跃时，每个活跃节点的吞吐量接近R/M bps；主要有轮询协议（有主节点）和令牌传递协议（无主节点，有令牌）</td></tr><tr><td style="text-align:left">Collision</td><td style="text-align:center">冲突或碰撞</td><td style="text-align:right">所有节点同时接收到多个帧；没有一个接受节点能够有效地获得任何传输的帧；碰撞帧的信号纠缠在一起</td></tr><tr><td style="text-align:left">Time Slot</td><td style="text-align:center">时隙</td><td style="text-align:right">TDM（时分多路复用）将时间划分为时间帧，并进一步划分每个时间帧为N个时隙</td></tr><tr><td style="text-align:left">Slotted ALOHA</td><td style="text-align:center">时隙ALOHA</td><td style="text-align:right">如果有碰撞，该节点在时隙结束之前检测到这次碰撞；该节点以概率p在后续的每个时隙中重传它的帧，直到该帧被无碰撞地传输出去</td></tr><tr><td style="text-align:left">Unslotted ALOHA</td><td style="text-align:center">无时隙ALOHA</td><td style="text-align:right">与时隙ALOHA相比，不分时隙，任何时刻都可以发送，因此更加容易引发碰撞，其效率是时隙ALOHA的一半</td></tr><tr><td style="text-align:left">Nonpersistent CSMA</td><td style="text-align:center">非坚持CSMA</td><td style="text-align:right">它并不持续侦听信道，而是在冲突时，等待随机的一段时间；它有更好的信道利用率，但导致更长延迟</td></tr><tr><td style="text-align:left">1-persistent CSMA</td><td style="text-align:center">1坚持CSMA</td><td style="text-align:right">当信道忙或发生冲突时，要发送帧的站，不断持续侦听，一有空闲，便可发送；其中，长的传播延迟和同时发送帧，会导致多次冲突，降低系统性能</td></tr><tr><td style="text-align:left">p-persistent CSMA</td><td style="text-align:center">p坚持CSMA</td><td style="text-align:right">它应用于分槽信道，按照P概率发送帧；即信道空闲时，这个时槽，欲发送的站P概率发送，Q=1-P概率不发送；若不发送，下一时槽仍空闲，同理进行发送；若信道忙，则等待下一时槽，若冲突，则等待随机的一段时间，重新开始.</td></tr><tr><td style="text-align:left">Token Ring</td><td style="text-align:center">令牌环</td><td style="text-align:right">令牌传递协议中，由于令牌的传递所形成的节点相连的环状结构</td></tr><tr><td style="text-align:left">(Wireless) LAN</td><td style="text-align:center">(无线)局域网</td><td style="text-align:right">在某一区域内由多台计算机互联成的计算机组</td></tr><tr><td style="text-align:left">Hub</td><td style="text-align:center">集线器</td><td style="text-align:right">物理层设备，作用于各个比特，重新生成这个比特，将其能量强度放大，并将该比特向其他所有接口传输出去；不能隔离冲突域</td></tr><tr><td style="text-align:left">Collision domain</td><td style="text-align:center">冲突域</td><td style="text-align:right">在以太网中，如果某个CSMA/CD网络上的两台计算机在同时通信时会发生冲突，那么这个CSMA/CD网络就是一个冲突域</td></tr><tr><td style="text-align:left">Bridge</td><td style="text-align:center">网桥</td><td style="text-align:right">早期的两端口二层网络设备，用来连接不同网段；可隔离冲突域；也叫桥接器，是连接两个局域网的一种存储/转发设备，它能将一个大的LAN分割为多个网段，或将两个以上的LAN互联为一个逻辑LAN，使LAN上的所有用户都可访问服务器</td></tr><tr><td style="text-align:left">subnet mask</td><td style="text-align:center">子网掩码</td><td style="text-align:right">将某个IP地址划分成网络地址和主机地址两部分</td></tr><tr><td style="text-align:left">MTU（Maximum Transmission Unit）</td><td style="text-align:center">最大传输单元</td><td style="text-align:right">种通信协议的某一层上面所能通过的最大数据报大小（以字节为单位）</td></tr><tr><td style="text-align:left">DHCP（Dynamic Host Configuration Protocol）</td><td style="text-align:center">动态主机设置协议</td><td style="text-align:right">一个局域网的网络协议，使用UDP协议工作，主要有两个用途：用于内部网或网络服务供应商自动分配IP地址；给用户用于内部网管理员作为对所有计算机作中央管理的手段</td></tr><tr><td style="text-align:left">HTTP</td><td style="text-align:center">超文本传输协议</td><td style="text-align:right">一种网络协议，用于从WWW服务器传输超文本到本地浏览器</td></tr><tr><td style="text-align:left">SR（selective repeat）</td><td style="text-align:center">选择重传</td><td style="text-align:right">通过让发送方仅重传那些它怀疑在接收方出错（即丢失或受损）的分组而避免了不必要的重传</td></tr></tbody></table><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><blockquote><p>推荐qjm的计网复习资料<br><a href="https://sunnyqjm.github.io/2018/05/05/computer_networking_01/" target="_blank" rel="noopener">Chapter 1</a><br><a href="https://sunnyqjm.github.io/2018/05/06/computer_networking_02/" target="_blank" rel="noopener">Chapter 2</a><br><a href="https://sunnyqjm.github.io/2018/05/09/computer_networking_03/" target="_blank" rel="noopener">Chapter 3</a><br><a href="https://sunnyqjm.github.io/2018/05/19/computer_networking_04/" target="_blank" rel="noopener">Chapter 4</a><br><a href="https://sunnyqjm.github.io/2018/05/21/computer_networking_05/" target="_blank" rel="noopener">Chapter 5</a></p></blockquote><blockquote><p>推荐CHOOOU的《计算机网络：自顶向下的方法 第六版》课后习题答案<br><a href="https://blog.csdn.net/one_of_a_kind/article/details/82502936" target="_blank" rel="noopener">第一章</a><br><a href="https://blog.csdn.net/one_of_a_kind/article/details/82824938" target="_blank" rel="noopener">第二章</a><br><a href="https://blog.csdn.net/one_of_a_kind/article/details/82933106" target="_blank" rel="noopener">第三章</a><br><a href="https://blog.csdn.net/one_of_a_kind/article/details/83050360" target="_blank" rel="noopener">第四章</a><br><a href="https://blog.csdn.net/one_of_a_kind/article/details/83118052" target="_blank" rel="noopener">第五章</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用extundelete恢复linux上已删除的文件</title>
      <link href="/2019/04/16/%E4%BD%BF%E7%94%A8extundelete%E6%81%A2%E5%A4%8Dlinux%E4%B8%8A%E5%B7%B2%E5%88%A0%E9%99%A4%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/2019/04/16/%E4%BD%BF%E7%94%A8extundelete%E6%81%A2%E5%A4%8Dlinux%E4%B8%8A%E5%B7%B2%E5%88%A0%E9%99%A4%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a>参考网址</h1><p><a href="https://blog.51cto.com/ityunwei2017/2328570?source=dra" target="_blank" rel="noopener">https://blog.51cto.com/ityunwei2017/2328570?source=dra</a></p><p><a href="http://extundelete.sourceforge.net/" target="_blank" rel="noopener">http://extundelete.sourceforge.net/</a></p><a id="more"></a><p><a href="https://sourceforge.net/p/extundelete/tickets/5/" target="_blank" rel="noopener">https://sourceforge.net/p/extundelete/tickets/5/</a></p><h1 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h1><ol><li><p>找不到库文件</p></li><li><p>源程序出错，需要打补丁</p></li><li><p>最后发现被删除的文件所在的文件系统不是ext3/ext4</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YouCompleteMe安装配置使用</title>
      <link href="/2019/04/04/YouCompleteMe%E5%AE%89%E8%A3%85/"/>
      <url>/2019/04/04/YouCompleteMe%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="vim相关"><a href="#vim相关" class="headerlink" title="vim相关"></a>vim相关</h1><p>vim的version必须为7.4+，同时要支持Python/Python3，查看命令<code>vim --version</code>，支持的话，前面会有<code>+</code>，否则为<code>-</code></p><p>如果不支持Python或者vim版本太低，需要重新编译安装vim</p><a id="more"></a><p>参考：</p><p><a href="https://www.jianshu.com/p/aac78ff576c5" target="_blank" rel="noopener">https://www.jianshu.com/p/aac78ff576c5</a>中的<code>./configure</code>参数选项</p><p><a href="https://blog.csdn.net/a464057216/article/details/52821171" target="_blank" rel="noopener">https://blog.csdn.net/a464057216/article/details/52821171</a>中的流程</p><h1 id="安装vim的vundle插件管理器"><a href="#安装vim的vundle插件管理器" class="headerlink" title="安装vim的vundle插件管理器"></a>安装vim的vundle插件管理器</h1><p>参考：</p><p><a href="https://blog.csdn.net/zhangpower1993/article/details/52184581" target="_blank" rel="noopener">https://blog.csdn.net/zhangpower1993/article/details/52184581</a>，注意，将要复制到<code>.vimrc</code>中的配置信息的示例插件安装的内容注释掉，即将没有必须要求的部分注释掉，避免安装上示例插件导致速度很慢</p><h1 id="安装YouCompleteMe"><a href="#安装YouCompleteMe" class="headerlink" title="安装YouCompleteMe"></a>安装YouCompleteMe</h1><p>参考：</p><p><a href="https://www.jianshu.com/p/4cbdadab3ad0" target="_blank" rel="noopener">https://www.jianshu.com/p/4cbdadab3ad0</a>中的主要流程</p><p>完成最后一步时，会出错，提醒你先执行命令，<code>git submodule update --init --recursive</code>，执行即可，确保网络通畅</p><p>然后再执行<code>./install.py --all</code>或者<code>./install.py --all</code>，执行到最后可能会提示，没有<code>msbuild</code>和<code>xbuild</code>，这两个家伙貌似是用来支持C#的，如果不需要C#的话，可以不管，需要的话，再看吧</p><p>参考：</p><p><a href="https://blog.csdn.net/lyh__521/article/details/46295775" target="_blank" rel="noopener">https://blog.csdn.net/lyh__521/article/details/46295775</a></p><p>主要是将YouCompleteMe通过vundle安装，即修改<code>.vimrc</code>，再在vim中执行<code>PluginInstall</code></p><p>最重要的是，在<code>.vimrc</code>中添加<code>let g:ycm_global_ycm_extra_conf = &#39;~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py&#39;</code>，注意将后面的地址改成你的<code>.ycm_extra_conf.py</code>文件的地址，注意<code>list -a</code>，这个文件找找吧，找找就有了</p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>chrome视频画面卡顿，声音无影响</title>
      <link href="/2019/04/02/chrome%E8%A7%86%E9%A2%91%E7%94%BB%E9%9D%A2%E5%8D%A1%E9%A1%BF%EF%BC%8C%E5%A3%B0%E9%9F%B3%E6%97%A0%E5%BD%B1%E5%93%8D/"/>
      <url>/2019/04/02/chrome%E8%A7%86%E9%A2%91%E7%94%BB%E9%9D%A2%E5%8D%A1%E9%A1%BF%EF%BC%8C%E5%A3%B0%E9%9F%B3%E6%97%A0%E5%BD%B1%E5%93%8D/</url>
      
        <content type="html"><![CDATA[<p>Chrome的话，使用WebRTC，本身不支持H.264（国内视频网站多用这个来编码），但是支持VP8（目前主流，Youtube使用VP8（性能和H264差不多）,现在逐步走向VP9（性能和H265差不多），所以H264采用的是外部的解码，因此可能性能上会略差。 另外实际测试的时候，相同掉包率情况下，VP8的画面丢失和花屏的情况要远好过H264（WebRTC下）。转自知乎<a href="https://www.zhihu.com/question/24577802/answer/30131255" target="_blank" rel="noopener">Lennith的回答</a></p><a id="more"></a><p>在chrome中输入chrome://flags, Ctrl+F全局搜索hardware， 找到如下内容， 并禁用即可</p><p><img alt="WebRTC H.264 software video encoder/decoder" data-src="0.png"></p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Deepin扩展显示屏失败</title>
      <link href="/2019/03/21/Deepin%E6%89%A9%E5%B1%95%E6%98%BE%E7%A4%BA%E5%B1%8F%E5%A4%B1%E8%B4%A5/"/>
      <url>/2019/03/21/Deepin%E6%89%A9%E5%B1%95%E6%98%BE%E7%A4%BA%E5%B1%8F%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>问题描述：在Deepin下，扩展的显示屏不显示，但是发光，在win10下不存在问题<br><a id="more"></a><br>解决方法：Deepin在屏幕亮度为0时，屏幕全黑，所以到设置里把扩展的显示屏的亮度调高就行了</p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTP命令问题解决</title>
      <link href="/2019/03/15/FTP%E5%91%BD%E4%BB%A4%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/03/15/FTP%E5%91%BD%E4%BB%A4%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<ul><li>发现系统中没有ftp命令，安装ftp</li><li>ftp连接到树莓派失败，显示<code>ftp:connect:Connection refused</code>，尝试127.0.0.1一样</li><li>猜测可能是21端口未开放，执行<code>netstat -tln</code>查看端口号情况，发现确实如此</li><li>尝试vsftpd，没有该命令，安装vsftpd</li><li>执行vsftpd，显示<code>500 OOPS: could not bind listening IPv6 socket</code>，问题不大，因为不需要用到ipv6<a id="more"></a></li><li>这时再查看端口情况，会发现21号端口已经在监听</li><li>尝试连接本地，<code>ftp 127.0.0.1</code>成功</li><li>尝试连接树莓派，失败，按前面的方法打开树莓派的21号端口</li><li>在树莓派安装vsftpd，执行vsftpd，显示<code>500 OOPS: config file not owned by correct user, or not a file</code>，问题不大</li><li>成功连接</li></ul><ul><li>成功get文件，但put文件失败</li><li>在修改<code>/etc/vsftpd.conf</code>，将<code>write_enable=YES</code>前面的#取消。 </li><li><p>重启vsftp服务器<code>sudo service vsftpd restart</code>，启动ftp服务<code>sudo service vsfptd start</code></p></li><li><p>注意<code>vsftpd.conf</code>文件中<code>listen=YES</code>和<code>listen_ipv6=YES</code>只能选一个, 前者开启tcp的21端口监听, 后者开启tcp6的21端口监听</p></li><li><p>两个都注释, 默认开启tcp6的21端口监听</p></li><li><p>注意: 对于阿里云的服务器, 需要添加安全组规则, 即添加21端口开放, 其中<code>0.0.0.0/0</code>表示任何ipv4地址都可以访问</p></li><li><p>ftp用户名和密码的确认, 参考<a href="https://blog.csdn.net/JoeBlackzqq/article/details/6954334" target="_blank" rel="noopener">https://blog.csdn.net/JoeBlackzqq/article/details/6954334</a></p></li><li><p>关于ftp的主动模式和被动模式, 参考<a href="https://www.cnblogs.com/xiaohh/p/4789813.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaohh/p/4789813.html</a></p></li><li><p>注意: 作为匿名用户时, 需要开启创建文件夹和上传文件的权限</p></li><li><p>不建议作为匿名用户访问, 将会出现很多权限问题, 直接访问根目录</p></li><li><p>本地用户无法登录, 密码错误: 将<code>vsftpd.conf</code>中的<code>pam_service_name=vsftpd</code>改为<code>pam_service_name=ftp</code>, 参考自<a href="https://www.cnblogs.com/yjunzhang/p/3541094.html" target="_blank" rel="noopener">https://www.cnblogs.com/yjunzhang/p/3541094.html</a></p></li><li><p>被动模式连接超时, 参考<a href="http://bbs.qcloud.com/thread-1343-1-1.html" target="_blank" rel="noopener">http://bbs.qcloud.com/thread-1343-1-1.html</a></p></li><li><p>关于selinux, 参考<a href="https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA%E5%BC%8FLinux" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA%E5%BC%8FLinux</a></p></li><li><p>关于umask, 参考<a href="https://baike.baidu.com/item/umask" target="_blank" rel="noopener">https://baike.baidu.com/item/umask</a></p></li><li><p>修改linux用户密码, 参考<a href="https://blog.csdn.net/u011630575/article/details/49821281" target="_blank" rel="noopener">https://blog.csdn.net/u011630575/article/details/49821281</a></p></li><li><p>关于linux用户(组)管理与权限设定, 参考<a href="https://blog.csdn.net/zyqblog/article/details/79226826#12-%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%88%A0%E9%99%A4-groupuser" target="_blank" rel="noopener">https://blog.csdn.net/zyqblog/article/details/79226826#12-%E7%BB%84%E5%92%8C%E7%94%A8%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%88%A0%E9%99%A4-groupuser</a></p></li><li><p>关于无法put文件, 需要首先lcd到本地目录, 再直接上传该目录下的文件, 不能使用绝对路径或者相对路径, 参考<a href="https://blog.csdn.net/anzhen0429/article/details/75151173" target="_blank" rel="noopener">https://blog.csdn.net/anzhen0429/article/details/75151173</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核源码分析</title>
      <link href="/2019/03/10/Linux%E6%BA%90%E7%A0%81/"/>
      <url>/2019/03/10/Linux%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如何获取linux内核源码？<br>一般来讲，在安装的linux系统下，/usr/src/linux目录下的东西就是内核源代码。还可以从互联网上下载,解压缩后文件一般也都位于linux目录下。</p></blockquote><blockquote><p>Linux内核源码查看网址推荐：<a href="https://elixir.bootlin.com/linux/latest/source" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/latest/source</a></p></blockquote><a id="more"></a><p>Linux内核源码的组成（假设相对于linux目录）：</p><ol><li>arch：包含了此核心源代码所支持的硬件体系结构相关的核心代码，如对于X86平台就是i386</li><li>include： 包含了核心的大多数include文件，另外对于每种支持的体系结构分别有一个子目录</li><li>init：包含了核心启动代码</li><li>mm：包含了所有的内存管理代码</li><li>net：核心的网络部分代码，里面的每个子目录对应于网络的一个方面</li><li>lib：包含了核心的库代码</li><li>scripts：用于配置核心的脚本文件</li><li>Documentation：一些文档，起参考作用</li><li>block：块I/O层</li><li>crypto：加密API</li><li>drivers：设备驱动</li><li>firmware：使用某个驱动需要的设备固件</li><li>fs：VFS和独立文件系统</li><li>ipc：进程间通信</li><li>samples：示例代码</li><li>security：Linux安全模块</li><li>sound：声音子系统</li><li>usr：早期的用户空间代码（叫做initramfs）</li><li>tools：辅助Linux开发的工具</li><li>virt：虚拟化基础设施</li><li>COPYING：内核许可描述文件</li><li>CREDITS：参与Linux内核的开发人员名单</li><li>MAINTAINERS：维护各个子系统和驱动的个人</li><li>Makefile：内核Makefile的基础</li><li>Kbuild：kernel build的意思，即内核编译的意思，linux内核特有的内核编译体系需要用到的文件</li><li>modules：存放了已建好的、可动态加载的模块文件目录，是个空目录，用于存放编译时产生的模块目标文件</li><li>README：核心及其编译配置方法简单介绍</li><li>Kconfig：配置内核时脚本，里面包含了可选项和菜单功能</li></ol><p><img alt="Linux内核源码目录结构" data-src="Linux内核源码目录结构.jpg"></p><blockquote><p>阅读内核源码方式推荐：<br>开始最好按顺序阅读启动代码，然后进行专题阅读，如进程部分、内存管理部分等<br>使用Source Insight阅读源代码</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令集合</title>
      <link href="/2019/03/08/Linux%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/"/>
      <url>/2019/03/08/Linux%E5%91%BD%E4%BB%A4%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>以下为一些日常积累的Linux的命令：</p><a id="more"></a><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:right">说明</th></tr></thead><tbody><tr><td style="text-align:left">alias</td><td style="text-align:right">显示所有命令的别名，可在/etc/bash.bashrc中永久设置别名，source /etc/bash.bashrc 生效</td></tr><tr><td style="text-align:left">ps</td><td style="text-align:right">得到进程列表，-el 获得所有当前活动进程的完整信息</td></tr><tr><td style="text-align:left"><a href="https://www.cnblogs.com/peida/archive/2013/03/07/2947326.html" target="_blank" rel="noopener">traceroute</a></td><td style="text-align:right">知道信息从你的计算机到互联网另一端的主机走的什么路径，在Windows中为tracert</td></tr><tr><td style="text-align:left"><a href="http://www.cnblogs.com/peida/archive/2013/03/13/2956992.html" target="_blank" rel="noopener">telnet</a></td><td style="text-align:right">用来远程登录，采用明文传送报文</td></tr><tr><td style="text-align:left"><a href="http://man.linuxde.net/ftp" target="_blank" rel="noopener">ftp</a></td><td style="text-align:right">文件传输协议命令</td></tr><tr><td style="text-align:left"><a href="http://www.cnblogs.com/peida/archive/2013/03/08/2949194.html" target="_blank" rel="noopener">netstat</a></td><td style="text-align:right">查看系统端口号情况，还有lsof命令也可以</td></tr><tr><td style="text-align:left"><a href="https://www.ezloo.com/2011/04/nslookup.html" target="_blank" rel="noopener">nslookup</a></td><td style="text-align:right">查询DNS的记录，查看域名解析是否正常，在网络故障的时候用来诊断网络问题</td></tr><tr><td style="text-align:left">logout 或 Ctrl+D</td><td style="text-align:right">断开ssh连接</td></tr><tr><td style="text-align:left">xrandr</td><td style="text-align:right">查看屏幕连接状况</td></tr><tr><td style="text-align:left">grep</td><td style="text-align:right">文本搜索（通过正则表达式）</td></tr><tr><td style="text-align:left">pwd</td><td style="text-align:right">输出当前所在目录</td></tr><tr><td style="text-align:left">find</td><td style="text-align:right">查找文件</td></tr><tr><td style="text-align:left">more</td><td style="text-align:right">类似于cat的，查看文件内容，可以分页</td></tr><tr><td style="text-align:left">命令 &gt; 输出文件</td><td style="text-align:right">将命令的结果输出的对应文件，重定向，&gt;&gt; 用于在后面追加</td></tr><tr><td style="text-align:left">echo</td><td style="text-align:right">用于在shell中打印shell变量的值，或者直接输出指定的字符串</td></tr><tr><td style="text-align:left">free</td><td style="text-align:right">查看内存使用情况</td></tr><tr><td style="text-align:left">touch</td><td style="text-align:right">两个功能：一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；二是用来创建新的空文件</td></tr><tr><td style="text-align:left">top</td><td style="text-align:right">查看进程</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的一些坑</title>
      <link href="/2019/02/16/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2019/02/16/Python%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<ul><li>Python中没有自增或自减运算符，即没有<code>++</code>或<code>--</code></li></ul><a id="more"></a><ul><li>python对文件内容进行<code>write</code>操作时, 会以写入内容覆盖当前内容, 但是后面未覆盖的不会清除, 所以需要使用<code>truncate</code>方法先清空后面的内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (extra notes)</title>
      <link href="/2018/12/31/Intercultural-Communication-extra-notes/"/>
      <url>/2018/12/31/Intercultural-Communication-extra-notes/</url>
      
        <content type="html"><![CDATA[<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><blockquote><p><code>interlink</code></p></blockquote><a id="more"></a><blockquote><p>Q: What is <code>genocide</code>?<br>A:</p><ul><li>Subtle nonverbal behavior: a dirty look</li><li>Obscene hand gestures</li><li>Arms-length prejudice</li><li>Verbal insults</li><li>Exclusion from job or other opportunites</li><li>Physical violence</li><li>Systematic elimination of the group</li></ul></blockquote><p><img alt="A model of ICC" data-src="0.png"></p><blockquote><p>Q: <code>Functions of Nonverbal Communication</code>:<br>A:</p><ol><li>We use nonverbal communication to <code>duplicate</code> verbal communication.</li><li>replace</li><li>complement</li><li>accent</li><li>regulate</li><li>contradict</li></ol></blockquote><blockquote><p>能联系<code>ICC</code>，就<code>联系</code>ICC</p></blockquote><blockquote><ul><li>Use <code>key words</code> to <code>remember</code>.</li><li>Use <code>sentences to</code> <code>answer</code>.</li></ul></blockquote><blockquote><p>Q: What is <code>culture shock</code>?<br>A: <code>anxiety</code> resulting from the <code>disorientation</code> encountered upon entering <code>a new culture</code>.</p><ol><li>estrangement</li><li>hostility</li><li>frustration</li><li>fear</li><li>anger</li><li>even physical illness</li></ol></blockquote><blockquote><p><code>Knowledge</code></p><ol><li><code>Declarative</code> knowledge (‘know <code>that</code>‘)<br>a. Knowledge about other countries and the identities of interlocutor.<br>b. Knowledge about one’s own culture.</li><li>Procedural knowledge (‘know <code>how</code>‘)<br>a. How to act in specific circumstances.<br>b. How to respond to specific features of interaction with a particular individual</li></ol></blockquote><blockquote><p><code>Skills</code></p><ol><li><code>Interpreting</code>: the ability to explain a document from one country for someone from another.</li><li><code>Relating</code>: the ability to identify or establish relationships between documents from different countries.</li><li><code>Discovery</code>: the ability to recognize significant phenomena in a foriegn environment to dicit their meanings and connotations and their relationship to other phenomena.</li><li><code>Interaction</code>: the ability to manage these constraints in particular circumstances with specific interlocutors.</li></ol></blockquote><blockquote><p><code>Critical cultural awareness</code></p><ol><li>An ability to evaluate critically and on the basis of explicit criteria perspective, practices and products in one’s own and other countries and cultures.</li><li>To identify evaluate and mediate in intercultural communication.</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (11)</title>
      <link href="/2018/12/31/Intercultural-Communication-11/"/>
      <url>/2018/12/31/Intercultural-Communication-11/</url>
      
        <content type="html"><![CDATA[<h1 id="Principles-and-strategies-of-intercultural-communication"><a href="#Principles-and-strategies-of-intercultural-communication" class="headerlink" title="Principles and strategies of intercultural communication"></a>Principles and strategies of intercultural communication</h1><h2 id="Cooperative-principle"><a href="#Cooperative-principle" class="headerlink" title="Cooperative principle"></a>Cooperative principle</h2><a id="more"></a><blockquote><p>Q: What is cooperative principle?<br>A: </p><ul><li>How effective communication in conversation is achieved in common social situations, that is, how <code>listeners and speaker</code>s must act <code>cooperatively and mutually</code> accept one another to be understood in a particular way.</li><li>Make your <code>contribution</code> such as is required, at the stage at which it occurs, by the accepted purpose or direction of the talk exchange in which you are engaged.</li></ul></blockquote><blockquote><ul><li><code>Speakers</code> (generally) <code>observe</code> the cooperative principle.</li><li><code>Listeners</code> (generally) <code>assume</code> that speakers are observing it.</li></ul></blockquote><blockquote><p>Q: What are the conversational maxims?<br>A: </p><ol><li><strong>Maxim of quantity (quantity of information)</strong><br>Give the most helpful amount of information.</li><li><strong>Maxim of quality (quality of information)</strong><br>Do not say what you believe to be false.</li><li><strong>Maxim of relation</strong><br>Be relevant.</li><li><strong>Maxim of manner</strong><br>Put what you say in the clearest, briefest, and most orderly manner.</li></ol></blockquote><p>&amp;&amp;&amp;&amp;&amp;</p><p>Different criterion and violations for different maxims:</p><table><thead><tr><th style="text-align:left">Criterion</th><th style="text-align:right">Violations</th></tr></thead><tbody><tr><td style="text-align:left">Informativeness</td><td style="text-align:right">Redundancy, repetition, excessive brevity</td></tr><tr><td style="text-align:left">Truth</td><td style="text-align:right">Exaggeration, fantastic, description</td></tr><tr><td style="text-align:left">Relevance</td><td style="text-align:right">Digression</td></tr><tr><td style="text-align:left">Clarity</td><td style="text-align:right">Vagueness, obliqueness, metaphor</td></tr></tbody></table><h2 id="Breaking-the-maxims"><a href="#Breaking-the-maxims" class="headerlink" title="Breaking the maxims"></a>Breaking the maxims</h2><blockquote><ul><li>violate</li><li>flout</li></ul></blockquote><hr><p><a href="https://didongdongdi.github.io/2018/12/31/Intercultural-Communication-extra-notes/">Next Lecture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (10)</title>
      <link href="/2018/12/30/Intercultural-Communication-10/"/>
      <url>/2018/12/30/Intercultural-Communication-10/</url>
      
        <content type="html"><![CDATA[<h1 id="Barriers-to-Intercultural-Communication"><a href="#Barriers-to-Intercultural-Communication" class="headerlink" title="Barriers to Intercultural Communication"></a>Barriers to Intercultural Communication</h1><h2 id="Ethnocentrism"><a href="#Ethnocentrism" class="headerlink" title="Ethnocentrism"></a>Ethnocentrism</h2><blockquote><p>Q: What is <code>Ethnocentrism</code>?<br>A: The act of <code>judging</code> another culture based on <code>preconceptions</code> that are found in <code>values and standards</code> of one’s own culture.</p></blockquote><a id="more"></a><blockquote><p><code>Ethnocentrism</code> often leads to <code>pride, vanity, belief</code> in one’s own group’s superiority, and <code>contempt</code> for outsiders.</p></blockquote><h2 id="Stereotyping"><a href="#Stereotyping" class="headerlink" title="Stereotyping"></a>Stereotyping</h2><blockquote><p>Q: What is <code>stereotyping</code>?<br>A: It is a form of <code>generalization</code>, a way of <code>categorizing</code> and <code>processing</code> infomation we receive about others in our daily life.</p></blockquote><blockquote><ul><li>Nazi Germany</li><li>Imperialism</li><li>Terrorism and Hate Crimes</li></ul></blockquote><blockquote><p>In social psychology, a stereotype is an <code>over-generalized belief</code> about a particular category of people.</p></blockquote><blockquote><p>Stereotypes create a <code>barrier</code> that leads to <code>prejudice</code>, <code>leading</code> one to an <code>assumption</code> based on a <code>stereotype</code>.</p></blockquote><h3 id="Common-Stereotypes"><a href="#Common-Stereotypes" class="headerlink" title="Common Stereotypes"></a>Common Stereotypes</h3><blockquote><ul><li>Racial Profiling</li><li>Gender Profiling</li><li>Culture</li><li>Group of Individuals</li></ul></blockquote><blockquote><p><code>A negative attitude</code> toward a cultural group based on <code>little or no</code> experience.</p></blockquote><blockquote><p>The <code>behavior</code> that result from <code>stereotyping</code> or <code>prejudice</code>:</p><ul><li>Overt action to exclude</li><li>Avoid or distance oneself from certain groups based on stereotypes.</li></ul></blockquote><h2 id="Prejudice"><a href="#Prejudice" class="headerlink" title="Prejudice"></a>Prejudice</h2><blockquote><p><code>Irrational</code>, <code>preconceived</code> opinion that leads to <code>preferential</code> treatment to some people and unfavorable <code>bias or hostility</code> against others, due to <code>ignorance</code> (or in direct <code>contradiction</code>) of facts.</p></blockquote><h2 id="Discrimination"><a href="#Discrimination" class="headerlink" title="Discrimination"></a>Discrimination</h2><blockquote><p>In human social affairs, dicrimination is <code>treatment</code> or <code>consideration</code> of, or making a <code>distinction</code> in favor of or against, a person based on the <code>group, class, or category</code> to which the person is perceived to belong.</p></blockquote><h2 id="How-to-Overcome-Culture-Shock-in-a-Foreign-Country"><a href="#How-to-Overcome-Culture-Shock-in-a-Foreign-Country" class="headerlink" title="How to Overcome Culture Shock in a Foreign Country"></a>How to Overcome Culture Shock in a Foreign Country</h2><ol><li>Keep an open <code>mind</code></li><li>Make an effort to learn the local <code>language</code></li><li>Get acquainted with the social <code>conduct</code> of your new environment</li><li>Do not take cultural familiarity or knowledge at <code>face-value</code></li><li>Make sure you get to know <code>people</code> in your new environment</li><li>Try to achieve a sense of <code>stability</code> in your life</li><li>Most importantly, maintain a sense of <code>humor</code></li></ol><h1 id="Course-Notes"><a href="#Course-Notes" class="headerlink" title="Course Notes"></a>Course Notes</h1><blockquote><ol><li>Avoid using slang and idioms specific denotative meaning</li><li>Ask for confirmation</li><li>Accenting and intonation</li><li>Local communication formalities and styles, watch for any changes in body language.</li><li>Investigate perception</li><li>Humor is risky</li></ol></blockquote><blockquote><p>Attitudes</p><ol><li>Curiosity and openness</li><li>Readiness to suspend disbelief and judgement with respect to others’ meanings, beliefs and behaviors</li><li>Empathy</li><li>Relativizing self and valuing others</li></ol></blockquote><hr><p><a href="https://didongdongdi.github.io/2018/12/31/Intercultural-Communication-11/">Next Lecture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (9)</title>
      <link href="/2018/11/21/Intercultural-Communicaiton-9/"/>
      <url>/2018/11/21/Intercultural-Communicaiton-9/</url>
      
        <content type="html"><![CDATA[<h1 id="Culture-Shock"><a href="#Culture-Shock" class="headerlink" title="Culture Shock"></a>Culture Shock</h1><h2 id="What-Is-the-Meaning-of-Acculturation"><a href="#What-Is-the-Meaning-of-Acculturation" class="headerlink" title="What Is the Meaning of Acculturation"></a>What Is the Meaning of Acculturation</h2><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br><code>Acculturation</code> is the process of <code>modificating</code> one’s <code>attitudes, knowledge and behavior</code>.</p></blockquote><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: What is Acculturation ?<br>A: It is a <strong>process</strong> through which a person or group from one culture comes to <strong>adopt</strong> practices and values of another culture, while still <strong>retaining</strong> their own distinct culture.</p></blockquote><a id="more"></a><blockquote><p>Acculturation is a <strong>two-way</strong> process.</p></blockquote><blockquote><p>Q: What outcomes dose the acculturation process can have ?<br>A: Assimilation, rejection, integration, marginalization, and transmutation.</p></blockquote><h2 id="Intercultural-Adaptation-Learning-Opportunity-to-Everyone"><a href="#Intercultural-Adaptation-Learning-Opportunity-to-Everyone" class="headerlink" title="Intercultural Adaptation-Learning Opportunity to Everyone"></a>Intercultural Adaptation-Learning Opportunity to Everyone</h2><blockquote><p>Adaptation and Learning</p></blockquote><h3 id="Intercultural-adaptation-is-everywhere"><a href="#Intercultural-adaptation-is-everywhere" class="headerlink" title="Intercultural adaptation is everywhere"></a>Intercultural adaptation is everywhere</h3><blockquote><p>Q: What is the important factor predicting adaptation to a new culture ?<br>A: The amount of participation in a new culture milieu.</p></blockquote><blockquote><p>Q: What is the heart of intercultural adaptation process ?<br>A: Communication.</p></blockquote><h3 id="Learn-together-Learn-from-each-other"><a href="#Learn-together-Learn-from-each-other" class="headerlink" title="Learn together - Learn from each other"></a>Learn together - Learn from each other</h3><blockquote><p>Q: How a process does intercultural learning is ?<br>A: A <strong>dynamic</strong>, <strong>developmental</strong>, and <strong>on-going</strong> process.</p></blockquote><blockquote><p>Q: What does the culture shock model show about intercultural adaptation ?<br>A: A process starting with very <strong>positive</strong> feelings in the beginning, followed by a <strong>drop</strong> in satisfaction and ending with <strong>recovery</strong>.</p></blockquote><blockquote><p>In sharp <strong>contrast</strong> to culture shock models are the models that emphasise the <strong>learning</strong> and <strong>growth-facilitating</strong> nature of the adaptation process.<br>For example,</p><ul><li>the <strong>dialectical</strong> model explains intercultural adaptation as a <strong>cyclical</strong> and <strong>recursive</strong> process.</li><li>the mutual learning model are based on <strong>cooperation</strong> and <strong>respect</strong>.<blockquote><ul><li>By this model, people follow the <strong>principles</strong> of curiosity, commitment and transparency. </li><li>The mutual learning process has <strong>consequences</strong> for both behavior and learning. </li><li>People start to behave without <strong>fear</strong>, interpersonal relationships become more <strong>facilitative</strong>, and people feel <strong>free</strong> to explore and search for new information and new alternatives.</li></ul></blockquote></li></ul></blockquote><blockquote><p>Q: When does intercultural learning takes place most effectively ?<br>A: When people act in the real world.</p></blockquote><blockquote><p>Experiences != Learning</p></blockquote><h3 id="Levels-of-cross-cultural-awareness-4"><a href="#Levels-of-cross-cultural-awareness-4" class="headerlink" title="Levels of cross-cultural awareness (4)"></a>Levels of cross-cultural awareness (4)</h3><blockquote><p>Q: What is the leading factor in intercultural adaptation and understanding emphasized by this model ?<br>A: Intercultural contact.</p></blockquote><blockquote><p>Q: What are the four levels ?<br>A: </p><blockquote><ul><li><strong>First</strong>: A person is aware of <strong>superficial</strong> and very <strong>obvious</strong> cultural traits.</li><li><strong>Second</strong>: People become aware of <strong>significant</strong> and <strong>subtle</strong> cultural traits.</li><li><strong>Third</strong>: People are aware of <strong>significant</strong> and <strong>subtle</strong> cultural traits.</li><li><strong>Fourth</strong>: People become aware of how another culture <strong>feels</strong> from the standpoint of an <strong>insider</strong>.</li></ul></blockquote></blockquote><h2 id="The-4-Stages-of-Culture-Shock"><a href="#The-4-Stages-of-Culture-Shock" class="headerlink" title="The 4 Stages of Culture Shock"></a>The 4 Stages of Culture Shock</h2><h3 id="The-Honeymoon-Stage"><a href="#The-Honeymoon-Stage" class="headerlink" title="The Honeymoon Stage"></a>The Honeymoon Stage</h3><blockquote><p>During which travelers become <code>infatuated</code> with the language, people and food in their new surroundings.</p></blockquote><h3 id="The-Frustration-Stage"><a href="#The-Frustration-Stage" class="headerlink" title="The Frustration Stage"></a>The Frustration Stage</h3><blockquote><p>It is <code>familiar</code> to anyone who has lived abroad or who travels frequently.</p></blockquote><blockquote><p>Q: What are the features during the frustration stage ?<br>A: Bouts of <code>depression</code> or <code>homesick</code> and feelings of longing to <code>go home</code>.</p></blockquote><h3 id="The-Adjustment-Stage"><a href="#The-Adjustment-Stage" class="headerlink" title="The Adjustment Stage"></a>The Adjustment Stage</h3><h3 id="The-Acceptance-Stage"><a href="#The-Acceptance-Stage" class="headerlink" title="The Acceptance Stage"></a>The Acceptance Stage</h3><blockquote><p>Acceptance <code>doesn&#39;t mean</code> that new cultures or environments are completely understood, rather it signifies realization that complete understanding <code>isn&#39;t necessary</code> to function and thrive in the new surroundings.</p></blockquote><h1 id="Course-Notes"><a href="#Course-Notes" class="headerlink" title="Course Notes"></a>Course Notes</h1><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: What is culture conflict ?<br>A: It is a type of conflict that occurs when different culture <code>values and beliefs</code> clash.</p></blockquote><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: What are the features of culture ?<br>A: </p><blockquote><ul><li>multi-layered</li><li>constantly in flux</li><li>clastic</li><li>largely below the surface</li></ul></blockquote></blockquote><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: The definition of acculturation.<br>A: It refers to the <code>social</code> and <code>psychological</code> integration of the learner with the target language group.</p></blockquote><p>&amp;&amp;&amp;&amp;&amp;</p><p>Culture Shock Stages</p><table><thead><tr><th style="text-align:left">Stages</th><th style="text-align:right">Descriptions</th></tr></thead><tbody><tr><td style="text-align:left">Honeymoon</td><td style="text-align:right">overwhelmingly positive, greatest, exciting</td></tr><tr><td style="text-align:left">Depression/frustration/hostility</td><td style="text-align:right">fatigue, frustration</td></tr><tr><td style="text-align:left">Adjustment</td><td style="text-align:right">more familiar and recognizable</td></tr><tr><td style="text-align:left">Acceptance</td><td style="text-align:right">travelers have the familiarity and are able to draw together the resources they need to feel at ease</td></tr></tbody></table><hr><p><a href="https://didongdongdi.github.io/2018/12/30/Intercultural-Communication-10/">Next Lecture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA 之 锁存器 (Latch)</title>
      <link href="/2018/11/08/FPGA-%E4%B9%8B-%E9%94%81%E5%AD%98%E5%99%A8-Latch/"/>
      <url>/2018/11/08/FPGA-%E4%B9%8B-%E9%94%81%E5%AD%98%E5%99%A8-Latch/</url>
      
        <content type="html"><![CDATA[<p>参考自<a href="http://www.eefocus.com/liuyuxue/blog/13-11/300280_d7008.html" target="_blank" rel="noopener">http://www.eefocus.com/liuyuxue/blog/13-11/300280_d7008.html</a></p><a id="more"></a><blockquote><p>信号赋初值以避免综合时出现锁存器。</p></blockquote><blockquote><p>注意警告。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FPGA-VHDL 门电路设计</title>
      <link href="/2018/10/31/PGA-VHDL-%E9%97%A8%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1/"/>
      <url>/2018/10/31/PGA-VHDL-%E9%97%A8%E7%94%B5%E8%B7%AF%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<ol><li>分析功能</li></ol><blockquote><p>输入 和 输出</p></blockquote><ol start="2"><li><p>画出真值表</p></li><li><p>写出逻辑表达式</p></li></ol><blockquote><p>最小项的或</p></blockquote><a id="more"></a><ol start="4"><li>将逻辑表达式化为最简形式</li></ol><blockquote><p>越简单越好</p></blockquote><ol start="5"><li>从最简形式，反推（二输入）与非门的组成</li></ol><blockquote><p>从（二输入）与非门开始，逐层封装，直到实现最简形式</p></blockquote><blockquote><p>使用与非门的原因是：<br>单纯用与非门可以实现任意逻辑表达式<br>与非门的经济性，在集成电路中，与非门和或非门是仅次于非门的第二简单的门<br>与非门比或非门性能好<br>参考自 <a href="https://www.zhihu.com/question/38788129/answer/78415573" target="_blank" rel="noopener">数字电路基础课程教学中，为什么总是要把逻辑式化简为与非-与非式，并在实际电路中用与非门实现？ - well xiong的回答 - 知乎</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA </tag>
            
            <tag> VHDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (7&amp;8)</title>
      <link href="/2018/10/31/Intercultural-Communication-7-8/"/>
      <url>/2018/10/31/Intercultural-Communication-7-8/</url>
      
        <content type="html"><![CDATA[<h1 id="Nonverbal-communication"><a href="#Nonverbal-communication" class="headerlink" title="Nonverbal communication"></a>Nonverbal communication</h1><h2 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h2><a id="more"></a><table><thead><tr><th style="text-align:left">BASIS FOR COMPARISON</th><th style="text-align:center">VERBAL</th><th style="text-align:right">NON-VERBAL </th></tr></thead><tbody><tr><td style="text-align:left">Meaning</td><td style="text-align:center">the sender uses words to transmit the message to the receiver</td><td style="text-align:right">take place between sender and receiver with the use of signs</td></tr><tr><td style="text-align:left">Types</td><td style="text-align:center">formal,informal</td><td style="text-align:right">Chronemics, Vocalics, Haptics, Kinesics, Proxemics, Artifacts, Oculesics, Paralanguage</td></tr><tr><td style="text-align:left">Time Consuming</td><td style="text-align:center">no</td><td style="text-align:right">yes</td></tr><tr><td style="text-align:left">Chances of transmission of wrong message</td><td style="text-align:center">rarely</td><td style="text-align:right">most of the time</td></tr><tr><td style="text-align:left">Documentary Evidence</td><td style="text-align:center">yes, in case of written commmunication</td><td style="text-align:right">no</td></tr><tr><td style="text-align:left">Advantage</td><td style="text-align:center">clearly understood and immediate feedback</td><td style="text-align:right">emotions, status, lifestyle, feelings of the sender</td></tr><tr><td style="text-align:left">Presence</td><td style="text-align:center">doesn’t matter</td><td style="text-align:right">must</td></tr></tbody></table><h2 id="NVC-Nonverbal-communication"><a href="#NVC-Nonverbal-communication" class="headerlink" title="NVC (Nonverbal communication)"></a>NVC (Nonverbal communication)</h2><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: What is NVC?<br>A: It is communication through sending and receiving <code>wordless clues</code>.</p></blockquote><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: The features of NVC.<br>A: </p><ol><li>Using signs</li><li>Often transmitting wrong message</li><li>Face to face</li><li>Many different types</li></ol></blockquote><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: What does NVC includes? (PK PC OH)<br>A: </p><ol><li>body language (kinesics)</li><li>distance (proxemics)</li><li>physical environments of voice (paralanguage)</li><li>physical environments of touch (haptics)</li><li>the use of time (chronemics)</li><li>eye contact and the actions of looking while talking and listening, frequency of galances, patterns of fixation, pupil dilation, and blink rate (oculesics)</li></ol></blockquote><blockquote><p>Q: Nonverbal elements of paralanguage. (6)<br>A: Voice quality, rate, pitch, volume, and speaking style, as well as prosodic features such as rhythm, intonation, stress.</p></blockquote><blockquote><p>Q: Nonverbal elements of written texts. (3)<br>A: Handwirting style, spatial arrangement of words, the physical layout of a page .</p></blockquote><blockquote><p>Q: The three principal areas of interaction beween individuals in NVC.<br>A: </p><ol><li><code>Environmental conditions</code> where communication takes place</li><li><code>Physical characteristics</code> of the communicators</li><li><code>Behaviors of communicators</code> during interaction</li></ol></blockquote><blockquote><p>Q: What is <code>Encoding</code>?<br>A: The act of <code>generating</code> information such as facial expressions, gestures, and postures.</p></blockquote><blockquote><p>Q: What is <code>Decoding</code>?<br>A: The <code>interpretation</code> of information from received sensations given by the encoder.</p></blockquote><h3 id="Importance"><a href="#Importance" class="headerlink" title="Importance"></a>Importance</h3><blockquote><p>Q: Body signals comprise:<br>A: </p><ol><li>Physical features</li><li>Consious and unconsious</li><li>The mediation of personal space</li></ol></blockquote><h3 id="First-impression"><a href="#First-impression" class="headerlink" title="First impression"></a>First impression</h3><blockquote><p>Positive and negative impressions</p></blockquote><h3 id="Posture"><a href="#Posture" class="headerlink" title="Posture"></a>Posture</h3><blockquote><p>Q: Please give some examples of body positioning to portray certain postures. (6)<br>A: Slouching, towering, legs spread, jaw thrust, shoulders forward, and arm crossing.</p></blockquote><blockquote><p>Q: Why posture can be <code>situation-relative</code>？<br>A: People will <code>change</code> their posture depending on the situation they are in.</p></blockquote><blockquote><p>Q: What can posture be used <code>to do</code>? (3)<br>A: Determine a participant’s degeree of attention or involvement, the difference in status between communicators, and the level of fondness a person has for the other communicator, depending on body “openness”.</p></blockquote><blockquote><p>Q: What postures can lead to <code>positive sentiment</code>? (2)<br>A: Mirror-image congruent postures, displaying a forwad lean or decreacing a backward lean.</p></blockquote><h3 id="Clothing"><a href="#Clothing" class="headerlink" title="Clothing"></a>Clothing</h3><blockquote><p>Q: The types of clothing that an individual wears convey <code>nonverbal cues</code> about his or her: (4)<br>A: Personality, background and financial status, and how others will respond to them.</p></blockquote><blockquote><p>Q: An individual’s clothing style can <code>demonstrate</code> their: (7)<br>A: Culture, mood, level of confidence, interests, age, authority, and values/beliefs.</p></blockquote><h3 id="Gestures"><a href="#Gestures" class="headerlink" title="Gestures"></a>Gestures</h3><blockquote><p>Q: How gestures can be <code>made</code>? (6)<br>A: Hands, arms or body; movements of the head, face and eyes.</p></blockquote><blockquote><p>Q: Please give some <code>categories of gestures</code>.<br>A: </p><ol><li>emblems or quotable gestures</li><li>speech independent or speech related gestures</li></ol></blockquote><blockquote><p>Q; <code>How many</code> expressions <code>human faces</code> are capable of?<br>A: 10,000<br>(<em>This versatility makes non-verbals of the face extremely <code>efficient and honest</code>, unless deliberately manipulated.</em>)</p></blockquote><blockquote><p>Q: Displays of emotions can generally be categorized into two groups: <code>negative and positive</code>. Discribe them.<br>A: </p><ul><li><code>Negative emotions</code> usually manifest as increased tension in various muscles groups: (1)<strong>tightening of jaw muscles</strong>, (2)<strong>furrowing of forehead</strong>, (3)<strong>squinting eyes</strong>, or (4)<strong>lip occlusion</strong>.</li><li><code>Positive emotions</code> are revealed by (1)<strong>the loosening of the furrowed lines on the forehead</strong>, (2)<strong>relaxtion of the muscles around the mouth</strong>, and (3)<strong>widening of the eye area</strong>. When individuals are truly relaxed and at ease, the (4)<strong>head will also tilt to the side, exposing our most vulnerable area, the neck</strong>.</li></ul></blockquote><p>Gestures can be subdivided into three groups:</p><h4 id="Adapters"><a href="#Adapters" class="headerlink" title="Adapters"></a>Adapters</h4><p><code>Some hands movements</code> (are <code>not</code> considered to be gestures) consist of manipulations either of the <code>person</code> or some <code>object</code>(e.g. clothing, pencils, eyeglasses)–the kinds of <code>scratching, fidgeting, rubbing, tapping, and touching</code> that people often do with their hands.</p><p>The basis dispositional inferences of the speaker’s emotion(<code>nervous, uncomfortable, bored</code>).</p><h4 id="Symbolic"><a href="#Symbolic" class="headerlink" title="Symbolic"></a>Symbolic</h4><p>Other hands movements (<code>are</code> considered to be gestures) with <code>specific, conventionalized meanings</code>.</p><p>Symbolic gestures are used <code>intentionally</code> and serve a <code>clear</code> communicative function.</p><p>Symbolic gestures are usually used in the <code>absence of speech</code>, but can also accompany speech.</p><p>Different meanings in defferent <code>culture</code>.</p><h4 id="Conversational"><a href="#Conversational" class="headerlink" title="Conversational"></a>Conversational</h4><p>The <code>middle</code> ground between <code>adapters</code> and <code>symbolic</code> gestures.</p><p>Do not refer to actions or words, but do <code>accompany</code> speech and <code>are related to</code> the speech they accompany.</p><p><code>Not seen</code> in the absence of speech and are <code>only made</code> by the person who is speaking.</p><h3 id="Distance"><a href="#Distance" class="headerlink" title="Distance"></a>Distance</h3><blockquote><p>Q: What are <code>4 primary distance zones</code>?<br>A: </p><ol><li><code>intimate</code> (touching to 18 inches) distance || <strong>familiar, closeness and trust</strong></li><li><code>personal</code> (18 inches to 4 feet) distance || <strong>still close, the most comfortable</strong></li><li><code>social</code> (4 to 12 feet) distance || <strong>business and classroom</strong></li><li><code>public</code> (more than 12 feet) distance || <strong>two-way communication is not desirable or possible</strong></li></ol></blockquote><h3 id="Eye-contact"><a href="#Eye-contact" class="headerlink" title="Eye contact"></a>Eye contact</h3><blockquote><p>Q: Eye contact is the primary nonverbal way of indicating: (4)<br>A: Engagement, interest, attention and involvement.</p></blockquote><blockquote><p>Q: What will happen if an individual is <code>interested</code>?<br>A: The pupils will dilate.</p></blockquote><blockquote><p>Q: How do people use their eyes to <code>indicate</code> interest?<br>A: Frequently recognized actions of <code>winking</code> and movements of the <code>eyebrows</code>.</p></blockquote><blockquote><p>Q: <code>Disinterest</code> is highly recognized when:<br>A: <code>Little</code> or <code>no</code> eye contact is made in a social setting.</p></blockquote><blockquote><p>Q: How will Eye contact <code>influence</code> people?<br>A: The <code>longer</code> there is established eye contact between two people, the greater the <code>intimacy</code> levels.</p></blockquote><blockquote><p>Q: What are the <code>important cues</code> in NVC about eye contact?<br>A: </p><ol><li>The length of a gaze</li><li>The frequency of glances</li><li>Patterns of fixation</li><li>Pupil dilation</li><li>Blink rate</li></ol></blockquote><blockquote><p>Q: How do we know someone is being <code>deceptive</code>?<br>A: Their eyes tend to <code>blink a lot more</code>.</p></blockquote><blockquote><p>Q: What can be <code>predictive of deception</code>?<br>A: Eye <code>aversion</code>.</p></blockquote><h3 id="Across-cultures"><a href="#Across-cultures" class="headerlink" title="Across cultures"></a>Across cultures</h3><blockquote><p>Q: Nuances across different aspects of nonverbal communication can be found in cultures all around the world. What can these <code>differences</code> be besed in?<br>A: </p><ol><li>Be based in <code>preferences for mode of communication</code></li><li>Be based on <code>how cultures perceive the passage of time</code></li></ol></blockquote><blockquote><p>Q: <code>Chronemics</code> can be categorized in two ways:<br>A: </p><ul><li><code>Polychronic</code> (when people do many activities at once and is common in Italy and Spain)</li><li><code>Monochronic</code> (when people do one thingat a time which is common in America)</li></ul></blockquote><h4 id="Gestures-1"><a href="#Gestures-1" class="headerlink" title="Gestures"></a>Gestures</h4><table><thead><tr><th style="text-align:left">Gestures</th><th style="text-align:left">Countries</th><th style="text-align:left">Meanings</th></tr></thead><tbody><tr><td style="text-align:left">sticking your tungue out</td><td style="text-align:left">Western countries</td><td style="text-align:left">mockery</td></tr><tr><td style="text-align:left">……………………</td><td style="text-align:left">Polynesia</td><td style="text-align:left">a greeting and a sign of reverence</td></tr><tr><td style="text-align:left">clapping</td><td style="text-align:left">North America</td><td style="text-align:left">applauding</td></tr><tr><td style="text-align:left">……..</td><td style="text-align:left">Spain</td><td style="text-align:left">summon a waiter at a restaurant</td></tr></tbody></table><table><thead><tr><th style="text-align:left">Meanings</th><th style="text-align:left">Countries</th><th style="text-align:left">Gestures</th></tr></thead><tbody><tr><td style="text-align:left">yes</td><td style="text-align:left">Northern Europe</td><td style="text-align:left">nodding heads up and down</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">Greece</td><td style="text-align:left">the downward nod</td></tr><tr><td style="text-align:left">no</td><td style="text-align:left">Northern Europe</td><td style="text-align:left">shaking head from side to side</td></tr><tr><td style="text-align:left">..</td><td style="text-align:left">Greece</td><td style="text-align:left">the upward nod</td></tr><tr><td style="text-align:left">goodbye</td><td style="text-align:left">America</td><td style="text-align:left">face the palm outward and move the hand side to side</td></tr><tr><td style="text-align:left">…….</td><td style="text-align:left">Italy</td><td style="text-align:left">face the palm inward and move fingers facing the other person</td></tr><tr><td style="text-align:left">…….</td><td style="text-align:left">France and Germany</td><td style="text-align:left">face the hand horizontal and move the fingers toward the person leaving</td></tr></tbody></table><blockquote><p>Q: It is important to note that:<br>A: Gestures are used in more <code>informal</code> settingand more often by <code>children</code>.</p></blockquote><h4 id="Displays-of-emotion"><a href="#Displays-of-emotion" class="headerlink" title="Displays of emotion"></a>Displays of emotion</h4><table><thead><tr><th style="text-align:left">Emotions</th><th style="text-align:left">Countries</th><th style="text-align:left">Meanings</th></tr></thead><tbody><tr><td style="text-align:left">laughter</td><td style="text-align:left">Westernized Countries</td><td style="text-align:left">amusement</td></tr><tr><td style="text-align:left">……..</td><td style="text-align:left">Africa</td><td style="text-align:left">wonder or embarrassment</td></tr></tbody></table><blockquote><ul><li><code>Arab and Iranian</code> cultures<br>show emotion <code>openly</code></li><li><code>Asian</code> cultures<br><code>unacceptable</code> to show emotion openly</li></ul></blockquote><blockquote><p><code>Native Americans</code> tend to be more <code>reserved</code> and <code>less expressive with emotions</code>.<br><code>Frequent touches</code> are common for <code>Chinese</code> people; <code>however</code>, such actions like <code>touching, patting, hugging or kissing</code> in <code>America</code> are <code>less frequent</code> and <code>not often publicly displayed</code>.</p></blockquote><h4 id="Nonverbal-actions"><a href="#Nonverbal-actions" class="headerlink" title="Nonverbal actions"></a>Nonverbal actions</h4><p>Lots of Examples!!!</p><p><img alt="" data-src="0.png"><br><img alt="" data-src="1.png"></p><h3 id="Kinesics-movement-and-body-position"><a href="#Kinesics-movement-and-body-position" class="headerlink" title="Kinesics: movement and body position"></a>Kinesics: movement and body position</h3><blockquote><p>Q: What are the <code>aspects</code> of <code>kinesics</code>? (5)<br>A: Face, eye contact, gesture, posture, body movements.</p></blockquote><blockquote><p>Q: <code>Kinesic messages</code> comprise: (3)<br>A: Posture, gaze, and facial movements.</p></blockquote><h3 id="Haptics-touching-in-communication"><a href="#Haptics-touching-in-communication" class="headerlink" title="Haptics: touching in communication"></a>Haptics: touching in communication</h3><blockquote><p>Q: What is <code>meainng</code> comveyed from touch <code>highly dependent upon</code>? (4)<br>A: The culture, the context of the situation, the relationship between communicators, and the manner of touch.</p></blockquote><blockquote><p>In <code>Thai</code> culture, for example, touching someone’s <code>head</code> may be thought <code>rude</code>.</p></blockquote><blockquote><ul><li>Americans, the English, Germans and Northern Europeans are said to belong to <code>low-touch cultures</code>, exhibiting very limited tactile contact in public.</li><li>Hispanics, people of Eastern European descents, Italians, the French, Arabs, and Jews are all said to belong to <code>high-touch cultures</code>.</li></ul></blockquote><h3 id="Proxemics"><a href="#Proxemics" class="headerlink" title="Proxemics"></a>Proxemics</h3><p><code>4 types of proxemics</code> with different distances depending on the situation and people involved:</p><table><thead><tr><th style="text-align:left">Types</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">Intimate distance</td><td style="text-align:left">close encounters like embracing, touching, or whispering</td></tr><tr><td style="text-align:left">Personal distance</td><td style="text-align:left">close friends and family members</td></tr><tr><td style="text-align:left">Social distance</td><td style="text-align:left">acquaintances; workplace or school</td></tr><tr><td style="text-align:left">Public distance</td><td style="text-align:left">strangers or public speaking</td></tr></tbody></table><table><thead><tr><th style="text-align:left">Distance</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">0-50 cm</td><td style="text-align:left">intimate lovers and family members</td></tr><tr><td style="text-align:left">50-120 cm</td><td style="text-align:left">friends (personal distance)</td></tr><tr><td style="text-align:left">120-270 cm</td><td style="text-align:left">acquaintances (social distance)</td></tr><tr><td style="text-align:left">270-… cm</td><td style="text-align:left">public space, not belong to oneself</td></tr><tr><td style="text-align:left">Behind</td><td style="text-align:left">strangers speaking from behind are allowed to stand much more nearer</td></tr></tbody></table><p><img alt="Different space in defferent cultures" data-src="2.jpg"></p><h3 id="Interaction"><a href="#Interaction" class="headerlink" title="Interaction"></a>Interaction</h3><blockquote><p>Q: When communicating, nonverbal messages can <code>interact</code> with verbal messaes in <code>6 ways</code>:<br>A: Repeating, conflicting, complementing, substituting, regulating and accenting/moderating.</p></blockquote><h4 id="Conflicting"><a href="#Conflicting" class="headerlink" title="Conflicting"></a>Conflicting</h4><p><code>Conflicting verbal and nonverbal messages</code> within <code>the same interaction</code> can sometimes send <code>opposing or conflicting message</code>.</p><h4 id="Complementing"><a href="#Complementing" class="headerlink" title="Complementing"></a>Complementing</h4><p>Accurate intepretation of messages is made easier when nonverbal and verbal communication <code>complement each other</code>.</p><h4 id="Substituting"><a href="#Substituting" class="headerlink" title="Substituting"></a>Substituting</h4><p>Nonverbal behavior is sometimes used as <code>the sole channel</code> for communication of a message.</p><h3 id="Chronemics"><a href="#Chronemics" class="headerlink" title="Chronemics"></a>Chronemics</h3><h4 id="Monochronic-time"><a href="#Monochronic-time" class="headerlink" title="Monochronic time"></a>Monochronic time</h4><ol><li>Things are done <code>one at a time</code> and time is <code>segmented</code> into precise, small <code>units</code>.</li><li>Time is a <code>precious</code> resource not to be wasted or taken lightly.</li><li>“Time is <code>tangible</code>“ and viewed as a <code>commodity</code>.</li></ol><h4 id="Polychronic-time"><a href="#Polychronic-time" class="headerlink" title="Polychronic time"></a>Polychronic time</h4><ol><li><code>Several</code> things can be done at once, and <code>wider</code> view of time is exhibited and time is perceived in <code>large fluid sections</code>.</li><li>Much <code>less</code> focused on <code>the preciseness of accounting for each and every moment</code>, but <code>more</code> focused on <code>tradition and relationships</code>.</li><li>More focus on <code>relationships</code>, rather than watching the clock.</li></ol><h3 id="Setting-the-stage-for-effective-nonverbal-communication"><a href="#Setting-the-stage-for-effective-nonverbal-communication" class="headerlink" title="Setting the stage for effective nonverbal communication"></a>Setting the stage for effective nonverbal communication</h3><blockquote><p>Q: How to inmprove your nonverbal communication effectively?<br>A: </p><ol><li>Learn to manage stress.</li><li>Emotional awareness.</li><li>Good at reading body language.</li></ol></blockquote><blockquote><p>Q: Are emotions <code>contagious</code>?<br>A: Yes.</p></blockquote><blockquote><p>Q: Emotional awareness enables you to:<br>A: </p><ol><li>Accrately <code>read</code> other people.</li><li>Create <code>trust</code> in relationships.</li><li>Show others that you <code>understand and care</code>.</li><li>Know if the relationship is meeting your emotional needs, giving you the option to either <code>repair</code> the relationship or <code>move on</code>.</li></ol></blockquote><blockquote><p>Q: Tips for reading body language:<br>A: </p><ol><li>Pay attention to inconsistencies</li><li>Look at nonverbal communication signals as a group</li><li>Trust your instincts</li></ol></blockquote><h1 id="Course-Notes"><a href="#Course-Notes" class="headerlink" title="Course Notes"></a>Course Notes</h1><p>&amp;&amp;&amp;&amp;&amp;</p><p>The differences between Polychronic and Monochronic:</p><table><thead><tr><th style="text-align:left">Monochronic</th><th style="text-align:right">Polychronic</th></tr></thead><tbody><tr><td style="text-align:left">Do <strong>one</strong> thing at a time</td><td style="text-align:right">Do <strong>many</strong> things at once </td></tr><tr><td style="text-align:left"><strong>Concentrate</strong> on the job</td><td style="text-align:right">Are easily <strong>distracted</strong> and subject to interruptions</td></tr><tr><td style="text-align:left">Take time commitments (deadlines, schedules) <strong>seriously</strong></td><td style="text-align:right">Consider time commitments an <strong>objective</strong> to be achieved, if possible</td></tr><tr><td style="text-align:left">Are committed to the <strong>job</strong></td><td style="text-align:right">Are committed to <strong>people</strong> and human <strong>relationships</strong></td></tr><tr><td style="text-align:left"><strong>Adhere</strong> to plans</td><td style="text-align:right"><strong>Change</strong> plans often and easily</td></tr><tr><td style="text-align:left">Are concerned about not disturbing others; follow rules of <strong>privacy</strong></td><td style="text-align:right">Are more concerned with people <strong>close</strong> to them (family, friends, close business associates) than with privacy</td></tr><tr><td style="text-align:left">Show great respect for <strong>private property</strong>; seldom borrow or lend</td><td style="text-align:right">Borrow and lend things <strong>often and easily</strong></td></tr><tr><td style="text-align:left">Emphasize <strong>promptness</strong></td><td style="text-align:right">Base promptness on the <strong>relationship</strong></td></tr><tr><td style="text-align:left">Are accustomed to <strong>short-term</strong> relationships</td><td style="text-align:right">Have strong tendency to build <strong>lifetime</strong> relationship</td></tr></tbody></table><hr><p><a href="https://didongdongdi.github.io/2018/11/21/Intercultural-Communicaiton-9/">Next Lecture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP模式匹配算法 的 个人解读</title>
      <link href="/2018/10/24/KMP%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%A7%A3%E8%AF%BB/"/>
      <url>/2018/10/24/KMP%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E7%9A%84%E4%B8%AA%E4%BA%BA%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>（以下，将目标字符串称为 T ，将模式字符串称为 P ，|A|为字符串A的长度）</p><hr><h1 id="字符串匹配问题"><a href="#字符串匹配问题" class="headerlink" title="字符串匹配问题"></a>字符串匹配问题</h1><p>字符串的模式匹配算法大致有以下几种：</p><blockquote><ul><li>朴素的模式匹配算法（又叫 Brute Force 算法，以下简称 BF）</li><li>KMP模式匹配算法（以下简称KMP）</li><li>Horspool算法</li><li>Boyer-Moore算法</li><li>Sunday算法</li><li>RK算法</li><li>字符串匹配自动机</li><li>后缀树算法（分在线和非在线两种）</li><li>对于多模式字符串匹配有：AC算法（字符串匹配自动机思想）、WM算法（BM算法在多模式的推广应用）</li></ul></blockquote><p>在这里主要说明KMP和BP，对于其他算法以后再做了解。</p><blockquote><ul><li>BF<br>简单粗暴地对于 T 上的每一个（除了最后的|P|-1个）字符，都对 P 扫描一遍<br>这种算法简单，但时间复杂度过高，最差的情况需要<code>O(|T||P|)</code>的代价</li></ul></blockquote><a id="more"></a><blockquote><ul><li>KMP<br>这种算法相对复杂，但时间复杂度低，其时间代价为<code>O(|P|+|T|)</code>，且当T长度远小于P长度时，基本上为O(|T|)</li></ul></blockquote><p>下面说明KMP算法。</p><hr><h1 id="KMP的大致思想"><a href="#KMP的大致思想" class="headerlink" title="KMP的大致思想"></a>KMP的大致思想</h1><ul><li>KMP算法由Knuth、Morris、Pratt等人创造，其本质在于将BP中<code>没有必要的比较</code>去掉，且P的右移与T无关，仅依赖于P本身的特征。</li></ul><p><img alt="KMP算法原理" data-src="KMP.jpg"></p><ul><li><p>由图可知，当遇到匹配失败的情况时，BP直接将P右移一位，重新扫描P，但这样效率极为低下。若直接将P移至P(i+1)的位置，则极有可能会错过P’的情况；即，在T上，有字符串<code>(i-j)~(i-k-1)</code>和字符串<code>(i-j+k)~(i-1)</code>相等，那么此时极有可能找到从<code>T(i-j+k)</code>位置开始的P’。所以，KMP的主要目的就是找到可能存在的P’。同时，应保证k为最小，即相等的字符串应尽可能地长。而后不断进行迭代。</p></li><li><p>由图可知，字符串<code>T(i-j)~(i-1)</code>与字符串<code>P(0)~(j-1)</code>必定相等（因为前面已经扫描过了）。所以，我们只需要知道和橙色字符串<code>P(0)~(j-k-1)</code>相等的红色字符串<code>P(k)~(j-1)</code>是否存在，且其位置如何。</p></li></ul><hr><h1 id="P的特征向量"><a href="#P的特征向量" class="headerlink" title="P的特征向量"></a>P的特征向量</h1><ul><li><p>P的特征向量为一个大小为|P|的int型数组，其元素为特征值，且对应P上的字符。由<code>特征</code>二字可知，特征向量是反映P的字符串特征的一种表示，其与线性代数中的特征向量没有关系，特征值同样。下面将通过举几个例子来说明特征值和特征向量的意义。</p></li><li><p>对于下面的字符串，其特征向量为：</p></li></ul><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th></tr></thead><tbody><tr><td style="text-align:center"> 0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center"> 0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr></tbody></table><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">b</th><th style="text-align:center">b</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b </th></tr></thead><tbody><tr><td style="text-align:center"> 0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">5</td><td style="text-align:center">6 </td></tr></tbody></table><ul><li>由上面的字符串及特征向量可知：</li></ul><blockquote><ul><li>P[0]的特征值必定为0</li><li>往后的字符P[j]的特征值i：<br>1.若<code>i == 0</code>，说明该字符与P[0]不同<br>2.若<code>i != 0</code>，说明该字符与P[i-1]相同或者说该字符的下一个字符与P[i]相同（这就是为什么大多数KMP求特征向量的那个数组或函数叫做<code>next</code>），同时字符串<code>P(0)~(i-1)</code>和字符串<code>P(j-i+1)~(j)</code>相等，即有相等子串</li></ul></blockquote><ul><li>在清楚了字符串的特征值和特征向量的含义后，我们先把如何求特征向量先放一边，先看在已有P的特征向量的情况下，如何找到T中的子串。</li></ul><hr><h1 id="已知特征向量-求子串"><a href="#已知特征向量-求子串" class="headerlink" title="已知特征向量 求子串"></a>已知特征向量 求子串</h1><ul><li>先上代码：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMPStrMatching</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> T, <span class="keyword">const</span> <span class="built_in">string</span> P,<span class="keyword">const</span> <span class="keyword">int</span> *N,<span class="keyword">const</span> <span class="keyword">int</span> startIndex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> TLen = T.length(), PLen = P.length();<span class="comment">//分别获得T和P的长度</span></span><br><span class="line"><span class="keyword">int</span> lastIndex = TLen - PLen;<span class="comment">//防止开始查找的位置太靠后，T最后的子串长度小于P的长度</span></span><br><span class="line"><span class="keyword">if</span> (startIndex &gt; lastIndex)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> i = startIndex, j = <span class="number">0</span>;<span class="comment">//从T[startIndex]位置开始查找，i为T上的位置，j为P上的位置</span></span><br><span class="line"><span class="keyword">for</span> (; i &lt; TLen; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (P[j] != T[i] &amp;&amp; j &gt; <span class="number">0</span>)<span class="comment">//见分析</span></span><br><span class="line">j = N[j - <span class="number">1</span>];<span class="comment">//记住这个是右移到相应的位置即可</span></span><br><span class="line"><span class="keyword">if</span> (P[j] == T[i])<span class="comment">//字符相等，i、j都往后移（j的后移由for循环完成）</span></span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">if</span> (j == PLen)<span class="comment">//找到子串，返回子串首字符位置</span></span><br><span class="line"><span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>while循环</code>的分析：</p><ol><li>若<code>j == 0</code>，说明此时j指向P的首字符，只需要比较即可，即 if (P[j] == T[i])</li><li>若<code>j != 0</code>，说明此时j指向的不是P的首字符<blockquote><ul><li>若<code>P[j] == T[i]</code>，则只需要继续往后面比较即可</li><li>若<code>P[j] != T[i]</code>，则此时进入while循环，寻找是否存在P’（见 KMP的大致思想 部分）</li></ul></blockquote></li></ol><p>语句 <code>j = N[j - 1];</code> 的分析：</p><ol><li>由于此时 j指向的不是P的首字符 且 <code>P[j] != T[i]</code> ，则此时需要将P右移，即，将j左移。</li><li>可知 <code>P[j-1] == T[i-1]</code> ，则先将 j-1</li><li>由前面P的特征向量部分可知<blockquote><ul><li>若 <code>N[j-1] == 0</code> ，说明此时必定不存在P’，故直接将j置零，即，将P直接移到首字符</li><li>若 <code>N[j-1] != 0</code> ，说明此时有可能存在P’，则将j置为N[j-1]，即，将P移到可能存在的P’的位置，然后再比较可能不同的那个字符，即比较P[j]和T[i]；注意，再while循环的过程中i是未发生变化的</li></ul></blockquote></li><li>这个时候你可能会想，如果P[j]和T[i]是相等的还行，那如果要是不相等呢？那么这个时候，你会发现P已经后移了，其实就已经开始了另一轮匹配，这就是迭代。</li></ol><hr><h1 id="求特征向量"><a href="#求特征向量" class="headerlink" title="求特征向量"></a>求特征向量</h1><p>好了，相信这个时候你对KMP的算法实现应该有了一定的了解。</p><p>但我们还有另外一个问题没有解决：如何求特征向量。事实上求特征向量的算法和上面求相等子串的算法都是同一种算法——KMP。</p><p>这个时候，T和P相等，但我们的<code>startIndex</code>（开始查找的位置）设为固定的1。</p><p>这个时候你可能又会问，这样根本找不到相等的子串啊？！没错，但是我们的目的不是为了找相等的子串，而是为了探索P的特征，即在P[1]后（含P[1]）找到和从P[0]开始的子串相等的最长子串，同时将其记录到next（或N）数组中。所以，next数组实际上是对P的数字化描述。同时，在对next数组顺序填充时，空着的位置的特征值只与前面已经填好的位置的特征值有关，这个从求子串时的操作就可以看出。</p><p>下面贴代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> *<span class="title">Next</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> P)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = P.length();<span class="comment">//获得P的长度</span></span><br><span class="line">assert(m &gt; <span class="number">0</span>);<span class="comment">//如果是空字符串则退出</span></span><br><span class="line"><span class="keyword">int</span> *N = <span class="keyword">new</span> <span class="keyword">int</span>[m];<span class="comment">//new一个next数组</span></span><br><span class="line">assert(N != <span class="number">0</span>);<span class="comment">//new不出来就退出</span></span><br><span class="line">N[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//首字符特征值置零，即，跳过首字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;<span class="comment">//i往后移</span></span><br><span class="line"><span class="keyword">int</span> k = N[i - <span class="number">1</span>];<span class="comment">//k往后移</span></span><br><span class="line"><span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; P[i] != P[k])<span class="comment">//这两行与上面求子串的两行完全一样，故不再说明</span></span><br><span class="line">k = N[k - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (P[i] == P[k])<span class="comment">//如果相等，在原来k的基础上+1，表示从N[i]往前有相等的子串</span></span><br><span class="line">N[i] = k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//否则，置零，表示没有相等的子串</span></span><br><span class="line">N[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>综上，你会发现，KMP其实并不难，关键在于while循环的理解。而while循环本质上是不断地迭代，同时 j<code>= N[j - 1];</code> 这一语句将几步操作融合在了一起。</p><p>不得不感叹算法的奇妙啊！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (6)</title>
      <link href="/2018/10/18/Intercultural-Communication-6/"/>
      <url>/2018/10/18/Intercultural-Communication-6/</url>
      
        <content type="html"><![CDATA[<h1 id="Linguistic-differences-via-translation"><a href="#Linguistic-differences-via-translation" class="headerlink" title="Linguistic differences via translation"></a>Linguistic differences via translation</h1><h2 id="Correspondence-between-English-and-Chinese-at-word-Level"><a href="#Correspondence-between-English-and-Chinese-at-word-Level" class="headerlink" title="Correspondence between English and Chinese at word Level"></a>Correspondence between English and Chinese at word Level</h2><blockquote><p>Correspondence:</p><ul><li>word-for-word</li><li>one word with multiple equivalents of the same meaning</li><li>one word with multiple equivalents of different meanings</li><li>equivalents interwoven with one another</li><li>words without equivalents</li></ul></blockquote><a id="more"></a><blockquote><p>Factors that influence meaning</p><ul><li>singular and plural<br>eg.<br>time–times<br>finding-findings</li><li>some idiomatic usage<br>eg.<br>You can’t pay too much attention to your pronunciation. (can’t … too == the more, the better)<br>You can never be too careful in your work. (never be too == try your best)</li></ul></blockquote><blockquote><p>Three notice:</p><ul><li>commendatory and derogatory meanings<br>eg.<br>Farmer–peasant<br>The enemy <strong>killed</strong> one of our comrades and we <strong>killed</strong> an enemy agent.</li><li>professional words</li><li>the flexibility of translation</li></ul></blockquote><h2 id="Dicriminating-the-original-meaning-of-an-English-word"><a href="#Dicriminating-the-original-meaning-of-an-English-word" class="headerlink" title="Dicriminating the original meaning of an English word"></a>Dicriminating the original meaning of an English word</h2><blockquote><p>Q: How to dicriminate the original meaning of an English word ?<br>A: </p><ol><li>part of speech</li><li>word formation</li><li>context and collocation</li></ol></blockquote><h1 id="Course-Notes"><a href="#Course-Notes" class="headerlink" title="Course Notes"></a>Course Notes</h1><h2 id="The-differences-between-UK-and-US"><a href="#The-differences-between-UK-and-US" class="headerlink" title="The differences between UK and US"></a>The differences between UK and US</h2><table><thead><tr><th>UK</th><th>US</th></tr></thead><tbody><tr><td>Chips</td><td>Fries</td></tr><tr><td>Aeroplane</td><td>Airplane</td></tr><tr><td>Underground</td><td>Subway</td></tr><tr><td>Playground</td><td>Middle East</td></tr></tbody></table><h2 id="6-Major-differences-between-English-and-Chinese"><a href="#6-Major-differences-between-English-and-Chinese" class="headerlink" title="6 Major differences between English and Chinese"></a>6 Major differences between English and Chinese</h2><table><thead><tr><th>English</th><th style="text-align:right">Chinese</th></tr></thead><tbody><tr><td>structure</td><td style="text-align:right">meaning</td></tr><tr><td>passive voice</td><td style="text-align:right">active voice</td></tr><tr><td></td><td style="text-align:right">idioms, short four characters expressions (vivid, live and compact)</td></tr><tr><td>abstract nouns</td><td style="text-align:right">concrete nouns</td></tr><tr><td>omitted and avoid recurrences (words) shorter and simpler (sentences)</td><td style="text-align:right">not omitted and be repeated (words)</td></tr><tr><td>conclusion first</td><td style="text-align:right">reasons first</td></tr></tbody></table><h2 id="Some-expressions"><a href="#Some-expressions" class="headerlink" title="Some expressions"></a>Some expressions</h2><blockquote><ul><li>If you don’t want it, please don’t give it to others.</li><li>己所不欲，勿施于人。</li></ul></blockquote><blockquote><ul><li>You need to be very smart, very quick at things, but you need to be very careful with your words so that you do not hurt others.</li><li>敏于事，慎于言。</li></ul></blockquote><blockquote><ul><li>To show off before an expert. (To teach a duck to swim.)</li><li>班门弄斧</li></ul></blockquote><blockquote><ul><li>Disintegration 土崩瓦解</li><li>Total exhaustion 精疲力尽</li><li>Careful consideration 深思熟虑</li><li>Perfect harmony 水乳交融</li><li>Feed on fancies 画饼充饥</li><li>With great eagerness 如饥似渴</li><li>Lack of perseverance 三天打鱼，两天晒网</li><li>Make a little contribution 添砖加瓦</li><li>On the verge of destruction 危在旦夕</li><li>to kill two birds with one stone 一石二鸟</li><li>a drop in the bucket 九牛一毛</li><li>to teach a pig to play on a flute 做不可能的事 </li><li>once in a blue moon 千载难逢</li><li>the worst wheel of a cart creaks most 才学最差，叫喊最响</li><li>it is a long lang that has no turning 事情必有转机</li><li>it is an ill bird that fouls its own nest 家丑不可外扬</li></ul></blockquote><blockquote><p>DRY</p><ul><li>I want my martini <strong>dry</strong>. 不甜的</li><li>There are still some <strong>dry</strong> states in the United States. 禁酒的</li><li>She prefers <strong>dry</strong> bread. 无奶油的</li><li>… …</li></ul></blockquote><h2 id="余光中：当中文遇到英语"><a href="#余光中：当中文遇到英语" class="headerlink" title="余光中：当中文遇到英语"></a>余光中：当中文遇到英语</h2><blockquote><p>当中文遇到英语会怎样？</p><ul><li>译音产生</li><li>本土母语接纳和转化很多外来的语言</li><li>认识西方的过去和接触到世界的未来</li></ul></blockquote><blockquote><p>中文和英文有什么不同？</p><ul><li>中文不拘文法，省略不必要的虚字，留下具体的东西。</li><li>中文在文法上很少用介词和连接词。</li></ul></blockquote><blockquote><p>四次成语可以分成哪两组？</p><ul><li>一组表示 一种价值，一种观念，一种主张，比如“天下为公”，“众志成城”。</li><li>一组表示 一种情况，并不主张什么，如“张三李四”。</li></ul></blockquote><blockquote><p>四字成语的基本美学是什么？</p><ul><li>对仗、简洁、铿锵。</li></ul></blockquote><blockquote><p>四字成语往往表示一种状态。</p></blockquote><hr><p><a href="https://didongdongdi.github.io/2018/10/31/Intercultural-Communication-7-8/">Next Lecture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迷宫求解  (所有路径)</title>
      <link href="/2018/10/16/%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/"/>
      <url>/2018/10/16/%E8%BF%B7%E5%AE%AB%E6%B1%82%E8%A7%A3%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><p>对于如下所示的迷宫，如何找到所有路径？（ # 为墙，* 为出口，0 为入口）（注意：要找到所有的路径必须保证一条路径不能在同一个位置走两次及两次以上，反之，一方面，这样没有意义；另一方面，这样可能会造成在一个地方一直转圈）</p><a id="more"></a><p><img alt="迷宫示例" data-src="maze.png"></p><h1 id="大致思路（试错法）"><a href="#大致思路（试错法）" class="headerlink" title="大致思路（试错法）"></a>大致思路（试错法）</h1><ol><li><p>先将迷宫用二维数组表示，0代表围墙，1代表通路，2代表出口，而入口通过坐标指定</p></li><li><p>定义<code>位置类</code>LocDir，成员<code>X（列坐标）和Y（行坐标）</code>代表在迷宫某个位置的坐标,成员<code>dir</code>代表在这个位置后下一步要走的方向（1代表向上，2代表向右，3代表向下，4代表向左）</p></li><li><p>先定义一个入口的<code>位置对象</code>；而后创建一个<code>栈</code>（存放位置对象），用于记录走过的路径，并将入口进栈。</p></li><li><p>从入口开始，根据位置对象中的方向，在向该方向移动前先判断：若为0，说明前方是墙，此时将方向+1，即<code>调整方向</code>；若为1，说明前方是通路，则将现在位置在二维数组中的值置0，表示走过的路已经变成了墙，不能走回头路（避免出现文章开头提出的现象），向前方移动，并将到达的位置X和Y记录下来，dir置1，表示先试着向上走，将该位置对象入栈；若为2，说明找到了出口，这个时候将路径以坐标的形式输出即可。</p></li><li><p>若4中调整方向后，直到方向变成4，即向左走也不行，则此时应该将方向+1，变为5，但这样就找不到方向了，说明在该位置四周都是墙，此时将栈顶元素退栈，同时将其变为现在的位置，即沿原路径返回了一步；再将现在位置在二维数组中的值置1，即将这个位置变为通路；最后将方向+1。</p></li><li><p>还可以将每次找到的正确路径的长度记录下来，通过比较，输出最长路径（之一）和最短路径（之一）</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，迷宫求解试错法的关键在于，在迷宫的每个位置，我们都有四个方向可以选择，那么，只需要在每个位置将这四个方向依次试过，就可以确保走过迷宫的每一个位置，且单条路径不会重复走过同一个位置。</p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><p>注：由于代码中使用的栈是我自定义的，故栈中的一个函数Exchangge(top)（用来替换栈顶元素），在标准栈中可能并没有，但其本质是将原栈顶元素出栈后再将新的元素进栈，即可分成两步写。</p><p>main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"MazeSolve.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LocDir.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//0代表围墙，1代表通路，2代表出口</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//入口初始化</span></span><br><span class="line">LocDir in;</span><br><span class="line">in.X = <span class="number">1</span>;</span><br><span class="line">in.Y = <span class="number">1</span>;</span><br><span class="line">in.dir = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">MazeSolve(<span class="built_in">map</span>, in);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MazeSolve.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MAZESOLVE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MAZESOLVE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LinkStack.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LocDir.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MazeSolve</span><span class="params">(<span class="keyword">int</span> <span class="built_in">map</span>[][<span class="number">10</span>], <span class="keyword">const</span> LocDir &amp; in)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> roadNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> roadLen[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">LinkStack&lt;LocDir&gt; LocDirStack;</span><br><span class="line"></span><br><span class="line">LocDirStack.Push(in);</span><br><span class="line"></span><br><span class="line">LocDir top, temp;</span><br><span class="line">LocDirStack.Top(top);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!(top.X==<span class="number">1</span>&amp;&amp;top.Y==<span class="number">1</span>&amp;&amp;top.dir==<span class="number">5</span>)) &#123;</span><br><span class="line"><span class="comment">//Move</span></span><br><span class="line"><span class="keyword">switch</span> (top.dir)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//turn up</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[top.Y<span class="number">-1</span>][top.X]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[top.Y - <span class="number">1</span>][top.X] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Road"</span> &lt;&lt; roadNum &lt;&lt; <span class="string">':'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'('</span> &lt;&lt; top.X &lt;&lt; <span class="string">','</span> &lt;&lt; top.Y<span class="number">-1</span> &lt;&lt; <span class="string">')'</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">roadLen[roadNum] = <span class="number">1</span> + LocDirStack.GetSize();</span><br><span class="line">roadNum++;</span><br><span class="line">LocDirStack.Show();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">top.dir++;</span><br><span class="line">LocDirStack.Exchange(top);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[top.Y][top.X] = <span class="number">0</span>;</span><br><span class="line">temp = &#123; top.X,top.Y - <span class="number">1</span>,<span class="number">1</span> &#125;;</span><br><span class="line">LocDirStack.Push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">top.dir++;</span><br><span class="line">LocDirStack.Exchange(top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//turn right</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[top.Y][top.X + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[top.Y][top.X + <span class="number">1</span>] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Road"</span> &lt;&lt; roadNum &lt;&lt; <span class="string">':'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'('</span> &lt;&lt; top.X+<span class="number">1</span> &lt;&lt; <span class="string">','</span> &lt;&lt; top.Y &lt;&lt; <span class="string">')'</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">roadLen[roadNum] = <span class="number">1</span> + LocDirStack.GetSize();</span><br><span class="line">roadNum++;</span><br><span class="line">LocDirStack.Show();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">top.dir++;</span><br><span class="line">LocDirStack.Exchange(top);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[top.Y][top.X] = <span class="number">0</span>;</span><br><span class="line">temp = &#123; top.X+<span class="number">1</span>,top.Y,<span class="number">1</span> &#125;;</span><br><span class="line">LocDirStack.Push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">top.dir++;</span><br><span class="line">LocDirStack.Exchange(top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//turn down</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[top.Y+<span class="number">1</span>][top.X]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[top.Y + <span class="number">1</span>][top.X] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Road"</span> &lt;&lt; roadNum &lt;&lt; <span class="string">':'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'('</span> &lt;&lt; top.X &lt;&lt; <span class="string">','</span> &lt;&lt; top.Y + <span class="number">1</span> &lt;&lt; <span class="string">')'</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">roadLen[roadNum] = <span class="number">1</span> + LocDirStack.GetSize();</span><br><span class="line">roadNum++;</span><br><span class="line">LocDirStack.Show();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">top.dir++;</span><br><span class="line">LocDirStack.Exchange(top);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[top.Y][top.X] = <span class="number">0</span>;</span><br><span class="line">temp = &#123; top.X,top.Y + <span class="number">1</span>,<span class="number">1</span> &#125;;</span><br><span class="line">LocDirStack.Push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">top.dir++;</span><br><span class="line">LocDirStack.Exchange(top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//turn left</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[top.Y][top.X - <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">map</span>[top.Y][top.X - <span class="number">1</span>] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Road"</span> &lt;&lt; roadNum &lt;&lt; <span class="string">':'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'('</span> &lt;&lt; top.X <span class="number">-1</span>&lt;&lt; <span class="string">','</span> &lt;&lt; top.Y&lt;&lt; <span class="string">')'</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">roadLen[roadNum] = <span class="number">1</span> + LocDirStack.GetSize();</span><br><span class="line">roadNum++;</span><br><span class="line">LocDirStack.Show();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">top.dir++;</span><br><span class="line">LocDirStack.Exchange(top);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>[top.Y][top.X] = <span class="number">0</span>;</span><br><span class="line">temp = &#123; top.X - <span class="number">1</span>,top.Y,<span class="number">1</span> &#125;;</span><br><span class="line">LocDirStack.Push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">top.dir++;</span><br><span class="line">LocDirStack.Exchange(top);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="comment">//no choice</span></span><br><span class="line">LocDirStack.Pop(temp);</span><br><span class="line"></span><br><span class="line">LocDirStack.Top(top);</span><br><span class="line">top.dir++;</span><br><span class="line">LocDirStack.Exchange(top);</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>[top.Y][top.X] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LocDirStack.Top(top);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">roadNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> minRoad = roadLen[roadNum],maxRoad = roadLen[roadNum];</span><br><span class="line"><span class="keyword">int</span> minRoadPos =<span class="number">0</span>, maxRoadPos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (roadLen[roadNum]) &#123;</span><br><span class="line"><span class="keyword">if</span> (minRoad &gt; roadLen[roadNum]) &#123;</span><br><span class="line">minRoad = roadLen[roadNum];</span><br><span class="line">minRoadPos = roadNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (maxRoad &lt; roadLen[roadNum]) &#123;</span><br><span class="line">maxRoad = roadLen[roadNum];</span><br><span class="line">maxRoadPos = roadNum;</span><br><span class="line">&#125;</span><br><span class="line">++roadNum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Min RoadNum:"</span> &lt;&lt; minRoadPos &lt;&lt; <span class="string">'\t'</span> &lt;&lt; <span class="string">"Min RoadLength:"</span> &lt;&lt; minRoad &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Max RoadNum:"</span> &lt;&lt; maxRoadPos &lt;&lt; <span class="string">'\t'</span> &lt;&lt; <span class="string">"Max RoadLength:"</span> &lt;&lt; maxRoad &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !_MAZESOLVE_H</span></span></span><br></pre></td></tr></table></figure><p>LocDir.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LOCDIR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _LOCDIR_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocDir</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">LocDir(<span class="keyword">int</span> X=<span class="number">0</span>, <span class="keyword">int</span> Y=<span class="number">0</span>, <span class="keyword">int</span> dir=<span class="number">0</span>);</span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out,<span class="keyword">const</span> LocDir&amp; loc_dir);</span><br><span class="line">~LocDir();</span><br><span class="line"><span class="keyword">int</span> X;</span><br><span class="line"><span class="keyword">int</span> Y;</span><br><span class="line"><span class="keyword">int</span> dir;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">LocDir::LocDir(<span class="keyword">int</span> X,<span class="keyword">int</span> Y,<span class="keyword">int</span> dir):X(X),Y(Y),dir(dir)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LocDir::~LocDir()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="keyword">const</span> LocDir&amp; loc_dir)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; <span class="string">'('</span> &lt;&lt; loc_dir.X &lt;&lt; <span class="string">','</span> &lt;&lt; loc_dir.Y &lt;&lt; <span class="string">')'</span> &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !_LOCDIR_H</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (5)</title>
      <link href="/2018/10/12/Intercultural-Communication-5/"/>
      <url>/2018/10/12/Intercultural-Communication-5/</url>
      
        <content type="html"><![CDATA[<h1 id="High-context-and-low-context-cultures"><a href="#High-context-and-low-context-cultures" class="headerlink" title="High-context and low-context cultures"></a>High-context and low-context cultures</h1><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: What are <code>High-context and low-context</code> culture ?<br><a id="more"></a><br>A: Terms used to describe cultures based on <code>how explicit</code> the messages exchanged are and <code>how much</code> the context means in certain situations. (Introduced by the anthropologist Edward T.Hall in his 1976 book <em>Beyond Culture</em>.)</p></blockquote><h2 id="Context-as-a-relativistic-metric-of-culture"><a href="#Context-as-a-relativistic-metric-of-culture" class="headerlink" title="Context as a relativistic metric of culture"></a>Context as a relativistic metric of culture</h2><blockquote><p>Higher-context culture ——————— Lower-context culture</p><ul><li>African ———————————– Australian </li><li>Arabic ———————————— Dutch</li><li>Brazilian ——————————— English Canadian</li><li>Chinese ———————————- English</li><li>French Canadian ———————– German</li><li>French ———————————— New Zealand</li><li>Greek ————————————- United States</li><li>Hawaiian </li><li>Indian </li><li>Italian </li><li>Irish </li><li>Japanese </li><li>Korean </li><li>Latin </li><li>Americans </li><li>Russian </li><li>Southern United States </li><li>Spanish</li></ul></blockquote><h2 id="How-higher-context-relates-to-other-cultural-metrics"><a href="#How-higher-context-relates-to-other-cultural-metrics" class="headerlink" title="How higher context relates to other cultural metrics"></a>How higher context relates to other cultural metrics</h2><h3 id="Diversity"><a href="#Diversity" class="headerlink" title="Diversity"></a>Diversity</h3><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>High-context:</p><ol><li>common in the <code>Asian</code> cultures than in European.</li><li>common in countries with low <code>racial</code> diversity.</li><li>group/community is valued over the <code>individual</code>.</li><li>the in-groups and <code>group</code> reliance/support favor higher-context cultures.</li><li>coexisting subcultures conducive to higher-context situations, where the small group relies on their common <code>background</code> to explain the situation, rather than words.</li></ol></blockquote><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Low-context:<br>the need to <code>accommodate</code> individuals with a wide variety of backgrounds.</p></blockquote><table><thead><tr><th style="text-align:left">高语境文化</th><th style="text-align:right">低语境文化</th></tr></thead><tbody><tr><td style="text-align:left">内隐，含蓄</td><td style="text-align:right">外显，明了</td></tr><tr><td style="text-align:left">暗码信息</td><td style="text-align:right">明码信息</td></tr><tr><td style="text-align:left">较多的非语言编码</td><td style="text-align:right">较多的言语编码</td></tr><tr><td style="text-align:left">反应很少外露</td><td style="text-align:right">反应外露</td></tr><tr><td style="text-align:left">圈内外有别</td><td style="text-align:right">圈内外灵活</td></tr><tr><td style="text-align:left">人际关系紧密</td><td style="text-align:right">人际关系不密切</td></tr><tr><td style="text-align:left">高承诺</td><td style="text-align:right">低承诺</td></tr><tr><td style="text-align:left">时间处理高度灵活</td><td style="text-align:right">时间高度组织化</td></tr></tbody></table><h3 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h3><blockquote><p>Low-context:</p><ul><li>Explicit</li><li>Verbose</li></ul></blockquote><h3 id="Elaborated-and-Restricted-Codes"><a href="#Elaborated-and-Restricted-Codes" class="headerlink" title="Elaborated and Restricted Codes"></a>Elaborated and Restricted Codes</h3><blockquote><p>Q: Where does the concept of elaborated and restricted codes come from ?<br>A: Sociologist <code>Basil Bernstein</code> in his book <em>Class, Codes and Control</em>.</p></blockquote><blockquote><p>Q: What is <code>elaborated code</code> ?<br>A: It indicates that the speaker is expressing his/her idea by phrasing from an <code>abundant</code> selection of alternatives <code>without</code> assuming the listener shares lots of common knowledge, which allows the speaker to explain their idea <code>explicitly</code>.</p></blockquote><blockquote><p>Q: What is <code>restricted codes</code> ?<br>A: They are phrased from more <code>limited</code> alternatives, usually with collapsed and shortened sentences, therefore it requires the listeners to share a great deal of <code>common perspectives</code> to understand the <code>implicit</code> meaning of the conversation.</p></blockquote><h3 id="Collectivism-and-Individualism"><a href="#Collectivism-and-Individualism" class="headerlink" title="Collectivism and Individualism"></a>Collectivism and Individualism</h3><blockquote><ul><li>Collectivism — High-context cultures</li><li>Individualism — Low-context cultures</li></ul></blockquote><h3 id="Stability-and-Durability-of-Tradition"><a href="#Stability-and-Durability-of-Tradition" class="headerlink" title="Stability and Durability of Tradition"></a>Stability and Durability of Tradition</h3><blockquote><p>High-context culture</p></blockquote><h3 id="Facial-Expression"><a href="#Facial-Expression" class="headerlink" title="Facial Expression"></a>Facial Expression</h3><blockquote><p>Q: What are the <code>6</code> basic emotions or universal language of emotion ?<br>A: Happy, surprise, fear, disgust, anger and sad.</p></blockquote><h3 id="Marketing-perspective"><a href="#Marketing-perspective" class="headerlink" title="Marketing perspective"></a>Marketing perspective</h3><blockquote><p>Q: What is the difference between Japan and the US about the Mcdonalds advertising ?<br>A: Japanese version uses more <code>colors, movements and sounds</code>, while the American version is more <code>straight forward</code>.</p></blockquote><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><blockquote><p>High-context</p><ul><li>Collectivism</li><li>Stable and durable tradition</li><li>Strong sense of tradition and history</li><li>Little change over time</li><li>Native Americans over new comers</li><li>Higher barrier for development</li><li>Subtler facial expression</li><li>Shared and taken-for-granted background knowledge</li></ul></blockquote><blockquote><p>Low-context</p><ul><li>Individualism</li><li>Fast change</li><li>Generation gap</li><li>Overload of information</li><li>Exaggerated facial expression</li></ul></blockquote><h1 id="Couse-Notes"><a href="#Couse-Notes" class="headerlink" title="Couse Notes"></a>Couse Notes</h1><p><img alt="Context" data-src="Context.jpg"></p><table><thead><tr><th>Higher context</th><th>Lower context</th></tr></thead><tbody><tr><td>Implicit</td><td>Explicit</td></tr><tr><td>How is said is more important than what is said</td><td>Clear</td></tr><tr><td>Relational</td><td>Verbose</td></tr><tr><td>Collectivist</td><td></td></tr><tr><td>Intuitive</td><td></td></tr><tr><td>Contemplative</td><td></td></tr></tbody></table><hr><p><a href="https://didongdongdi.github.io/2018/10/18/Intercultural-Communication-6/">Next Culture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (2)</title>
      <link href="/2018/10/12/Intercultural-Communication-2/"/>
      <url>/2018/10/12/Intercultural-Communication-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Intercultural-competence"><a href="#Intercultural-competence" class="headerlink" title="Intercultural competence"></a>Intercultural competence</h1><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: What is <code>intercultural competence</code> ?<br>A: A complex of abilities needed to <code>perform</code> effectively and appropriately when <code>interacting</code> with others who are linguistically and culturally <code>different</code> from oneself.</p></blockquote><a id="more"></a><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: How to discuss and describe <code>intercultural competence</code> by <code>terms</code> ?<br>A: </p><ul><li>intercultural communicative competence <code>(ICC)</code></li><li>transcultural <code>communication</code> </li><li>crosscultural <code>adaptation</code></li><li>intercultural <code>sensitivity</code></li><li>… …</li></ul></blockquote><blockquote><p>Q: What are all of these <code>terms</code> attempt to account for ?<br>A: The ability to <code>step beyond</code> one’s own culture and <code>function with</code> other individuals from linguisitically and culturally diverse backgrounds.</p></blockquote><h2 id="Cultural-Symbols"><a href="#Cultural-Symbols" class="headerlink" title="Cultural Symbols"></a>Cultural Symbols</h2><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: What is <code>cultural symbols</code> ?<br>A: A <code>physical manifestation</code> that signifies the <code>ideology</code> of a particular culture or that merely has meaning within <code>culture</code>.</p></blockquote><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Q: What is <code>culture</code> ?<br>A: An accumulation of the <code>beliefs</code>, <code>traditions</code>, <code>language</code> and <code>values</code> of a particular group of people.</p></blockquote><blockquote><ul><li>THE <code>V</code> SIGN</li><li><code>USA</code> : A <code>harmless</code> backwards sign for <code>peace</code>.</li><li><code>Australia, UK, Ireland, NZ</code> : Seen as <code>rude</code> and frequently used to signify contempt of <code>defiance</code> towards authority.</li></ul></blockquote><h2 id="Examples-of-Cultural-Symbols"><a href="#Examples-of-Cultural-Symbols" class="headerlink" title="Examples of Cultural Symbols"></a>Examples of Cultural Symbols</h2><blockquote><p>Q: What can cultural symbols represent ?<br>A: </p><ul><li>nationalism</li><li>belief systems</li><li>traditions</li><li>language</li><li>values</li></ul></blockquote><h3 id="Symbols-Conveying-Nationalism-to-a-Country"><a href="#Symbols-Conveying-Nationalism-to-a-Country" class="headerlink" title="Symbols Conveying Nationalism to a Country"></a>Symbols Conveying Nationalism to a Country</h3><h4 id="The-Bald-Eagle"><a href="#The-Bald-Eagle" class="headerlink" title="The Bald Eagle"></a>The Bald Eagle</h4><div style="width:50%; height:50%;"><img alt="the bald eagle" data-src="http://teenkidsnews.com/wp-content/uploads/2017/05/BaldEagle_AmericanFlag.jpg"></div><blockquote><p>Q: What dose the bald eagle <code>symbolizes</code> in the US (America) ?<br>A: Freedom, strength and power.</p></blockquote><h4 id="Swastika"><a href="#Swastika" class="headerlink" title="Swastika"></a>Swastika</h4><div style="width:50%; height:50%;"><img alt="Swastika" data-src="http://blogs.longwood.edu/callief/files/2012/01/Macys-Swastika-.jpg"></div><blockquote><p>Q: What does the swastika symbolized ?<br>A: The Nazi party in Germany in the 1930s and 40s. The Holocaust was a murderously industrialized genocide.</p></blockquote><blockquote><p>Q: If the symbol rotate 45 degrees, what does it means in some Asian, non-Aryan religions, including <code>Buddhism, Hinduism and Jainism</code> ?<br>A: In Hinduism, it has Sanskrit roots that ultimately mean, making of <code>goodness</code>, and is sort of seen as a sign of <code>good fortune and prosperity</code>.</p></blockquote><h3 id="Symbols-Conveying-Religious-Beliefs-of-a-Culture"><a href="#Symbols-Conveying-Religious-Beliefs-of-a-Culture" class="headerlink" title="Symbols Conveying Religious Beliefs of a Culture"></a>Symbols Conveying Religious Beliefs of a Culture</h3><h4 id="The-Hamsa"><a href="#The-Hamsa" class="headerlink" title="The Hamsa"></a>The Hamsa</h4><div style="width:50%; height:50%;"><img alt="the Hamsa" data-src="https://img0.etsystatic.com/103/0/12348992/il_fullxfull.990259684_btr9.jpg"></div><blockquote><p>Q: What does the Hamsa mean in the Jewish culture ?<br>A: The <code>hand</code> of god is <code>protecting</code> you.</p></blockquote><blockquote><p>Culture is dynamic, shared patterns of socially transmitted, norms, values, beliefs, and symbols.</p></blockquote><h1 id="Course-Notes"><a href="#Course-Notes" class="headerlink" title="Course Notes"></a>Course Notes</h1><p><img alt="Intercultural Competence" data-src="intercultural competence.jpg"></p><blockquote><p>Oral presentation<br>Be …</p><ul><li>brave</li><li>confident</li><li>organized</li><li>cooperative</li><li>a team-player</li><li>aware of time</li></ul></blockquote><blockquote><p>Some Chinese Cultural Symbols</p><ul><li>elephant trunk peak</li><li>Chariot</li><li>Temple of Heaven</li><li>the lunar year of horse</li><li>Spring Festival Gala</li><li>… …</li></ul></blockquote><blockquote><p>A physical manifestation</p><ul><li>Buildings</li><li>Flowers</li><li>Arts</li><li>Customs and traditions</li><li>Clothes</li><li>Music</li><li>Language</li><li>Religion</li><li>Food</li><li>Sports</li><li>National flag</li><li>Currency</li><li>Animals</li><li>Literature</li><li>… …</li></ul></blockquote><blockquote><p>Ideology</p><ul><li>Nationalism</li><li>Religious beliefs</li><li>Values and beliefs</li><li>Norms</li></ul></blockquote><blockquote><p>Culture</p><ul><li>not fixed</li><li>dynamic – not static</li><li>shared patterns</li></ul></blockquote><hr><p><a href="https://didongdongdi.github.io/2018/09/24/Intercultural-Communication-3/">Next Lecture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电路原理图设计原则</title>
      <link href="/2018/10/05/%E7%94%B5%E8%B7%AF%E5%8E%9F%E7%90%86%E5%9B%BE%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2018/10/05/%E7%94%B5%E8%B7%AF%E5%8E%9F%E7%90%86%E5%9B%BE%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<blockquote><ol><li>先规划放置好元件，尽可能使后面连线简单，且能看出逻辑。</li><li>数量大且简单的连线尽可能短且集中，先连。</li><li>数量小且复杂的连线可能较为长且分散，后连。</li><li>连线完成后进行调整优化，使得连线整齐，利用好每一块地方，使得总体占用的面积最小。（如果空间实在不足，可调整图纸大小）</li></ol></blockquote><a id="more"></a><p><img alt="示例" data-src="example.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (1)</title>
      <link href="/2018/09/28/Intercultural-Communication-1/"/>
      <url>/2018/09/28/Intercultural-Communication-1/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-make-a-power-point-presentation"><a href="#How-to-make-a-power-point-presentation" class="headerlink" title="How to make a power-point presentation"></a>How to make a power-point presentation</h1><h2 id="Top-Tips-for-Effectivve-presentations-10"><a href="#Top-Tips-for-Effectivve-presentations-10" class="headerlink" title="Top Tips for Effectivve presentations (10)"></a>Top Tips for Effectivve presentations (10)</h2><h3 id="Passion-and-Connect"><a href="#Passion-and-Connect" class="headerlink" title="Passion and Connect"></a>Passion and Connect</h3><a id="more"></a><blockquote><ul><li>Be honest with the audience about what is important to you and why it matters.</li><li>Be enthusiastic and honest, and the audience will respond.</li></ul></blockquote><p>Note: Tell your audience what you really want to tell them.</p><h3 id="Needs"><a href="#Needs" class="headerlink" title="Needs"></a>Needs</h3><blockquote><ul><li>Be built around what your audience is going to get <code>out</code> of the presentation.</li><li>Bear in mind what the audience needs and wants to <code>know</code>, not what you can tell them (when preparing).</li><li>Focuse on your audience’s <code>response</code>, and react to that.</li><li>Make it <code>easy</code> for your audience to understand and respond.</li></ul></blockquote><h3 id="Simple"><a href="#Simple" class="headerlink" title="Simple"></a>Simple</h3><blockquote><ul><li>Core Message</li><li>A <code>30-second</code> ‘elevator summary’</li><li>No more than <code>15 words</code></li></ul></blockquote><h3 id="Smile-and-Eye-Contact"><a href="#Smile-and-Eye-Contact" class="headerlink" title="Smile and Eye Contact"></a>Smile and Eye Contact</h3><blockquote><p>Make sure that you don’t turn down all the lights so that only the slide screen is visible. Your audience needs to see you as well as your slides.</p></blockquote><h3 id="Start-Strongly"><a href="#Start-Strongly" class="headerlink" title="Start Strongly"></a>Start Strongly</h3><blockquote><ul><li>Explain who you are.</li><li>Entertain them.</li><li>A story or an attention-grabbing (but useful) image.</li></ul></blockquote><h3 id="10-20-30-Rule"><a href="#10-20-30-Rule" class="headerlink" title="10-20-30 Rule"></a>10-20-30 Rule</h3><blockquote><p>Slideshows should:</p><ul><li>Contain no more than <code>10 slides</code></li><li>Last no more than <code>20 minutes</code></li><li>Use a font size of no less than <code>30 point</code></li></ul></blockquote><p>Note:</p><ol><li>A good set of slides should be no use without the presenter.</li><li>If you need to provide more information, create a bespoke handout and give it out after your presentation.</li></ol><h3 id="Stories"><a href="#Stories" class="headerlink" title="Stories"></a>Stories</h3><p>You need your presentation to act like a story.</p><blockquote><p>Storytelling mechanics:</p><ul><li>Focusing On Characters</li><li>A Changing Dynamic</li></ul></blockquote><h3 id="Voice"><a href="#Voice" class="headerlink" title="Voice"></a>Voice</h3><blockquote><ul><li>Varying the speed</li><li>Emphasizing changes in pitch and tone</li></ul></blockquote><h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><blockquote><ul><li><code>AVOID</code>: crossed arms, hands behind your back or in your pockets, and pacing the stage</li><li><code>MAKE</code>: gestures open and confident, and move naturally</li></ul></blockquote><h3 id="Relax-Breathe-and-Enjoy"><a href="#Relax-Breathe-and-Enjoy" class="headerlink" title="Relax, Breathe and Enjoy"></a>Relax, Breathe and Enjoy</h3><blockquote><ul><li>Slow your breathing down,</li><li>Relax and Enjoy in your presentation.</li></ul></blockquote><h2 id="Four-dimensions-for-a-distinctive-effective-and-polished-PowerPoint-presentation"><a href="#Four-dimensions-for-a-distinctive-effective-and-polished-PowerPoint-presentation" class="headerlink" title="Four dimensions for a distinctive, effective and polished PowerPoint presentation"></a>Four dimensions for a distinctive, effective and polished PowerPoint presentation</h2><h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><blockquote><p>Q: How a well-designed presentation should be?<br>A: It makes ideas flow in <code>a logical manner</code> and can be either <code>persuasive</code> or <code>informative</code>.</p></blockquote><blockquote><p>Q: What is the structure of a good presentation?<br>A: Start broad, get specific and end broad.</p></blockquote><blockquote><p>Q: How to write the opening within the first <code>30</code> seconds?<br>A: </p><ul><li><code>A story (or a compelling question)</code>: personal, unexpected, challenging or funny.</li><li><code>A quote</code></li><li><code>Repetition</code>: key message.</li></ul></blockquote><h3 id="Language-S-amp-S"><a href="#Language-S-amp-S" class="headerlink" title="Language(S&amp;S)"></a>Language(S&amp;S)</h3><h4 id="Simple-1"><a href="#Simple-1" class="headerlink" title="Simple"></a>Simple</h4><blockquote><p>No jargon, no abbreviation.</p></blockquote><h4 id="Signposts"><a href="#Signposts" class="headerlink" title="Signposts"></a>Signposts</h4><p>How to …</p><blockquote><ul><li>welcome</li><li>introduce yourself</li><li>introduce your presentation</li><li>outline your presentation</li><li>explain that there will be time for questions at the end</li><li>start the presentation</li><li>close a section</li><li>begin a new section</li><li>conclude and summarizing</li><li>finish and thank</li><li>invite questions</li><li>refer to a previous point</li><li>deal with (difficult) questions</li></ul></blockquote><h3 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h3><blockquote><p>Q: How long shall we talk on one slide?<br>A: No more than <code>1.5 mins</code>.</p></blockquote><blockquote><p>Q: How many words and lines on each slide?<br>A: No more than <code>6</code> lines per slide, <code>6</code> words per line.(The less the better.)</p></blockquote><blockquote><p>Q: How big shall be the text?<br>A: <code>30-40</code> for the text, <code>60</code> font size for the title.</p></blockquote><blockquote><p>Q: Which font is the best font?<br>A: </p><ul><li><code>Use</code> a Sans Serif font, like Arial or Comic Sans.</li><li><code>Avoid</code> Times New Roman or Courier, they are old-fashioned and not professional.</li><li><code>Use</code> the same fonts for title and body text.</li><li><code>Don&#39;t use</code> more than 3 fonts.</li></ul></blockquote><blockquote><p>Q: How to make point clear?<br>A: Use <code>headers</code> (a simple sentence), followed by <code>bullets</code>(3) or sub-bullets. Make sure to present all the bullets at the same time rather than one at a time.</p></blockquote><blockquote><p>Q: How to use color?<br>A: Use contrasting colors (blue and white, white and black). Avoid complementary colors (red and green, blue and orange, purple and yellow).</p></blockquote><blockquote><p>Q: Can I use sound effects?<br>A: You’d better not to.</p></blockquote><h3 id="Delivery"><a href="#Delivery" class="headerlink" title="Delivery"></a>Delivery</h3><h4 id="Verbal-communication-voice-pitch-and-pace"><a href="#Verbal-communication-voice-pitch-and-pace" class="headerlink" title="Verbal communication (voice, pitch and pace)"></a>Verbal communication (voice, pitch and pace)</h4><p>SSST strategy</p><blockquote><ul><li>Speak loudly and slowly.</li><li>Speak confidently and professionally.</li><li>Silence is golden.</li><li>Thank the audience twice.(begin and end)</li></ul></blockquote><h4 id="Non-verbal-communication-eye-contact-and-body-language"><a href="#Non-verbal-communication-eye-contact-and-body-language" class="headerlink" title="Non-verbal communication (eye contact and body language)"></a>Non-verbal communication (eye contact and body language)</h4><blockquote><ul><li>Dress the part.</li><li>Smile and make eye contact.</li><li>Start and finish on time.</li></ul></blockquote><h2 id="Last-thing"><a href="#Last-thing" class="headerlink" title="Last thing"></a>Last thing</h2><blockquote><p>Practice and rehearse.</p></blockquote><hr><p><a href="https://didongdongdi.github.io/2018/10/12/Intercultural-Communication-2/">Next Lecture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 与 哲学</title>
      <link href="/2018/09/28/C++%20%E4%B8%8E%20%E5%93%B2%E5%AD%A6/"/>
      <url>/2018/09/28/C++%20%E4%B8%8E%20%E5%93%B2%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下只是我个人对C++语言的一些理解，只是为了更好地学习和使用C++，如有描述不当处，还请指出。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很多的科幻大片中都有虚拟世界的存在，好比是现实世界的映射或是更近一步的提升，如黑客帝国中的<code>matrix</code>,又如神盾局特工中的<code>framework</code>，等等。</p><p>而这些虚拟世界无一不是建立在一行一行代码的基础上的。</p><a id="more"></a><p>C++作为一门面向对象的语言，是为了更好地描述这个世界，从而能够打造出与现实世界几乎相同的世界，甚至是超越现实的世界。</p><p>而要描述一个世界则离不开哲学。</p><h1 id="世界的基本组成"><a href="#世界的基本组成" class="headerlink" title="世界的基本组成"></a>世界的基本组成</h1><p>在这里，我们认为现实世界由三种最基本的事物构成的，即：<code>物质、能量和信息</code>。</p><p>而在虚拟世界中，一切的物质和能量都是由现实世界所提供的。真正存在于虚拟世界中的是信息。</p><h1 id="世界到C-的映射"><a href="#世界到C-的映射" class="headerlink" title="世界到C++的映射"></a>世界到C++的映射</h1><h2 id="物质-数据类型"><a href="#物质-数据类型" class="headerlink" title="物质 == 数据类型"></a>物质 == 数据类型</h2><h3 id="基本的"><a href="#基本的" class="headerlink" title="基本的"></a>基本的</h3><p>夸克、电子、场…… == int、short、char、char、long、unsigned、double、float、bool……</p><h3 id="扩展的"><a href="#扩展的" class="headerlink" title="扩展的"></a>扩展的</h3><p>各种各样的元素 == struct</p><h3 id="其它的"><a href="#其它的" class="headerlink" title="其它的"></a>其它的</h3><ul><li>变量 == 载体</li><li>常量 == 限定的变量（const）</li><li>#define（字符替换）</li></ul><h2 id="信息-函数"><a href="#信息-函数" class="headerlink" title="信息 == 函数"></a>信息 == 函数</h2><p>函数使得各种类型的数据有序地进行交互。</p><h2 id="能量"><a href="#能量" class="headerlink" title="能量"></a>能量</h2><p>能量从外界摄取，就像是点下了运行的按钮。</p><h2 id="对象实例与抽象类"><a href="#对象实例与抽象类" class="headerlink" title="对象实例与抽象类"></a>对象实例与抽象类</h2><p>现实世界中的信息和物质影射到C++语言中变为函数和变量。</p><p>而在C++语言中：</p><ul><li>具体事物 == 对象实例</li><li>一类事物 == 抽象类</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>每个人对同一事物的类的定义可能有所不同，因为一方面每个人的收敛思维和抽象能力不同，从而导致抽象的层次不同；另一方面，在不同的应用场景之下，抽象层次也不尽相同。</p><p>所以，对对象实例的抽象，即抽象类的形成应该视具体情况而定。</p>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (4)</title>
      <link href="/2018/09/27/Intercultural-Communication-4/"/>
      <url>/2018/09/27/Intercultural-Communication-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Intercultural-communication-skills"><a href="#Intercultural-communication-skills" class="headerlink" title="Intercultural communication skills"></a>Intercultural communication skills</h1><blockquote><p>Q: What <code>abilities</code> do employers look for from employees about intercultural skills?<br>A: Understand people from different cultural backgrounds, build trust, demonstrate respect, and speak other languages.</p></blockquote><a id="more"></a><h2 id="What-do-employers-understand-by-intercultural-skills"><a href="#What-do-employers-understand-by-intercultural-skills" class="headerlink" title="What do employers understand by intercultural skills ?"></a>What do employers understand by intercultural skills ?</h2><h3 id="Descriptor"><a href="#Descriptor" class="headerlink" title="Descriptor"></a>Descriptor</h3><ol><li>contexts and viewpoints</li><li>respect</li><li>settings</li><li>differences</li><li>languages</li><li>ideas and ways of thinking</li></ol><h2 id="Why-do-employers-think-that-intercultural-skills-are-important"><a href="#Why-do-employers-think-that-intercultural-skills-are-important" class="headerlink" title="Why do employers think that intercultural skills are important ?"></a>Why do employers think that intercultural skills are important ?</h2><blockquote><p>Benefits:</p><ul><li>earnings</li><li>new clients</li><li>diverse teams</li><li>brand and reputation</li></ul></blockquote><blockquote><p>Risks:</p><ul><li>loss of clients</li><li>damage to reputation</li><li>team conflict</li></ul></blockquote><h2 id="How-do-employers-evaluate-job-candidates-for-intercultural-skills"><a href="#How-do-employers-evaluate-job-candidates-for-intercultural-skills" class="headerlink" title="How do employers evaluate job candidates for intercultural skills ?"></a>How do employers evaluate job candidates for intercultural skills ?</h2><blockquote><ul><li>Strong communication (interview and selection)</li><li>Foreign language</li><li>Cultural sensitivity (interview)</li><li>Studying overseas</li><li>Working overseas</li></ul></blockquote><h2 id="The-Ritual-of-Conversation-across-Cultures"><a href="#The-Ritual-of-Conversation-across-Cultures" class="headerlink" title="The Ritual of Conversation across Cultures"></a>The Ritual of Conversation across Cultures</h2><h3 id="Key-Terms-Preview"><a href="#Key-Terms-Preview" class="headerlink" title="Key Terms Preview"></a>Key Terms Preview</h3><blockquote><p>&amp;&amp;&amp;&amp;&amp;</p><ul><li>absent presence</li><li>conversational initiation</li><li>phatic communion</li><li>conversational preview</li><li>conversational talking points </li><li>conversational feedback</li><li>conversational closing</li></ul></blockquote><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><blockquote><p>Q: What is absent presence ?<br>A: A behavior that someone can be <code>here</code>, but also be <code>there</code>, in <code>another world</code>, <code>separate</code> from his or her <code>surroundings</code>, including <code>people</code>. </p></blockquote><blockquote><p>Q: What should a skilled intercultural communicator know ?<br>A: When to <code>speak</code>, when to remain <code>silent</code>, and to always stop speaking before the listener stops <code>listening</code>.</p></blockquote><blockquote><p>Q: What is an important first step when engaging in a conversation ?<br>A: Being open to others and their differences.</p></blockquote><blockquote><p>Q: Why discuss the ritual of conversation ?<br>A: Because it is one of the main ways we interact across cultures and it is ripe for misunderstandings.</p></blockquote><blockquote><p>Q: What dose the ritual of conversation will allow you to do when examining it ?<br>A: Consider its components, predict the next turn, anticipate an opening or closing, and beconme a better conversationalist.</p></blockquote><h3 id="Initiation-1st-stage"><a href="#Initiation-1st-stage" class="headerlink" title="Initiation (1st stage)"></a>Initiation (1st stage)</h3><blockquote><p>Q: What does conversational initiation require ?<br>A: It requires you to be open to interaction.</p></blockquote><blockquote><p>Q: What does ‘small talk phatic communion’ reinforced ?<br>A: A idea that there is a degree of ritual across cultures on how we initiate, engage, and conclude conversations.</p></blockquote><h3 id="Preview-2nd-stage"><a href="#Preview-2nd-stage" class="headerlink" title="Preview (2nd stage)"></a>Preview (2nd stage)</h3><blockquote><p>Q: What is <code>conversational preview</code> ?<br>A: An <code>indication, verbal or nonverbal</code>, of <code>what the conversation is about</code>, both in terms of <code>content</code> and in terms of the <code>relationship</code>.</p></blockquote><h3 id="Talking-Points-3rd-stage"><a href="#Talking-Points-3rd-stage" class="headerlink" title="Talking Points (3rd stage)"></a>Talking Points (3rd stage)</h3><blockquote><p>Q: What is <code>talking points</code> ?<br>A: It represents the <code>essential meanings shared</code> in the interaction.</p></blockquote><h3 id="Feedback-4th-stage"><a href="#Feedback-4th-stage" class="headerlink" title="Feedback (4th stage)"></a>Feedback (4th stage)</h3><blockquote><p>Q: What is <code>conversational feedback</code> ?<br>A: It allows the conversational partners to <code>clarify, restate, or discuss</code> the points of the conversation to arrive <code>a sense of mutual understanding</code>.</p></blockquote><h3 id="Closing-5th-stage"><a href="#Closing-5th-stage" class="headerlink" title="Closing (5th stage)"></a>Closing (5th stage)</h3><blockquote><p>Q: What is <code>conversational closing</code> ?<br>A: It is a <code>verbal</code> and/or <code>nonverbal</code> exchange where the conversational partners agree to <code>end</code> the interaction.</p></blockquote><blockquote><p>Q: What are the factors that influence what you say and hou you close a conversation ?<br>A: Include your <code>relationship</code> and level of <code>familiarity</code> with the person or group. But it is often best to <code>signal</code> your attention to close the conversation clearly to avoid misunderstanding.</p></blockquote><h1 id="Course-Notes"><a href="#Course-Notes" class="headerlink" title="Course Notes"></a>Course Notes</h1><blockquote><p>Q: <code>Four elements</code> of intercultural communication.(C-VPN)<br>A: </p><ul><li>Perception</li><li>Verbal Process</li><li>Nonverbal Process</li><li>Contextual Elements</li></ul></blockquote><blockquote><p>Q: <code>Why</code> do we need to learn intercultural communication ?<br>A: </p><ol><li>self-awareness</li><li>demographic changes</li><li>ethnocentrism</li><li>creative problem solving</li><li>workplace economic globalization</li><li>global and interpersonal peace respect</li></ol></blockquote><blockquote><p>Q: What is <code>ethnocentrism</code> ?<br>A: Tendency to think that our culture is more superior to other.</p></blockquote><blockquote><p>Q: What is <code>perception</code> ?<br>A: </p><ul><li>beliefs</li><li>values</li><li>attitudes</li><li>world views</li><li>social organization</li></ul></blockquote><blockquote><p>Q: What is <code>verbal process</code> ?<br>A: The ways in which cultures employ symbols to portray things and experiences.</p></blockquote><blockquote><p>Q: What is <code>nonverbal process</code> ?<br>A: Shared thoughts and feelings of bodily behavior, time and space.</p></blockquote><blockquote><p>Q: What is <code>contextual elements</code> ?<br>A: </p><ul><li>business</li><li>education and health care</li><li>tourism</li><li>personal relationships</li></ul></blockquote><p><img alt="Ritual model of Communication" data-src="ritual.png"></p><hr><p><a href="https://didongdongdi.github.io/2018/10/12/Intercultural-Communication-5/">Next Lecture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Summary of Intercultural Communication (3)</title>
      <link href="/2018/09/24/Intercultural-Communication-3/"/>
      <url>/2018/09/24/Intercultural-Communication-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Interpersonal-amp-intercultural-communication-skills"><a href="#Interpersonal-amp-intercultural-communication-skills" class="headerlink" title="Interpersonal &amp; intercultural communication skills"></a>Interpersonal &amp; intercultural communication skills</h1><h2 id="INTERPERSONAL-SKILLS-6"><a href="#INTERPERSONAL-SKILLS-6" class="headerlink" title="INTERPERSONAL SKILLS (6)"></a>INTERPERSONAL SKILLS (6)</h2><ul><li>Communication Skills</li><li>Emotional Intelligence</li><li>Conflict Resolution and Mediation Skills</li><li>Team-Working, Groups and Meetings</li><li>Decision-Making and Problem-Solving</li><li>Negotiation and Persuasion Skills</li></ul><a id="more"></a><h2 id="What-is-Interpersonal-Communication"><a href="#What-is-Interpersonal-Communication" class="headerlink" title="What is Interpersonal Communication"></a>What is Interpersonal Communication</h2><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>Definition: the <code>process</code> by which people <code>exchange</code> <code>information, feelings, and meaning</code> through verbal and non-verbal <code>messages</code>: it is <code>face-to-face</code> communication.</p></blockquote><blockquote><p>&amp;&amp;&amp;&amp;&amp;<br>1.<code>how</code> it is said: <code>non-verbal</code> messages sent through tone of voice, facial expressions, gestures and body language.<br>2.<code>what</code> is actually said : the <code>language</code> used.</p></blockquote><blockquote><p>Q: How an observer receive messages from a person without speech? (6 points)<br>A: posture, facial expression, and dress to form an impression of the other’s role,emotional state, personality and/or intentions.</p></blockquote><h2 id="Elements-of-Interpersonal-Communication-3C-MNF-amp-amp-amp-amp-amp"><a href="#Elements-of-Interpersonal-Communication-3C-MNF-amp-amp-amp-amp-amp" class="headerlink" title="Elements of Interpersonal Communication (3C+MNF) &amp;&amp;&amp;&amp;&amp;"></a>Elements of Interpersonal Communication (3C+MNF) &amp;&amp;&amp;&amp;&amp;</h2><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><blockquote><ul><li>where</li><li>roles</li><li>responsibilities</li><li>relative status</li><li>emotional climate</li><li>expectations</li></ul></blockquote><h3 id="Communicators"><a href="#Communicators" class="headerlink" title="Communicators"></a>Communicators</h3><blockquote><ul><li>one-way process</li><li>two-way processes (feedback)</li></ul></blockquote><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><blockquote><ul><li>verbal</li><li>non-verbal (such as facial expressions, tone of voice, gestures and body language) (can reveal more about <code>emotional attitudes</code> which may underlie the content of speech)</li></ul></blockquote><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><blockquote><p>Definition: the phycical means by which the message is transferred from one person to another</p></blockquote><h3 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h3><blockquote><p>Consists:</p><ul><li>messages the receiver returns</li><li>receiver’s reaction</li></ul></blockquote><blockquote><p>Type:</p><ul><li>direct verbal statements</li><li>subtle facial expressions</li><li>changes in posture</li></ul></blockquote><p>Note: The receiver may also respond to the <code>unintentional</code> message as well as the <code>intentional</code> message.</p><h3 id="Noise"><a href="#Noise" class="headerlink" title="Noise"></a>Noise</h3><blockquote><p>Definition: anything that distorts the message</p></blockquote><blockquote><p>Examples:</p><ul><li>sound</li><li>complicated jargon</li><li>inappropriate body language</li><li>inattention</li><li>disinterest</li><li>cultural differences</li></ul></blockquote><h2 id="Uses-of-Interpersonal-Communication"><a href="#Uses-of-Interpersonal-Communication" class="headerlink" title="Uses of Interpersonal Communication"></a>Uses of Interpersonal Communication</h2><ul><li>information ( –&gt; and &lt;– )</li><li>attitudes and behavior</li><li>contacts and relationships</li><li>world and experiences</li><li>needs</li><li>emotional support ( –&gt; and &lt;– )</li><li>decisions and problems</li><li>behavior</li><li>power</li></ul><hr><p><a href="https://didongdongdi.github.io/2018/09/27/Intercultural-Communication-4/">Next Lecture</a></p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Competence </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitCommand</title>
      <link href="/2018/08/29/GitConmand/"/>
      <url>/2018/08/29/GitConmand/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/DiDongDongDi/GitCommand" target="_blank" rel="noopener">GitHub地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the Classification of Programming Language</title>
      <link href="/2018/05/26/the%20Classification%20of%20Programming%20Language/"/>
      <url>/2018/05/26/the%20Classification%20of%20Programming%20Language/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机语言分类"><a href="#计算机语言分类" class="headerlink" title="计算机语言分类"></a>计算机语言分类</h1><p>低级语言</p><p>高级语言</p><p>专用语言</p><p>脚本语言 </p><a id="more"></a><h1 id="对数据类型的要求"><a href="#对数据类型的要求" class="headerlink" title="对数据类型的要求"></a>对数据类型的要求</h1><p>强类型语言—-强调数据类型 </p><p>弱类型语音—-忽略数据类型 </p><h1 id="具体介绍"><a href="#具体介绍" class="headerlink" title="具体介绍"></a>具体介绍</h1><h3 id="低级语言"><a href="#低级语言" class="headerlink" title="低级语言"></a>低级语言</h3><p>机器语言、汇编语言和符号语言</p><p>注意：汇编语言源程序必须经过汇编，生成目标文件，然后执行 </p><h3 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h3><p>BASIC（True basic、Qbasic、Virtual Basic）、C、C++、PASCAL、FORTRAN、智能化语言（LISP、Prolog）、动态语言(Python、PHP、Ruby、Lua)等等。 </p><p>注意：高级语言源程序可以用解释、编译两种方式执行。通常用后一种。 我们使用的C语言就是使用的后者。</p><h3 id="专用语言"><a href="#专用语言" class="headerlink" title="专用语言"></a>专用语言</h3><p>CAD系统中的绘图语言和DBMS的数据库查询语言。 </p><h3 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h3><p>（Script language，scripting language，scripting programming language）是为了缩短传统的编写-编译-链接-运行（edit-compile-link-run） 过程而创建的计算机编程语言。脚本语言一般都有相应的脚本引擎来解释执行。 他们一般需要解释器才能运行。一个脚本通常是解释运行而非编译。脚本语言通常都有简单、易学、易用的特性，目的就是希望能让程序员快速完成程序的编写工作。</p><h1 id="计算机高级语言"><a href="#计算机高级语言" class="headerlink" title="计算机高级语言"></a>计算机高级语言</h1><h3 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h3><p>编译是指在应用源程序执行之前，就将程序源代码“翻译”成目标代码(机器语言)，因此其目标程序可以脱离其语言环境独立执行，使用比较方便、效率较高 。但应用程序一旦需要修改，必须先修改源代码，再重新编译生成新的目标文件(＊ .OBJ)才能执行，只有目标文件而没有源代码，修改很不方便。现在大多数的编程语言都是编译型的。编译程序将源程序翻译成目标程序后保存在另一个文件中，该目标程序可脱离编译程序直接在计算机上多次运行。大多数软件产品都是以目标程序形式发行给用户的，不仅便于直接运行，同时又使他人难于盗用其中的技术。C、 C++、Fortran、Visual Foxpro、Pascal、Delphi、Ada都是编译实现的。 </p><h3 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h3><p>解释型语言的实现中，翻译器并不产生目标机器代码，而是产生易于执行的中间代码，这种中间代码与机器代码是不同的，中间代码的解释是由软件支持的，不能直接使用硬件，软件解释器通常会导致执行效率较低。用解释型语言编写的程序是由另一个可以理解中间代码的解释程序执行的。与编译程序不同的是，解释程序的任务是逐一将源程序的语句解释成可执行的机器指令，不需要将源程序翻译成目标代码后再执行。解释程序的优点是当语句出现语法错误时，可以立即引起程序员注意，而程序员在程序开发期间就能进行校正。对于解释型Basic语言，需要一个专门的解释器解释执行 Basic程序，每条语言只有在执行才被翻译。这种解释型语言每执行一次就翻译一次，因而效率低下。一般地，动态语言都是解释型的，如Tcl、 Perl、Ruby、VBScript、 JavaScript等。 </p><h3 id="混合型"><a href="#混合型" class="headerlink" title="混合型"></a>混合型</h3><p>Java很特殊，Java程序也需要编译，但是没有直接编译成为机器语言，而是编译成为字节码，然后在Java虚拟机上用解释方式执行字节码。Python 的也采用了类似Java的编译模式，先将Python程序编译成Python字节码，然后由一个专门的 Python字节码解释器负责解释执行字节码。 </p><h3 id="脚本语言-1"><a href="#脚本语言-1" class="headerlink" title="脚本语言"></a>脚本语言</h3><p>动态程序一般有两种实现方式，一是二进制方式，一是脚本方式。 二进制方式是先将我们编写的程序进行编译，变成机器可识别的指令代码（如.exe文件），然后再执行。这种编译好的程序我们只能执行、使用，却看不到他的程序内容。 </p><p>脚本程序相对一般程序开发来说比较接近自然语言，可以不经编译而是解释执行，利于快速开发或一些轻量的控制。一般的脚本语言的执行只同具体的解释执行器有关，所以只要系统上有相应语言的解释程序就可以做到跨平台。脚本script是使用一种特定的描述性语言，依据一定的格式编写的可执行文件，又称作宏或批处理文件。脚本通常可以由应用程序临时调用并执行。各类脚本目前被广泛地应用于网页设计中，因为脚本不仅可以减小网页的规模和提高网页浏览速度，而且可以丰富网页的表现，如动画、声音等。 </p><p>脚本简单地说就是一条条的文字命令，这些文字命令是我们可以看到的（如可以用记事本打开查看、编辑），脚本程序在执行时，是由系统的一个解释器，将其一条条的翻译成机器可识别的指令，并按程序顺序执行。因为脚本在执行时多了一道翻译的过程，所以它比二进制程序执行效率要稍低一些。 我们上面提到的各种动态语言，如ASP、PHP、CGI、JSP等，都是脚本语言。 按目前的服务规则，虚拟主机网站只能采用脚本语言来实现。脚本英文为Script。实际上脚本就是程序，一般都是有应用程序提供的编程语言。应用程序包括浏览器(javascript、VBScript)、多媒体创作工具，应用程序的宏和创作系统的批处理语言也可以归入脚本之类。脚本同我们平时使用的VB、C语言等的区别主要是： </p><p>1、脚本语法比较简单，比较容易掌握。</p><p>2、脚本与应用程序密切相关，所以包括相对应用程序自身的功能。</p><p>3、脚本一般不具备通用性，所能处理的问题范围有限。</p><p>4、脚本语言(JavaScript,VBscript等)介于HTML和C,C++,Java,C#等编程语言之间。 HTML通常用于格式化和链结文本。而编程语言通常用于向机器发出一系列复杂的指令。 </p><p>5、脚本语言与编程语言也有很多相似地方，其函数与编程语言比较相象一些,其也涉及到变量。与编程语言之间最大的区别是编程语言的语法和规则更为严格和复杂一些。</p><p>6、与程序代码的关系:脚本也是一种语言，其同样由程序代码组成。 注：脚本语言一般都有相应的脚本引擎来解释执行。 他们一般需要解释器才能运行。JAVASCRIPT,ASP,PHP,PERL,Nuva都是脚本语言。C/C++编译、链接后，可形成独立执行的exe文件。 </p><p>7、脚本语言是一种解释性的语言,例如vbscript,javascript,installshield script等等,它不象c/c++等可以编译成二进制代码,以可执行文件的形式存在. 脚本语言不需要编译，可以直接用，由解释器来负责解释。 </p><p>8、脚本语言一般都是以文本形式存在,类似于一种命令. 举个例子说,如果你建立了一个程序,叫aaa.exe,可以打开.aa为扩展名的文件. 你为.aa文件的编写指定了一套规则(语法),当别人编写了.aa文件后,你的程序用这种规则来理解编写人的意图,并作出回应.那么,这一套规则就是脚本语言. 脚本是批处理文件的延伸，是一种纯文本保存的程序，一般来说的计算机脚本程序是确定的一系列控制计算机进行运算操作动作的组合，在其中可以实现一定的逻辑分支等。 </p><h1 id="新兴编程语言"><a href="#新兴编程语言" class="headerlink" title="新兴编程语言"></a>新兴编程语言</h1><p>perl擅长文字处理，python擅长数值处理。Perl设计之初就是为了方便编写复杂高效的系统脚本，它也是应该最为广泛的脚本编程语言。它在编程方面相当于瑞士军刀，对字符、文本文件处理能力很强，以前要求 shell+sed+awk+C才能完成的任务，只需perl脚本就可以完成了。而且应用领域一直在拓宽，支持面向对象程序设计。Python面向对象的动态公共语言，适于脚本编程和快速开发，它最显著的特点是作为编译语言（如C）和脚本语言（如perl）之间的桥接语言，它具有的强大功能，可扩充性及面向对象的特征使其成为大规模应用程序开发工具。</p><p><img alt="the Classification of Programming Language" data-src="the Classification of Programming Language.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Classification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flipped (Week3)</title>
      <link href="/2018/05/26/Flipped_Week3/"/>
      <url>/2018/05/26/Flipped_Week3/</url>
      
        <content type="html"><![CDATA[<h1 id="2018-07-11-p14"><a href="#2018-07-11-p14" class="headerlink" title="2018-07-11-p14"></a>2018-07-11-p14</h1><p>1, stalk  [stɔːk]</p><p>n. （植物的）茎，秆；（支持叶子、果实和花的）梗，柄；追踪；高视阔步</p><p>vt. 追踪，潜近；高视阔步</p><p>vi. 高视阔步地走；潜近，偷偷接近</p><a id="more"></a><p>2, flinch  [‘flɪn(t)ʃ]</p><p>vi. 退缩；畏惧</p><p>n. 退缩；畏惧</p><p>3, look away  </p><p>转移目光；扭头看别处；把脸转过去</p><p>4, pass the salt  </p><p>递食盐</p><p>爱已消失，覆水难收（俗语）</p><p>5, prejudice  [‘predʒʊdɪs]</p><p>n. 偏见；侵害</p><p>vt. 损害；使有偏见</p><p>6, dismiss  [dɪs’mɪs]</p><p>vt. 解散；解雇；开除；让…离开；不予理会、不予考虑</p><p>vi. 解散</p><p>7, slam  [slæm]</p><p>vt. 砰地关上；猛力抨击</p><p>vi. 砰地关上；猛力抨击</p><p>n. 猛击；砰然声</p><p>n. (Slam)人名；(阿拉伯)萨拉姆；(罗)斯拉姆</p><p>8, flop down  </p><p>趴倒</p><p>重重地坐下或躺下</p><p>9, fume  [fjuːm]</p><p>vi. 冒烟；发怒</p><p>vt. 熏；冒烟；愤怒地说</p><p>n. 烟；愤怒，烦恼</p><p>n. (Fume)人名；(日)不免(姓)</p><p>10, shove  [ʃʌv]</p><p>vt. 挤；强使；撞；猛推</p><p>n. 推；挤</p><p>n. (Shove)人名；(英)肖夫</p><p>11, sulky  [‘sʌlkɪ]</p><p>adj. 生气的；阴沉的</p><p>12, shaker  [‘ʃeɪkə]</p><p>n. 振动器；混和器；调酒器</p><p>n. (Shaker)人名；(阿拉伯、哈萨、乌兹、塔吉、吉尔、阿塞)沙克尔</p><p>13, raisin  [‘reɪz(ə)n]</p><p>n. 葡萄干</p><p>n. (Raisin)人名；(法)雷森</p><p>14, nibble  [‘nɪb(ə)l]</p><p>vi. 细咬；一点一点地咬；吹毛求疵</p><p>vt. 细咬；一点一点地咬；吹毛求疵</p><p>n. 轻咬；啃；细咬</p><p>15, gristle  [‘grɪs(ə)l]</p><p>n. 软骨；软骨结构</p><p>16, shakedown  [‘ʃeɪkdaʊn]</p><p>n. 调整，整顿；临时床铺；勒索；彻底搜查</p><p>adj. 试航的</p><p>17, upper  [‘ʌpə]</p><p>adj. 上面的，上部的；较高的</p><p>n. (Upper)人名；(英)厄珀</p><p>18, circus  [‘sɜːkəs]</p><p>n. 马戏；马戏团</p><p>19, jag  [dʒæg]</p><p>n. 缺口；狂欢</p><p>vt. 使成锯齿状；使成缺口</p><p>20, be miffed at  </p><p>是有点生气</p><p>21, Nada  </p><p>abbr. 美国汽车经销商联合会（the National Automobile Dealers Association）</p><p>n. (Nada)人名；(塞、葡、俄、阿拉伯、英)娜达(女名)，纳达</p><p>22, halfway  [hɑːf’weɪ; ‘hɑːfweɪ]</p><p>adv. 到一半；在中途</p><p>adj. 中途的；不彻底的</p><p>23, sneak a peek  </p><p>偷看</p><p>excused myself and holed up in my room<br>原谅我自己躲在我的房间里</p><p>I’m bent about something.</p><p>take cuts in the milk line</p><p>they wound up grinding it down into the dirt</p><p>他们把它碾成泥土</p><h1 id="2018-07-12-p15"><a href="#2018-07-12-p15" class="headerlink" title="2018-07-12-p15"></a>2018-07-12-p15</h1><p>take cuts in the milk line</p><p>they wound up grinding it down into they dirt.</p><p>他们把它碾成泥土。</p><p>1, punch in  </p><p>上班打卡</p><p>2, hung up  </p><p>挂断，提高；挂起来；套牢</p><p>3, fake  [feɪk]</p><p>n. 假货；骗子；假动作</p><p>vt. 捏造；假装…的样子</p><p>vi. 假装；做假动作</p><p>adj. 伪造的</p><p>n. (Fake)人名；(英)费克</p><p>4, whip  [wɪp]</p><p>vt. 抽打；煽动；搅打（蛋，奶油）；彻底击败</p><p>n. 鞭子；抽打；车夫；[机] 搅拌器</p><p>vi. 抽打；急走；拍击</p><p>5, charge through  </p><p>从人丛中冲过</p><p>6, unsolicited  [ʌnsə’lɪsɪtɪd]</p><p>adj. 未经请求的；主动提供的</p><p>7, edification  [,edɪfɪ’keɪʃ(ə)n]</p><p>n. 启迪；教诲；精神修养</p><p>8, hurry off  </p><p>匆匆离去</p><p>9, sycamore  [‘sɪkəmɔː]</p><p>n. 美国梧桐；西克莫无花果树；假挪威槭</p><p>10, stump  [stʌmp]</p><p>n. 树桩；残余部分；假肢</p><p>vt. 砍伐；使为难；在…作巡回政治演说</p><p>vi. 笨重地行走；发表竞选演说</p><p>n. (Stump)人名；(英)斯顿普；(德)施通普</p><p>11, sucker  [‘sʌkə]</p><p>n. 吸管；乳儿；易受骗的人</p><p>vi. 成为吸根；长出根出条</p><p>vt. 从……除去吸根</p><p>n. (Sucker)人名；(德)祖克尔</p><p>12, budge  [bʌdʒ]</p><p>vi. 挪动；微微移动；改变态度或意见；服从</p><p>vt. 使让步；移动；使改变态度或意见</p><p>n. 羔羊皮</p><p>n. (Budge)人名；(英)巴奇</p><p>13, derailleur  [dɪ’reɪl(j)ə]</p><p>n. （法）变速器；装有变速器的自行车</p><p>14, rusty  [‘rʌstɪ]</p><p>adj. 生锈的，腐蚀的；铁锈色的，锈色的；迟钝的</p><p>15, lookout  [‘lʊkaʊt]</p><p>n. 监视；监视哨；警戒；守望者；担心的事；前景</p><p>16, truck  [trʌk]</p><p>n. 卡车；交易；手推车</p><p>vi. 驾驶卡车；以物易物</p><p>vt. 交易；以卡车运输</p><p>adj. （美）运货汽车的</p><p>n. (Truck)人名；(德)特鲁克</p><p>17, poncho  [‘pɒn(t)ʃəʊ]</p><p>n. 雨披；南美披风</p><p>18, let out  </p><p>v. 放出；泄露；出租</p><p>19, in the nick of time  </p><p>及时；恰好</p><p>20, soak  [səʊk]</p><p>vt. 吸收，吸入；沉浸在（工作或学习中）；使……上下湿透</p><p>vi. 浸泡；渗透</p><p>n. 浸；湿透；大雨</p><p>21, misinterpret  [mɪsɪn’tɜːprɪt]</p><p>vt. 曲解，误解</p><p>22, landscape  [ˈlændskeɪp]</p><p>n. 风景；风景画；景色；山水画；乡村风景画；地形；（文件的）横向打印格式</p><p>vt. 对…做景观美化，给…做园林美化；从事庭园设计</p><p>vi. 美化（环境等），使景色宜人；从事景观美化工作，做庭园设计师</p><p>23, weary  [‘wɪərɪ]</p><p>adj. 疲倦的；厌烦的；令人厌烦的</p><p>vi. 疲倦；厌烦</p><p>vt. 使疲倦；使厌烦</p><p>24, studio  [‘stjuːdɪəʊ]</p><p>n. 工作室；[广播][电视] 演播室；画室；电影制片厂</p><p>25, garage  [ˈgærɑ:ʒ, ˈgærɪdʒ;]</p><p>n. 车库；汽车修理厂；飞机库</p><p>vt. 把……送入车库；把（汽车）开进车库</p><p>n. （阿拉伯）贾拉杰（人名）</p><p>26, mason  [‘meɪs(ə)n]</p><p>n. 泥瓦匠；共济会会员（等于freemason）</p><p>vt. 用砖瓦砌成</p><p>27, snapshots  </p><p>n. [摄] 快照（snapshot的复数）</p><p>v. 拍快照（snapshot的三单形式）</p><p>28, clip  [klɪp]</p><p>n. （塑料或金属的）夹子；回纹针；修剪；剪报</p><p>vt. 剪；剪掉；缩短；给…剪毛（或发）用别针别在某物上，用夹子夹在某物上</p><p>vi. 剪；修剪；剪下报刊上的文章（或新闻、图片等）；迅速行动；用别针别在某物上，用夹子夹在某物上</p><p>29, easel  [‘iːz(ə)l]</p><p>n. 画架；黑板架</p><p>30, canvas  [‘kænvəs]</p><p>n. 帆布</p><p>vt. 用帆布覆盖，用帆布装备</p><p>adj. 帆布制的</p><p>31, transcend  [træn’send; trɑːn-]</p><p>vt. 胜过，超越</p><p>32, callus  [‘kæləs]</p><p>n. [皮肤] 胼胝；愈合组织；老茧</p><p>vt. 使生老茧；使变硬；使结痂</p><p>vi. 变硬；结痂；生老茧</p><p>n. (Callus)人名；(法)卡吕；(意)卡卢斯</p><p>33, possess  [pə’zes]</p><p>vt. 控制；使掌握；持有；迷住；拥有，具备</p><p>34, graceful  [‘greɪsfʊl; -f(ə)l]</p><p>adj. 优雅的；优美的</p><p>35, spiritual  [‘spɪrɪtʃʊəl; -tjʊəl]</p><p>n. 圣歌（尤指美国南部黑人的）</p><p>adj. 精神的，心灵的</p><p>36, porch  [pɔːtʃ]</p><p>n. 门廊；走廊</p><p>37, peep  [piːp]</p><p>n. 偷看；隐约看见，瞥见</p><p>vi. 窥视；慢慢露出，出现；吱吱叫</p><p>vt. 使出现</p><p>n. (Peep)人名；(爱沙)佩普</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> Novel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flipped (Week4)</title>
      <link href="/2018/05/26/Flipped_Week4/"/>
      <url>/2018/05/26/Flipped_Week4/</url>
      
        <content type="html"><![CDATA[<h1 id="2018-07-20-p16"><a href="#2018-07-20-p16" class="headerlink" title="2018-07-20-p16"></a>2018-07-20-p16</h1><p>1, hay  [heɪ]</p><p>n. 干草</p><p>vt. 把晒干</p><p>vi. 割草晒干</p><a id="more"></a><p>2, cheek  [tʃiːk]</p><p>n. 面颊，脸颊；臀部</p><p>vt. 无礼地向…讲话，对…大胆无礼</p><p>n. (Cheek)人名；(英)奇克</p><p>3, blush  [blʌʃ]</p><p>vi. 脸红；感到惭愧</p><p>n. 脸红；红色；羞愧</p><p>vt. 红著脸表示；使成红色</p><p>n. (Blush)人名；(英)布拉什</p><p>4, scatter  [‘skætə]</p><p>vi. 分散，散开；散射</p><p>vt. 使散射；使散开，使分散；使散播，使撒播</p><p>n. 分散；散播，撒播</p><p>5, record-breaking  [‘rɛkəd,brekɪŋ]</p><p>adj. 破纪录的</p><p>n. 破纪录</p><p>6, lighting  [‘laɪtɪŋ]</p><p>n. 照明设备，舞台灯光</p><p>v. 照明；点燃（light的ing形式）</p><p>7, mature  [mə’tʃʊə]</p><p>adj. 成熟的；充分考虑的；到期的；成年人的</p><p>vi. 成熟；到期</p><p>vt. 使…成熟；使…长成；慎重作出</p><p>8, philosophical  [fɪlə’sɒfɪk(ə)l]</p><p>adj. 哲学的（等于philosophic）；冷静的</p><p>9, digit  [‘dɪdʒɪt]</p><p>n. 数字；手指或足趾；一指宽</p><p>10, meadow  [‘medəʊ]</p><p>n. 草地；牧场</p><p>n. (Meadow)人名；(英)梅多</p><p>11, peek through  </p><p>12, a beam of light  </p><p>一束光；一束光线，一缕光线</p><p>13, vacant  [‘veɪk(ə)nt]</p><p>adj. 空虚的；空的；空缺的；空闲的；茫然的</p><p>n. (Vacant)人名；(法)瓦康</p><p>14, a built-in slide  </p><p>一个内置幻灯片</p><p>15, trunk  [trʌŋk]</p><p>n. 树干；躯干；象鼻；汽车车尾的行李箱</p><p>vt. 把…放入旅行箱内</p><p>adj. 干线的；躯干的；箱子的</p><p>n. (Trunk)人名；(德、匈、西)特伦克</p><p>16, bent up  </p><p>上弯的</p><p>17, a complete spiral  </p><p>一个完整的循环</p><p>18, a sapling  </p><p>一颗树苗</p><p>19, A testimony to endurance  </p><p>耐力的见证</p><p>20, dive-bomb  </p><p>v. 俯冲轰炸</p><p>21, flown  [fləʊn]</p><p>v. 飞行（fly的过去分词）</p><p>22, ornery  [‘ɔːnərɪ]</p><p>adj. 坏脾气的；低劣的</p><p>23, stripes  [st’raɪps]</p><p>n. 条子布；条纹布（stripe复数形式）</p><p>v. 给…加条纹（stripe的三单形式）</p><p>24, exhaustion  [ɪg’zɔːstʃ(ə)n; eg-]</p><p>n. 枯竭；耗尽；精疲力竭</p><p>25, poop out  </p><p>丧失功能，丧失活力</p><p>（使）筋疲力尽，（使）疲乏</p><p>as oppose to spite</p><p>反对，尽管</p><p>Thirty feet up they just sort of smirk at you and crash for the fun of it.</p><p>30英尺高的时候，他们只是在嘲笑你，然后为它的乐趣而崩溃。</p><h1 id="2018-07-21-p17"><a href="#2018-07-21-p17" class="headerlink" title="2018-07-21-p17"></a>2018-07-21-p17</h1><p>1, scout out  </p><p>寻找</p><p>2, flash  [flæʃ]</p><p>vt. 使闪光；反射</p><p>n. 闪光，闪现；一瞬间</p><p>vi. 闪光，闪现；反射</p><p>adj. 闪光的，火速的</p><p>n. (Flash)人名；(西)弗拉什</p><p>3, shinny up  </p><p>攀爬起来</p><p>4, amount of  </p><p>数量的</p><p>5, intersections  </p><p>n. 交集，交叉点（intersection的复数形式）；[交] 十字路口</p><p>6, rooftops  [‘rʊf’tɑp]</p><p>n. 屋顶</p><p>adj. 屋顶上的</p><p>7, dizzy  [‘dɪzɪ]</p><p>adj. 晕眩的；使人头晕的；昏乱的；心不在焉的；愚蠢的</p><p>vt. 使头晕眼花；使混乱；使茫然</p><p>n. (Dizzy)人名；(英)迪齐</p><p>8, string  [strɪŋ]</p><p>n. 线，弦，细绳；一串，一行</p><p>9, tangle  [‘tæŋg(ə)l]</p><p>n. 纠纷；混乱状态</p><p>vt. 使纠缠；处于混乱状态</p><p>vi. 缠结；乱作一团</p><p>10, soar  [sɔː]</p><p>vi. 高飞；高耸；往上飞舞</p><p>n. 高飞；高涨</p><p>n. (Soar)人名；(英、葡)索尔</p><p>11, breeze  [briːz]</p><p>n. 微风；轻而易举的事；煤屑；焦炭渣；小风波</p><p>vi. 吹微风；逃走</p><p>n. (Breeze)人名；(法)布雷兹</p><p>12, pomegranate  [‘pɒmɪgrænɪt]</p><p>n. 石榴</p><p>13, prized stripes  </p><p>珍贵的条纹</p><p>14, nudge  [nʌdʒ]</p><p>n. 推动；用肘轻推；没完没了抱怨的人</p><p>vt. 推进；用肘轻推；向…不停地唠叨</p><p>vi. 轻推；推进；唠叨</p><p>15, rip  [rɪp]</p><p>vt. 撕；锯</p><p>vi. 裂开，被撕裂</p><p>n. 裂口，裂缝</p><p>n. (Rip)人名；(塞)里普</p><p>16, beet  [biːt]</p><p>n. 甜菜；甜菜根</p><p>vt. 生火；修理；改过</p><p>17, inspect  [ɪn’spekt]</p><p>vt. 检查；视察；检阅</p><p>vi. 进行检查；进行视察</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> Novel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客 百度统计 配置</title>
      <link href="/2018/05/26/BaiduTongji/"/>
      <url>/2018/05/26/BaiduTongji/</url>
      
        <content type="html"><![CDATA[<p>在 <code>baidu_analytics:</code> 后添加百度统计提供的代码中的网址的 <code>htm?</code> 后的部分。 </p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flipped (Week2)</title>
      <link href="/2018/05/26/Flipped_Week2/"/>
      <url>/2018/05/26/Flipped_Week2/</url>
      
        <content type="html"><![CDATA[<h1 id="2018-06-29-p9"><a href="#2018-06-29-p9" class="headerlink" title="2018-06-29-p9"></a>2018-06-29-p9</h1><p>humming // n. 哼唱 adj. 嗡嗡作响的，精力充沛的 v. 嗡嗡作响(hum的ing形式)<br>ninny //傻子<br>whiny //烦躁的；爱抱怨的<br><a id="more"></a><br>gossipy //漫谈式的；喜欢饶舌的<br>backstab //以卑鄙的手段陷害<br>elementary //基本的；初级的；元素的<br>undisputed //毫无疑问的<br>diva //歌剧中的首席女主角<br>lap // n.一圈；膝盖；下摆；山坳 vt.使重叠；拍打；包围 vi.重叠；轻拍；围住<br>calisthenics //健美体操<br>claim //vi. 提出要求 vt. 要求；声称；需要；认领 n. 要求；声称；索赔；断言；值得<br>collapse // vi. 倒塌；瓦解；暴跌 vt. 使倒塌，使崩溃；使萎陷；折叠 n. 倒塌；失败；衰竭<br>strain //n. 张力；拉紧；负担；扭伤；血缘 vi. 拉紧；尽力 vt. 拉紧；滥用；滤去；竭力 n. （植物、动物的）品种；种类<br>stretched //adj. 拉伸的，伸展了的 v. 伸直，伸展；舒展（stretch的过去分词）；伸缩<br>swoon //n. 昏晕；狂喜 vi. 昏晕；惊讶；着迷<br>bug // vt. 烦扰，打扰；装窃听器 vi. 装置窃听器；打扰<br>get out of //逃避；避免<br>asthma //哮喘；气喘<br>ankle //踝<br>delicate //微妙的；精美的，雅致的；柔和的；易碎的；纤弱的；清淡可口的<br>clip //n. （塑料或金属的）夹子；回纹针；修剪；剪报 vt. 剪；剪掉；缩短；给…剪毛（或发）用别针别在某物上，用夹子夹在某物上 vi. 剪；修剪；剪下报刊上的文章（或新闻、图片等）；迅速行动；用别针别在某物上，用夹子夹在某物上<br>bead //n. 珠子；滴；念珠 vi. 形成珠状，起泡 vt. 用珠装饰；使成串珠状<br>braid //n. 辫子；穗带；发辫 vt. 编织<br>swirl //n. 漩涡；打旋；涡状形 vi. 盘绕；打旋；眩晕；大口喝酒 vt. 使成漩涡<br>ponytail //马尾辫<br>rival //n. 对手；竞争者 adj. 竞争的 vt. 与…竞争；比得上某人 vi. 竞争<br>carousel //旋转木马；行李传送带；轮播<br>shimmy //n. 西迷舞（一种爵士舞）；摇动；女式衬衣 vt. 摇动；振动<br>cuddle //n. 搂抱 vt. 拥抱；亲热地搂住；抚爱地拥抱 vi. 拥抱；偎依；舒服地贴着身睡<br>dandy //n. 花花公子；好打扮的人 adj. 上等的；服装华丽的<br>pushy //有进取心的；爱出风头的；有冲劲的；固执己见的<br>dawn on //开始被理解；渐渐明白<br>swirly //成涡旋形的；纠结的<br>unravel //vt. 解开；阐明；解决；拆散 vi. 解决；散开<br>sniffle //n. 鼻塞声；不断吸鼻子（等于snuffle） vi. 抽鼻涕；抽噎（等于snuffle）<br>gracefully //优雅地；温文地<br>I had her off of him in two seconds flat. //我在两秒钟内把她从他身边拉了下来。<br>herd //    n. 兽群，畜群；放牧人 vi. 成群，聚在一起 vt. 放牧；使成群</p><h1 id="2018-06-30-p10"><a href="#2018-06-30-p10" class="headerlink" title="2018-06-30-p10"></a>2018-06-30-p10</h1><p>headlock //摔跤中的夹头<br>hammerlock //（摔跤）将对方手臂扭到背后<br>no amount of //即使再大（或再多）的…（也不）<br>squawking //vt. 抗议；发出响而粗的叫声；大声抱怨 n. 抗议；叫声；诉苦；故障 vt. 粗声叫出；诉苦<br>mussed-up //乱的<br>while I told my side of things to the principal //当我把事情告诉校长的时候<br>sturdy //adj. 坚定的；强健的；健全的<br>swift //n. 褐雨燕 adj. 快的；敏捷的；立刻的 adv. 迅速地<br>dilemma //困境<br>restrain //vt. 抑制；约束；制止<br>braid //辫子；穗带<br>blush //vi. 脸红；感到惭愧 n. 脸红；红色；羞愧 vt. 红着脸表示；使成红色<br>detention //n. 拘留；延迟；挽留<br>lean //vi. 倾斜；倚靠；倾向；依赖 adj. 瘦的；贫乏的 vt. 使倾斜 n. 瘦肉；倾斜；倾斜度<br>earlobes //耳垂<br>fuzz //n. 绒毛；模糊；细毛；警员 vi. 作绒毛状飞散；变成绒毛状；变得模糊 vt. 使模糊；起毛<br>blond //adj. 金发的 n. 白肤碧眼金发的人<br>move in with //搬去和……一起住<br>do crossword puzzles and track his stocks //做填字游戏，追踪他的股票<br>distraction //n. 注意力分散；消遣；心烦意乱<br>Given no one to justify it to … //没有人可以证明这一点</p><h1 id="2018-07-03-P11"><a href="#2018-07-03-P11" class="headerlink" title="2018-07-03-P11"></a>2018-07-03-P11</h1><p>wind up //结束；使紧张；卷起；（非正式）忽悠某人（wind sb up）；上紧(钟、表等的)发条<br>coverage //覆盖；覆盖范围；新闻报道<br>climb out of a sycamore tree //爬出一棵梧桐树<br>maple //枫树；淡棕色<br>birch //桦树；桦条；桦木；用桦条鞭打<br>vacant //空虚的；空的；空缺的；空闲的；茫然的<br>massive //大量的；巨大的；魁梧的<br>gnarl //n. 木节；木瘤 vt. 咆哮；形成木节<br>yak //耗牛 喋喋不休<br>visually //形象化地；外表上；看得见地<br>scourge //vt. 鞭打；蹂躏；严斥；痛斥 n. 鞭；灾祸；鞭子；苦难的根源<br>weed //vt. 除草；铲除 n. 杂草 vi. 除草<br>stick out //突出；坚持；醒目<br>barnyard //n. 谷仓前地空场地 adj. 下流地；粗俗的<br>a boa constrictor //一条蟒蛇<br>beady-eyed //起泡地；饰有珠子的；晶亮如小珠的<br>They held that rodent up by its tail and gulp, the boa swallowed it whole. //他们抓住那只啮齿动物的尾巴，把它提起来，蟒蛇把它整个吞了下去。<br>channel //vt. 引导，开导；形成河道 n. 通道；频道；沟渠；海峡<br>plump up //变丰满；鼓起<br>now //conj. 由于；既然<br>edge //n. 边缘；优势；刀刃；锋利 vt. 使锐利；将…开刃；给…加上边 vi. 缓缓移动；侧着移动<br>overboard //adv. 自船上落下；向船外 adj. 及其热心的；全身心投入的<br>permanently //永久地<br>screw up //拧紧；鼓舞；弄糟；狠狠地提高<br>clown around with //小丑在<br>peel big chunks of bark off //把大块地树皮剥掉<br>slide down the crook in its trunk //从树干上滑下来<br>swing from //悬挂<br>slump beneath //经济衰退之下<br>squeal //vt. 告密；长声尖叫 vi. 告密；尖声地说 n. 尖叫声<br>mutant toy-eating foliage //mutant n.突变体；突变异种 adj. 突变的 toy-eating ? foliage 植物；叶子（总称）<br>hostage //人质；抵押品</p><h1 id="2018-07-03-p12"><a href="#2018-07-03-p12" class="headerlink" title="2018-07-03-p12"></a>2018-07-03-p12</h1><p>relieve //vt. 解除；使不单调乏味；换…地班；解围；使放心<br>weenie //细小的；微小的<br>trap //vt. 诱捕；使…受限制；使…陷入困境；吸收；使…上当 n. 陷阱；圈套；困境；[建] 存水湾 vi. 设陷阱<br>goner //已死者；无望的人；落魄的人<br>scramble up //爬上；巴结；搅混起来<br>set off //出发；引起；动身；使爆炸；抵销；分开<br>outdo //vt. 超过；胜过<br>crook //n. 骗子，坏蛋；弯处，弯曲部分；钩状物 vt. 使弯曲；欺骗，诈骗 vi. 弯曲，成钩形<br>limb //n. 肢，臂；分支；枝干 vt. 切断…的手足；从…上截下树枝<br>bungee //n. 蹦极；橡皮筋；松紧绳<br>shatter //vt. 粉碎；打碎；破坏；破掉；使散开 vi. 粉碎；损坏；落叶 n. 碎片；乱七八糟的状态<br>mortify //vt. 抑制；苦修；使…感屈辱 vi. 禁欲；苦行；约束<br>blow-by-blow //详尽的；逐一记录的<br>come up there with her //和她一起上来<br>magnificent //高尚的；壮丽的；华丽的；宏伟的<br>specifically //特别地；明确地<br>swing down from //摇摆不定的<br>wrench //n. 扳手，扳钳；扭伤；痛苦；歪曲；猛扭 vt. 扭伤；猛扭；曲解；折磨 vi. 扭伤；猛扭；猛绞<br>maniac //n. 疯子 adj. 发狂的；狂热的；癫狂的<br>pull up //拔起；停下来；阻止<br>truck //n. 卡车；交易；手推车 vi. 驾驶卡车；以物易物 vt. 交易；以卡车运输 adj. （美）运货汽车的<br>commotion //骚动；暴乱<br>shout stuff up at //对…喊<br>mutant tangle of gnarly  branches  //突变的粗糙的分支<br>pesky //adj. 讨厌的；麻烦的 adv.极端<br>bossy //adj. 专横的；浮雕装饰的；爱指挥他人的 n. 母牛；牛犊<br>bail on //放弃；失约</p><h1 id="2017-07-05-p13"><a href="#2017-07-05-p13" class="headerlink" title="2017-07-05-p13"></a>2017-07-05-p13</h1><p>1, meaty  [‘miːtɪ]<br>adj. 肉的；多肉的；似肉的<br>2, whisker  [‘wɪskə]<br>n. [晶体] 晶须；胡须；腮须<br>3, pushy  [‘pʊʃɪ]<br>adj. 有进取心的；爱出风头的；有冲劲的；固执己见的<br>4, a showoff  </p><p>5, backbone  [‘bækbəʊn]<br>n. 支柱；主干网；决心，毅力；脊椎<br>6, make out<br>理解；辨认出；说明；填写；设法应付<br>7, a fire brigade  </p><p>8, crease  [kriːs]<br>n. 折痕；折缝<br>vi. 起皱<br>vt. 弄皱；使起折痕<br>9, prior  [‘praɪə]<br>adj. 优先的；在先的，在前的<br>n. 小修道院院长；大修道院的副院长; （隐修院）会长; 犯罪前科<br>n. (Prior)人名；(法、西、葡、捷)普里奥尔；(英)普赖尔；(意)普廖尔<br>10, woven  [‘wəʊvn]<br>v. 编织；交织（weave的过去分词）；编造<br>adj. 织物的<br>n. 机织织物<br>11, amputate  [‘æmpjʊteɪt]<br>vt. 截肢；切断；删除<br>12, another few pounds  </p><p>13, come off<br>举行，成功；表现；脱离<br>14, beefy  [‘biːfɪ]<br>adj. 像牛肉的；结实的；健壮的<br>15, regardless  [rɪ’gɑːdlɪs]<br>adj. 不管的；不顾的；不注意的<br>adv. 不顾后果地；不管怎样，无论如何；不惜费用地<br>16, recreational  [rekrɪ’eɪʃənl]<br>adj. 娱乐的，消遣的；休养的<br>17, shave off<br>剃掉，刮掉<br>18, slipper  [‘slɪpə]<br>n. 拖鞋<br>vt. 用拖鞋打<br>19, salt-and-pepper<br>盐和胡椒<br>20, greased-back  </p><p>21, blow off<br>v. 放出；吹掉<br>22, get acquainted<br>开始熟悉<br>变得熟络<br>23, friendliness  [‘fren(d)lɪnɪs]<br>n. 友谊；亲切；亲密<br>24, summon into  </p><p>25, dismember  [dɪs’membə]<br>vt. 肢解，割断手足；分割，瓜分<br>26, naked  [‘neɪkɪd]<br>adj. 裸体的；无装饰的；无证据的；直率的<br>27, lopsided  [lɒp’saɪdɪd]<br>adj. 不平衡的，倾向一方的<br>28, chew  [tʃuː]<br>n. 咀嚼；咀嚼物<br>vt. 嚼碎，咀嚼<br>vi. 细想，深思<br>n. (Chew)人名；(英)丘<br>29, perch  [pɜːtʃ]<br>n. 鲈鱼; 高位；栖木；杆<br>vt. 栖息；就位；位于；使坐落于<br>vi. 栖息；就位；位于<br>n. (Perch)人名；(俄)佩尔奇；(丹)佩克<br>30, board  [bɔːd]<br>n. 董事会；木板；甲板；膳食<br>vt. 上（飞机、车、船等）；用板盖上；给提供膳宿<br>vi. 寄宿<br>n. (Board)人名；(英、西)博德</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> Novel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flipped (Week 1)</title>
      <link href="/2018/05/26/Flipped_Week1/"/>
      <url>/2018/05/26/Flipped_Week1/</url>
      
        <content type="html"><![CDATA[<h1 id="2018-06-01-p2"><a href="#2018-06-01-p2" class="headerlink" title="2018-06-01-p2"></a>2018-06-01-p2</h1><p>flip over //翻页</p><p>gutsy girl //勇敢的女孩</p><p>delightful //可爱的；讨人喜欢的；令人愉快的</p><a id="more"></a><p>With a charismatic leading lady kids will flip over, a compelling dynamic between the two narrators and a resonant ending, this novel is a great deal larger than the sum of its parts. //有了魅力四射的女主角，孩子们就会翻过去，这是两个叙述者之间的一个引人注目的动态，一个共鸣的结尾，这部小说比它的各个部分的总和要大得多。</p><p>charismatic //超凡魅力的；神赐能力的</p><p>a compelling dynamic //一个激发兴趣的动力</p><p>narrator //叙述者；解说员</p><p>resonant //洪亮的；共鸣的</p><p>light-hearted //轻松的；无忧无虑的</p><p>wry //adj.歪斜的；歪曲的；用反语表达幽默的；揶揄的 v.扭曲；扭歪</p><p>substance //物质；实质；资产；主旨</p><p>subtlety //微妙；敏锐；精明</p><p>dedicate //vt.致力；献身；题献</p><p>infinite //n.无限；无穷大；无限的东西（如空间，时间）adj.无限的；无数的；极大的</p><p>insight //洞察力；洞悉</p><p>a reduced-filler diet //减少摄入的饮食</p><p>eternal gratitude //刻苦铭心</p><p>eternal //永恒的；不朽的</p><p>gratitude //n.感谢（的心情）；感激</p><p>on the ball //adv.机灵；留心；有见识；勤奋</p><p>Diving Under //潜水下</p><p>buddy //n.伙伴；密友；小男孩 vi.做好朋友，做朋友</p><p>Sycamore //美国梧桐；西克莫无花果树；假挪威槭</p><p>Brawk //？</p><p>looming //n.幽影 v.逼近；隐约可见(looming) adj.隐隐约约的；正在逼近的</p><p>smelly //有臭味的</p><p>willies //n.焦虑不安；心惊肉跳</p><h1 id="2018-06-17-p3"><a href="#2018-06-17-p3" class="headerlink" title="2018-06-17-p3"></a>2018-06-17-p3</h1><p>back off //后退；软化；减轻；卸下</p><p>moving van //家具搬运车</p><p>strategic avoidance //战略回避</p><p>social discomfort //社会不安</p><p>barge into //闯入；与…相撞</p><p>shove //n.推；挤 vt.挤；强使；撞；猛推</p><p>wedged her way into //挤进</p><p>catapult //n.弹弓；石弩；飞机弹射器；（飞机上的）座椅弹射器 vt.用弹弓射；用弹射器发射；猛投<br> vi.用弹射器弹射；快速移动</p><p>caked with the stuff //由…东西结成块状</p><p>hop out //快速离开</p><p>rear end //臀部；后部</p><p>implication //含义；暗示；牵连；可能的结果</p><p>toss //n.投掷；摇荡；投掷的距离；掷币赌胜负 vt.投掷；使…不安；突然抬起；使…上下摇动；与…掷币打赌 vi. 辗转；被乱扔；颠簸；掷钱币决定某事</p><p>scoot over to //快走到</p><p>pull her up //把她拉上来</p><p>run along home //离开家</p><p>soon-to-become-acute //很快变得严重</p><p>take a hint //领会别人的暗示；接受暗示</p><p>zip on home //回家</p><p>mutter //n.喃喃低语 v.咕哝</p><p>wink //n.眨眼；使眼色；闪烁；瞬间 vt.眨眼 vi.眨眼；使眼色；闪烁</p><p>right off //立刻</p><p>a ditch play //小花招</p><p>run with //鼓励；与…一起跑；与…交往</p><p>parental law //父母的法律</p><p>muddy //adj.泥泞的；模糊的；混乱的 vt.使污浊；使沾上泥；把…弄糊涂 vi.变得泥泞；沾满烂泥</p><p>in motion //在运转中</p><p>liftgate //提升式门</p><p>get up the nerve to look //鼓起勇气去看</p><p>blast right past me //猛地一下从我身边过去</p><p>yank me along //猛拉我一起</p><p>plant myself //使自己安顿下来</p><p>weirdest //不可思议的</p><p>windmill motion //风车运动</p><p>break away from //vt.放弃，脱离…</p><p>somehow on the downswing my hand wound up tangling into hers //不知怎么的，我的手缠上了她的手。</p><p>clamp on //夹合</p><p>sappiest //最愚笨的</p><h1 id="2018-06-18-p4"><a href="#2018-06-18-p4" class="headerlink" title="2018-06-18-p4"></a>2018-06-18-p4</h1><p>pull free // 挣脱</p><p>a death grip // 死死地控住</p><p>grin //v.露齿而笑 n.露齿笑</p><p>fiery red face //通红的脸</p><p>dive behind // 躲到…后面</p><p>flash her help signal // 向她发出求救信号</p><p>tramp right in // 走进</p><p>a crusty heap on our porch // 一堆壳子一样的东西在我们的走廊上</p><p>peek out // 向外偷看</p><p>sneak out //偷偷溜走</p><p>a very sophisticated ditch // 一个非常富有经验的陷阱</p><p>be far from over // 远未结束</p><p>couch //vt.使躺下；表达；弯下 vi.蹲伏，埋伏；躺着 n.睡椅，长沙发；床；卧榻</p><p>cut across the yard // 穿过院子里</p><p>spot her in the nick of time // 及时发现她</p><p>no concept of // 没有概念</p><p>on the slide //日益恶化</p><p>run block //阻挡</p><p>plain gone //普通的了</p><p>sabotage //n.破坏；破坏活动；怠工<br>vt.妨害；对…采取破坏行动<br>vi.从事破坏活动</p><p>She’s got ANTAGONIZE written all over her. //她在她身上引起了敌意。</p><p>cross-eyed //斜视的；对视眼的；斗鸡眼的</p><p>stick out //突出；坚持；醒目</p><p>knock-down-drag-out with //不惜一切手段的</p><p>Girls don’t fight fair. //女生不公平的战斗。</p><p>gouge //n.沟；圆凿；以圆凿刨<br>vt.用半圆凿子挖；欺骗</p><p>pinch //n.匮乏；少量；夹痛<br>vt.捏；勒索；使苦恼；掐掉某物，修剪<br>vi.夹痛；节省</p><p>gasp //n.喘气<br>vi.喘气；喘息；渴望<br>vt.气喘吁吁地说；喘着气说话</p><p>time-out //n.休息时间，暂停</p><p>snap at the bait //上钩</p><p>Let it dangle. //让它挺直。</p><p>Laugh it off. //一笑而过。</p><p>lure //n.诱惑；饵；诱惑物<br>vt.诱惑；引诱</p><p>Swim around it. //四处游动。</p><p>bonus //n.奖金；红利；额外津贴</p><p>pain-in-the-rear //十分令人讨厌的人或事</p><p>jerk //n.肌肉抽搐；性情古怪的人；蠢人；急拉<br>vi.痉挛；急拉；颠簸地行进<br>vt.猛拉</p><p>get all pumped up over //把所有的东西都抽上来</p><p>dive down //潜入</p><p>get clobbered by some parental tidal wave //被某些父母的影响所击倒</p><p>clueless //无线索的；愚蠢的</p><p>thrash //n.打谷；逆风浪行进；踢水动作<br>vt.打；使逆行<br>vi.打谷；白忙；猛烈摆动</p><p>drowning //n.溺死<br>v.淹没；（使）[外科] 淹溺；浸没（drown的ing形式）<br>adj.溺水的</p><p>dive for calmer water //扑向平静的水</p><h1 id="2018-06-19-p5"><a href="#2018-06-19-p5" class="headerlink" title="2018-06-19-p5"></a>2018-06-19-p5</h1><p>form //n.形式，形状；形态，外形；方式；表格<br>vt.构成，组成；排列，组织；产生，塑造<br>vi.形成，构成；排列</p><p>bait me with Juli //用Juli引诱我</p><p>She even snuck her past Dad once and marched her all around the house, hunting me down. //她甚至有一次偷偷瞒着爸爸，带着她到处跑，把我打倒在地。</p><p>wedge //n.楔子；楔形物；导致分裂的东西<br>vt.楔入；挤进；楔住<br>vi.楔入；挤进</p><p>get booted //被赶出</p><p>stuff //n.材料，原料，资料；〈俚〉钱，现金；填充物；素材资料；<br>vt.塞满；填塞；让吃饱；<br>vi.`吃得过多；</p><p>debate //n.讨论；辩论；争论；辩论；<br>v.辩论；仔细考虑；思考；盘算；</p><p>Empire settees and French Rococo tables //帝国沙发和法国洛可可桌子</p><p>be dying to //渴望</p><p>dribble it up and down their driveway //在他们的车道上下车</p><p>curb //n.抑制；路边；勒马绳<br>vt.控制；勒住</p><p>awful //可怕的；极坏的；使人敬畏的</p><p>turn out //（以某种方式）发生；最后是，结果是；出席，参加，前去观看；关掉，熄灭（电灯、煤气等）；生产，制造</p><p>squeal //n.尖叫声<br>vt.告密；长声尖叫<br>vi.告密；尖声地说</p><p>charge across //冲过</p><p>this attack away //这种攻击了</p><p>a front-line //一线</p><p>be branded for life //是品牌的生命</p><p>jeer //n.嘲笑；戏弄；揶揄的言语<br>v.嘲笑；戏弄</p><p>recess //n.休息；休会；凹处<br>vt.使凹进；把…放在隐蔽处<br>vi.休息；休假</p><p>lay kisses on //吻</p><p>trail //n.小径；痕迹；尾部；踪迹；一串，一系列<br>vt.追踪；拖；蔓延；落后于<br>vi.飘出；蔓生；垂下；拖曳</p><p>turn around //转向反方向；(生意或经济) 好转；船只留港</p><p>start out //出发；着手进行</p><p>ward off //避开；挡住</p><p>hatch //n.孵化；舱口<br>vt.孵；策划<br>vi.孵化</p><p>beat me why //让我思考为什么</p><p>gem //n.宝石，珍宝； 精华；受人重视者<br>vi.点缀； 用宝石装饰； 饰以宝石<br>adj.最佳品质的</p><p>catfight //激烈的争辩</p><p>code of honor //荣誉准则</p><p>corrupt //adj.腐败的，贪污的；堕落的<br>vt.使腐烂；使堕落，使恶化<br>vi.堕落，腐化；腐烂</p><p>weepy females //流泪的女人</p><h1 id="2018-06-20-p6"><a href="#2018-06-20-p6" class="headerlink" title="2018-06-20-p6"></a>2018-06-20-p6</h1><p>cross-examining //vt.盘诘；反复询问<br>vi.盘问</p><p>cop to //接受；承认</p><p>sniff //vt.嗅；闻；用力吸；发觉<br>vi.嗅；嗤之以鼻<br>n.吸，闻；嗤之以鼻；气味；以鼻吸气；吸气声</p><p>blew down //吹倒</p><p>dump //n.垃圾场；仓库；无秩序地累积<br>vt.倾倒；倾卸；丢下，卸下；摆脱，扔弃；倾销<br>vi.倒垃圾；突然跌倒或落下；卸货；转嫁（责任等）</p><p>goo-goo //n.政治改革者；装作好人的人<br>adj.爱慕的；色情的</p><p>stick to //遵守；保留；紧跟；忠于</p><p>glue //vt.胶合；紧附于<br>n.胶水；胶粘物；粘聚力</p><p>doctorate //博士学位；博士头衔</p><p>scrutinize //vt.仔细检查 n.仔细或彻底检查</p><p>baptize //vt.给…施洗礼；（施洗时）授…以教名；给…精神上的洗礼；使经受考验；<br>vi.行浸礼（或洗礼）</p><p>dissertations //专题论文；学位论文</p><p>come in handy //迟早有用</p><p>cursive //adj.草书的<br>n.草书</p><p>aisle //过道；侧廊；狭长的通道</p><p>eye-shot //视野</p><p>snag //n.小困难或障碍；突出物；钩丝<br>vt.戳坏；抓住；清除暗桩<br>vi.妨碍；被戳坏</p><p>shift //n.移动；变化；手段；轮班<br>vt.转移；改变；替换<br>vi.移动；转变；转换</p><p>optimizing positional latitude and longitude //优化位置纬度和经度</p><p>maniac //n.疯子，躁狂者<br>adj.发狂的；狂热的；癫狂的</p><p>lean forward //探身过去</p><p>edge //n.边缘；优势；刀刃；锋利<br>vt.使锐利；将…开刃；给…加上边<br>vi.缓缓移动；侧着移动</p><p>scalp //n.头皮；战利品<br>v.剥头皮</p><p>elbow //n.肘部；弯头；扶手<br>vt.推挤；用手肘推开</p><p>scoot //n.疾走；轻便摩托车<br>vt.迅速跑开；猛冲<br>vi.溜走；快走；骑轻便摩托车</p><p>scoot up //往前一点；稍微移动</p><p>lean over //vt.倾身（弯下身子）</p><p>delicate //微妙的；精美的，雅致的；柔和的；易碎的；纤弱的；清淡可口的</p><p>be stuck with //遇到困难无法进行下去；无法摆脱</p><p>blown //v.风吹（blow的过去分词）<br>adj.吹制的，吹出的；开花的，盛开的；喘气的</p><p>sly //狡猾的；淘气的；诡密的</p><p>bug //n.臭虫，小虫；故障；窃听器<br>vt.烦扰，打扰；装窃听器<br>vi.装置窃听器；打扰</p><p>bug off //走开；错误关闭</p><h1 id="2018-06-21-p7"><a href="#2018-06-21-p7" class="headerlink" title="2018-06-21-p7"></a>2018-06-21-p7</h1><p>lunatic //n.精神失常者，精神病人；疯子；极愚蠢的人；狂人<br>adj.疯狂的；精神错乱的；愚蠢的；极端的</p><p>framed //框架建筑</p><p>blackness //黑色；黑人民族性；阴郁；邪恶</p><p>lashes //n.鞭挞；鞭子；突然猛烈的一击；急速挥动</p><p>dazzling //adj.耀眼的；灿烂的<br>v.眼花</p><p>breathtaking //非常激动人心的；惊人的；惊险的；使人透不过气来的</p><p>anticipation //期望；预期；预支</p><p>dandy //adj.服装华丽的；最好的<br>n.花花公子；最好的东西</p><p>vacuuming //真空处理</p><p>dribbling //n.（燃料或油从系统内）泄露<br>v.流口水（dribble的现在分词）；（使液体）滴下或作细流；运球</p><p>from chore to chore //家务琐事</p><p>literally //逐字的；照字面的；真实的；简直</p><p>overwhelm //淹没；压倒；覆盖；压垮</p><p>chomp //vi.切齿</p><p>retrieve //vt.取回；恢复；重新得到；检索<br>vi.找回猎物<br>n.恢复；挽回；取回；检索</p><p>preoccupied //adj.全神贯注的；被抢先占有的心事重重的<br>v.使专心于(过去式）</p><p>tug on //拖船上</p><p>record-breaking //破纪录(的）</p><p>hang back //犹豫；畏缩不前</p><p>lift-gate //升降门</p><p>matching turquoise //匹配的绿松石</p><p>#2018-06-23-p8</p><p>cricket //板球；蟋蟀</p><p>be sick of //厌恶；厌倦</p><p>collapse //v.倒塌；瓦解；暴跌<br>vt.使倒塌；使萎陷；折叠<br>n.倒塌；失败；衰竭</p><p>shove //vt.挤；强使；撞；猛推<br>n.推；挤</p><p>send off //挤出；派遣；给。。。送行</p><p>beneath //prep. 在…之下<br>adv. 在下方</p><p>midair //n.半空中</p><p>drift away //渐渐疏远</p><p>force //n. 力量；武力；军队；魄力<br>vt. 促使，推动；强迫；强加</p><p>swirl //n. 旋涡；[流] 涡流<br>v. 使旋转；搅；环绕</p><p>twirl //n. 转动，旋转；旋转的东西；万能钥匙<br>vt. 使快速转动，使快速旋转；捻弄<br>vi. 旋转，转动</p><p>hallway //n. 走廊；门厅；玄关</p><p>mature //adj. 成熟的；充分考虑的；到期的；成年人的<br>vt. 使…成熟；使…长成；慎重作出<br>vi. 成熟；到期</p><p>wiggle //n. 扭动<br>vt. 使……摆动，使……扭动<br>vi. 摆动</p><p>doorknob //n. 门把手</p><p>fierce //adj. 凶猛的；猛烈的；暴躁的</p><p>chick //n. 小鸡；小鸟；少妇<br>adj. 胆小的；懦弱的</p><p>yank on //猛拉上</p><p>eat up //吃光；耗尽；击垮</p><p>dizzy //adj. 晕眩的；使人头晕的；昏乱的；心不在焉的；愚蠢的<br>vt. 使头晕眼花；使混乱；使茫然</p><p>radically //根本上；彻底地；以激进的方式</p><p>beast //n. 野兽；畜生</p><p>whippet-only //？</p><p>curiosity //好奇心；珍品</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> Novel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟与数字电路笔记</title>
      <link href="/2018/05/26/%E6%A8%A1%E6%8B%9F%E4%B8%8E%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/26/%E6%A8%A1%E6%8B%9F%E4%B8%8E%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p><img alt="基础知识" data-src="基础知识.png"></p><a id="more"></a><h1 id="模拟电路部分"><a href="#模拟电路部分" class="headerlink" title="模拟电路部分"></a>模拟电路部分</h1><h2 id="半导体器件"><a href="#半导体器件" class="headerlink" title="半导体器件"></a>半导体器件</h2><p><img alt="半导体器件" data-src="半导体器件.png"></p><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>（此为个人笔记，因个人水平限制尚有许多不完善的地方，如有不当之处，欢迎指正，未补充的地方还请自行看书）（可下载图片查看MindMap）</p>]]></content>
      
      
      <categories>
          
          <category> 模拟与数字电路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
            <tag> MindMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32 J-LINK与ST-LINK 引脚定义</title>
      <link href="/2018/05/26/JLINK_STLINK/"/>
      <url>/2018/05/26/JLINK_STLINK/</url>
      
        <content type="html"><![CDATA[<div align="center"><img alt="JTAG" data-src="JTAG.jpg"></div><a id="more"></a><div align="center"><img alt="SWG" data-src="SWG.jpg"></div>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>English Mixed</title>
      <link href="/2018/05/26/Mixed/"/>
      <url>/2018/05/26/Mixed/</url>
      
        <content type="html"><![CDATA[<p>#2018-06-16</p><h2 id="Independence-Day"><a href="#Independence-Day" class="headerlink" title="Independence Day"></a>Independence Day</h2><p>aerial // 空中的；航空的</p><p>petty //小的；琐碎的</p><p>fate //n.命运 v.注定</p><a id="more"></a><p>Not from tyranny, oppression, or persecution, but from annihilation.</p><p>//不是来自暴政、压迫或是迫害，而是来自消灭。</p><p>vanish //v.消失；绝迹</p><p>East or west, home is the best. //金窝银窝不如自己的狗窝。</p><p>#2018-06-09</p><p>love your curves and all your edges ,all your perfect imperfections. //爱你的曲线和你所有的棱角，你所有的完美的不完美。</p>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
            <tag> Vocabulary </tag>
            
            <tag> Mixed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7登录 之 &quot;Sorry,that doesn&#39;t work.Please try again.&quot;</title>
      <link href="/2018/05/26/Capital/"/>
      <url>/2018/05/26/Capital/</url>
      
        <content type="html"><![CDATA[<p>大写使用<code>shift+字母</code>,而不是<code>CapsLock</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github pages 出现 “the CNAME is already taken” 的解决办法</title>
      <link href="/2018/05/26/CNAME/"/>
      <url>/2018/05/26/CNAME/</url>
      
        <content type="html"><![CDATA[<p>之前因为每次deploy博客后，都会出现绑定的域名指向 github 404 的情况，原因是 setting 下github pages 的 custom domain 清空了，需要重新设置来生成CNAME文件。为了避免每次都去设置，于是按照网上的方法，在博客的source目录下安放了CNAME文件。然后重新deploy，结果访问绑定的域名仍旧是404。再回到 setting 的 github pages ，提示 <strong>“the CNAME is already taken”</strong> 。</p><a id="more"></a><p>然后在网上到处搜索包括看官方的文档也没找到靠谱的解决方案。最后不得已请求 <a href="https://github.com/contact" target="_blank" rel="noopener">github support</a> ，然后收到了github support 的回复（泪牛满面 〒▽〒）：<br><img alt="" data-src="0.png"><br>大致上的意思是需要新增一个TXT的DNS解析记录，让github support 进行验证再释放绑定的域名。</p><p>然后回复邮件告诉对方已经完成操作。</p><p>最后就收到了已经释放域名的邮件。</p><p>重新解析域名到github pages。</p><p>稍等一会后，就会发现又可以访问了（再次泪牛满面 〒▽〒）。<br>但是这个时候还不能设定为https传输，需要稍等一会就可以了。</p><p>PS: 邮件的回复需要等一段时间，我大概等两个邮件的回复用了一天吧。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Domain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt5教程</title>
      <link href="/2018/05/26/Qt5%E6%95%99%E7%A8%8B/"/>
      <url>/2018/05/26/Qt5%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/farewell-farewell/p/7159596.html" target="_blank" rel="noopener">https://www.cnblogs.com/farewell-farewell/p/7159596.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Qt5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客 站内搜索 配置 (swiftype)</title>
      <link href="/2018/05/26/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
      <url>/2018/05/26/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着博客的文章增多，添加一个博客站内搜索的功能就显得很有必要。</p><p>而第三方站内搜索的插件有：</p><a id="more"></a><ul><li><p>google自定义搜索（免费的标准版貌似有广告而且要科学上网）</p></li><li><p>百度站内搜索（貌似不支持https并且只显示收录的页面）</p></li><li><p>swiftype站内搜索（我的选择）</p></li></ul><h1 id="swiftype网站配置"><a href="#swiftype网站配置" class="headerlink" title="swiftype网站配置"></a>swiftype网站配置</h1><ul><li><p>首先注册swiftype账号并登录，也可直接使用google账号登录</p></li><li><p>然后选择<code>CREATE A NEW ENGINE</code>,再进行填入网址等一系列操作,设置默认就好</p></li><li><p>得到左边为各项设置的搜索引擎界面</p></li></ul><div align="center"><img alt="搜索引擎界面左边" data-src="swiftype_left.png"></div><ul><li>点击<code>install search</code>，进入<code>安装代码</code>界面,并将这段代码复制</li></ul><div align="center"><img alt="安装代码" data-src="install_code.jpg"></div><ul><li>点击<code>change configuration</code>，可以看到左边有设置选项</li></ul><div align="center"><img alt="设置选项" data-src="configuration.png"></div><ul><li>特别注意，<code>search field</code>选项</li></ul><blockquote><p>如果博客本身就有搜索框，那么修改搜索框的<code>class</code>为<code>st-default-search-input</code>就好了<br>但是如果没有，则可以自行添加搜索框，并修改<code>class</code>；或者选择swiftype提供的搜索框即可<br>由于我的博客（random主题）本身没有搜索框，所以直接选择了swiftype提供的搜索框</p></blockquote><div align="center"><img alt="显示效果" data-src="search_box.png"></div><ul><li><p>同时，可以在左侧的设置选项中<code>查看搜索统计情况</code>、<code>预览搜索结果</code>、<code>设置搜索权重</code>、<code>添加域名</code>、<code>查看抓取的页面</code>等</p></li><li><p><code>注意：</code>swiftype的爬虫抓取页面需要一定的时间，所以可能需要等一会</p></li><li><p>到此为止，swiftype网站的配置就完成了</p></li></ul><h1 id="博客的配置"><a href="#博客的配置" class="headerlink" title="博客的配置"></a>博客的配置</h1><ul><li>打开博客主题的配置文件<code>_config.yml</code>，在最后添加</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># swiftype站内搜索</span></span><br><span class="line">swift_search:</span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure><ul><li><p>打开博客主题的<code>layout</code>文件夹，在其中找到<code>footer.swig</code>文件（或者其他以footer命名的文件），把之前复制的脚本代码粘贴到其中</p></li><li><p>注意：要放在<code>body标签</code>中</p></li><li><p>至此，博客站内搜索的工作就做完了，然后重新将博客deploy即可</p></li><li><p>搜索效果</p></li></ul><div align="center"><img alt="搜索效果" data-src="search_results.png"></div>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> swiftype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客 添加评论功能 （来必力 livere）&amp; Template render error (Hexo BUG)</title>
      <link href="/2018/05/26/%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/"/>
      <url>/2018/05/26/%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为一个完整的博客，评论功能自然是必不可少的。</p><p>而可供选择的第三方评论系统有很多，但不是被墙（如Disqus）就是停止服务（如友言、网易云跟帖），或者需要域名备案（如畅言）。</p><p>所以只能把目光投向一款来自韩国的评论系统——来必力(livere)。</p><a id="more"></a><p>总的来说，这个评论系统有以下好处：</p><blockquote><p>1.有中文网站<br>2.界面还算美观<br>3.国内本土化做得很好，支持如下账号登录：</p></blockquote><div align="center"><img alt="支持账号" data-src="login.png"></div><h1 id="来必力网站配置"><a href="#来必力网站配置" class="headerlink" title="来必力网站配置"></a>来必力网站配置</h1><ul><li><p>进入官网 <a href="https://livere.com" target="_blank" rel="noopener">https://livere.com</a> ,邮箱注册登录</p></li><li><p>点击<code>安装</code>，选择City免费版，点击<code>现在安装</code></p></li><li><p>获得安装代码并复制</p></li></ul><div align="center"><img alt="安装代码" data-src="install_code.jpg"></div><ul><li>到此为止，网站的配置到此结束；当然，如果需要修改登录选项和评论界面，可以在设置中更改</li></ul><h1 id="博客的配置"><a href="#博客的配置" class="headerlink" title="博客的配置"></a>博客的配置</h1><ul><li>打开博客主题的配置文件<code>_config.yml</code>，加上如下代码：</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Support for LiveRe comments system.</span></span><br><span class="line"><span class="section"># You can get your uid from https://livere.com/insight/myCode (General web site)</span></span><br><span class="line">livere_uid:</span><br></pre></td></tr></table></figure><ul><li><p>在<code>livere_uid:</code>后加上安装代码中<code>data-uid</code>的内容,以便以后修改</p></li><li><p>打开博客主题的<code>layout</code>文件夹</p></li><li><p>在<code>includes</code>文件夹中新建一个<code>livere.swig</code>文件，在其中写入如下代码：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> theme.livere_uid %&#125;</span><br><span class="line">        &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">            (<span class="function"><span class="keyword">function</span>(<span class="params">d, s</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> j, e = d.getElementsByTagName(s)[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">typeof</span> LivereTower === <span class="string">'function'</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">                j = d.createElement(s);</span><br><span class="line">                j.src = <span class="string">'https://cdn-city.livere.com/js/embed.dist.js'</span>;</span><br><span class="line">                j.async = <span class="literal">true</span>;</span><br><span class="line">                e.parentNode.insertBefore(j, e);</span><br><span class="line">            &#125;)(<span class="built_in">document</span>, <span class="string">'script'</span>);</span><br><span class="line">        &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &#123;% endif %&#125;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><ul><li>打开<code>post.swig</code>文件，在<code>&lt;/article&gt;</code>前加上如下代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> page.photos.length %&#125;</span><br><span class="line">  &#123;% include <span class="string">'includes/gallery.swig'</span> %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% autoescape <span class="literal">false</span> %&#125;&#123;&#123; page.content &#125;&#125;&#123;% endautoescape %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> theme.livere_uid %&#125;</span><br><span class="line">  &lt;div id=<span class="string">"lv-container"</span> data-id=<span class="string">"city"</span> data-uid=<span class="string">"&#123;&#123; theme.livere_uid &#125;&#125;"</span>&gt;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在<code>&lt;/article&gt;</code>后加上<code>{% include 'includes/livere.swig' %}</code></p></li><li><p>最后，将博客重新deploy即可</p></li></ul><div align="center"><img alt="最终效果" data-src="result.png"></div><h1 id="BUG"><a href="#BUG" class="headerlink" title="BUG!!!"></a>BUG!!!</h1><p>在写完这篇博客后，再<code>hexo g</code>发生错误，提示<code>Template render error:(unknown path)</code>,后经google发现，hexo对特殊符号<code>{% %}</code>和<code>{{ }}</code>的解析有错误，其被当成hexo模板中的标签,所以出现错误无法找到路径<code>includes/livere.swig</code></p><hr><p>目前的解决办法为在这两个特殊字符之外添加如下代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">特殊字符</span><br><span class="line">&#123;% endrow %&#125;</span><br></pre></td></tr></table></figure><p>使hexo不解析其中的特殊字符</p><p>同时注意，对于用三个<code>`</code>包围的代码块则不存在这样的问题</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> Livere </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数与解析几何笔记</title>
      <link href="/2018/05/26/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/26/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%8E%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>线性代数与几何空间从来不是分离开来的，几何空间是线性代数的本质，而线性代数是几何空间的抽象表示。因此，推荐大家去学习<a href="https://space.bilibili.com/88461692/#/" target="_blank" rel="noopener">B站 3Blue1Brown 线性代数的本质 系列视频</a>(我从中受益匪浅)。相信你在听了他的课程后会对线性代数有着更深一层次的理解。</p><a id="more"></a><div align="center"> <img alt="线性代数的本质" data-src="线性代数的本质.png"></div><h1 id="矩阵及其初等变换"><a href="#矩阵及其初等变换" class="headerlink" title="矩阵及其初等变换"></a>矩阵及其初等变换</h1><p><img alt="矩阵及其初等变换" data-src="矩阵及其初等变换.png"></p><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><p>（此为个人笔记，因个人水平限制尚有许多不完善的地方，如有不当之处，欢迎指正，未补充的地方还请自行看书）（可下载图片查看MindMap）</p>]]></content>
      
      
      <categories>
          
          <category> 线代 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Notes </tag>
            
            <tag> MindMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++之名称空间</title>
      <link href="/2018/05/26/CPP%E4%B9%8B%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4/"/>
      <url>/2018/05/26/CPP%E4%B9%8B%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="传统的C-名称空间"><a href="#传统的C-名称空间" class="headerlink" title="传统的C++名称空间"></a>传统的C++名称空间</h1><h2 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h2><blockquote><ul><li>声明区域</li><li>潜在作用域<br>变量的潜在作用域从声明点开始，到其声明区域的结尾。因此潜在作用域的比声明区域小，这是由于变量必须定义后才能使用。变量并非在其潜在作用域内的任何位置都是可见的。例如，它可能被另一个在嵌套声明区域中声明的同名变量隐藏。</li></ul></blockquote><a id="more"></a><p>C++关于全局变量和局部变量的规则定义了一种名称空间层次。每个声明区域都可以声明名称，这些名称独立于在其他声明区域中声明的名称。在一个函数中声明的局部变量不会与在另一个函数中声明的局部变量发生冲突。</p><hr><h1 id="新的名称空间的特性"><a href="#新的名称空间的特性" class="headerlink" title="新的名称空间的特性"></a>新的名称空间的特性</h1><p>C++新增了这样一种功能，即<strong>通过定义一种新的声明区域来创建命名的名称空间</strong>，这样做的目的之一是提供一个声明名称的区域。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><blockquote><ul><li>一个名称空间中的名称不会与另外一个名称空间的相同名称发生冲突，同时允许程序的其他部分使用该名称空间中声明的东西。</li><li>名称空间可以是全局的，也可以位于另一个名称空间，但不能位于代码块中。因此，在默认情况下，在名称空间中声明的名称的链接性为外部的（除非它引用了常量）。</li><li>除了用户定义的名称空间外，还存在另一个名称空间——全局名称空间。它对应于文件级声明区域，因此前面所说的全局变量现在被描述为位于全局名称空间中。</li><li>名称空间是开放的，即可以把名称加入到已有的名称空间中。<br>例如，下面这条语句将名称goose添加到Jill中已有的名称列表中：</li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Jill&#123;</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">goose</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>访问给定空间中的名称，通过作用域解析运算符<code>::</code>，使用名称空间来限定该名称。违背装饰的名称称为未限定的名称(unqualified name)；包含名称空间的名称称为限定的名称(qualified name)。</li></ul></blockquote><h2 id="using声明和using编译指令"><a href="#using声明和using编译指令" class="headerlink" title="using声明和using编译指令"></a>using声明和using编译指令</h2><h3 id="using声明"><a href="#using声明" class="headerlink" title="using声明"></a>using声明</h3><blockquote><ul><li>使特定的标识符可用</li><li>由被限定的名称和它前面的关键字<code>using</code>组成：<code>using Jill::fetch;</code></li><li>将特定的名称添加到它所属的声明区域中</li><li>在函数的外面使用using声明时，将把名称添加到全局名称空间中</li></ul></blockquote><h3 id="using编译指令"><a href="#using编译指令" class="headerlink" title="using编译指令"></a>using编译指令</h3><blockquote><ul><li>使整个名称空间可用</li><li>由名称空间名和它前面的关键字<code>using namespace</code>组成；<code>using namespace Jill;</code></li><li>在函数中使用using编译指令，将使其中的名称在该函数中可用</li><li>在全局声明区域中使用using编译指令，将使该名称空间的名称全局可用</li></ul></blockquote><h2 id="using编译指令和using声明之比较"><a href="#using编译指令和using声明之比较" class="headerlink" title="using编译指令和using声明之比较"></a>using编译指令和using声明之比较</h2><h3 id="使用using编译指令导入一个名称空间中所有的名称"><a href="#使用using编译指令导入一个名称空间中所有的名称" class="headerlink" title="使用using编译指令导入一个名称空间中所有的名称"></a>使用using编译指令导入一个名称空间中所有的名称</h3><blockquote><ul><li>进行名称解析，就像在包含using声明和名称空间本身的最小声明区域中声明了名称一样</li></ul></blockquote><h3 id="使用多个using声明"><a href="#使用多个using声明" class="headerlink" title="使用多个using声明"></a>使用多个using声明</h3><blockquote><ul><li>好像声明了相应的名称</li><li>如果某个名称已经在函数中声明了，则不能用using声明导入相同的名称</li></ul></blockquote><p>在下面的示例中，名称空间为全局的。如果使用using编译指令导入一个已经在函数中声明的名称，则局部名称将隐藏名称空间名，就像隐藏同名的全局变量一样。不过人可以像下面的示例中那样使用作用域解析运算符：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> Jill&#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bucket</span><span class="params">(<span class="keyword">double</span> n)</span></span>&#123;...&#125;</span><br><span class="line"><span class="keyword">double</span> fetch;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hill</span>&#123;</span>...&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> fetch;                      <span class="comment">//global namespace</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Jill;        <span class="comment">//import all namespace names</span></span><br><span class="line">Hill Thrill;                 <span class="comment">//create a type Jill::Hill structure</span></span><br><span class="line"><span class="keyword">double</span> water = bucket(<span class="number">2</span>);    <span class="comment">//use Jill::bucket();</span></span><br><span class="line"><span class="keyword">double</span> fetch;                <span class="comment">//not an error; hides Jill::fetch</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fetch                 <span class="comment">//read a value into the local fetch</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ::fetch;              <span class="comment">//read a value into global fetch</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Jill::fetch;          <span class="comment">//read a value into Jill::fetch</span></span><br><span class="line">... </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">foom</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Hill top;                    <span class="comment">//ERROR</span></span><br><span class="line">Jill::Hill crest;            <span class="comment">//valid</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>虽然函数中的using编译指令将名称空间的名称视为在函数之外声明，但它不会使得该文件中的其他函数能够使用这些名称。因此，在前一个例子中，<code>foom()</code>函数不能使用未限定的标识符Hill。</li><li>一般来说，使用using声明比使用using编译指令更安全，这是由于它只导入指定的名称。如果该名称与局部名称发生冲突，编译器将发出指示。</li><li>如果系统不支持名称空间，可以将</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><p>换成</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream.h&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>可以用嵌套式名称空间来创建一个包含常用using声明的名称空间。</li></ul><h2 id="名称空间的其他特性"><a href="#名称空间的其他特性" class="headerlink" title="名称空间的其他特性"></a>名称空间的其他特性</h2><h3 id="将名称空间声明进行嵌套"><a href="#将名称空间声明进行嵌套" class="headerlink" title="将名称空间声明进行嵌套"></a>将名称空间声明进行嵌套</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> elements</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">namespace</span> fire</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flame;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">float</span> water;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>flame</code>指的是<code>element::fire::flame</code></li><li>可以使用<code>using namespace elements::fire</code>的using编译指令使内部的名称可用</li><li>可以在名称空间中使用using编译指令和using声明，如下所示：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> myth</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">using</span> Jill::fetch;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> elements;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将using编译指令用于myth名称空间的情况"><a href="#将using编译指令用于myth名称空间的情况" class="headerlink" title="将using编译指令用于myth名称空间的情况"></a>将using编译指令用于myth名称空间的情况</h4><p>using编译指令是可以传递的。如果A op B 且 B op C，则A op C，则说明操作 op 是可传递的。<br>在这个情况下，下面的语句将导入名称空间myth和elements：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> myth;</span><br></pre></td></tr></table></figure><p>这条编译指令与下面两条编译指令等价：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> myth;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> elements;</span><br></pre></td></tr></table></figure><h3 id="可以给名称空间创建别名"><a href="#可以给名称空间创建别名" class="headerlink" title="可以给名称空间创建别名"></a>可以给名称空间创建别名</h3><p>例如，假设有下面的名称空间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> my_very_favorite_things&#123;...&#125;;</span><br></pre></td></tr></table></figure><p>则可以使用下面的语句让<code>mvft</code>成为<code>my_very_favorite_things</code>的别名：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> mvft = my_very_favorite_things&#123;...&#125;;</span><br></pre></td></tr></table></figure><p>可以使用这种技术来简化对嵌套名称空间的使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> MEF = myth::elements::fire;</span><br><span class="line"><span class="keyword">using</span> MEF::flame;</span><br></pre></td></tr></table></figure><h3 id="未命名的名称空间"><a href="#未命名的名称空间" class="headerlink" title="未命名的名称空间"></a>未命名的名称空间</h3><p>可以通过省略名称空间的名称来创建未命名的名称空间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span>         <span class="comment">// unnamed namespace</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ice;</span><br><span class="line"><span class="keyword">int</span> bandycoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就像后面跟着using编译指令一样，也就是说，在该名称空间中声明的名称的潜在作用域为：<strong>从声明点到该声明区域末尾</strong>。从这方面看，它们与全局变量相似。然而，由于这种名称空间没有名称，因此不能显式地使用using编译指令或using声明来使它在其他位置都可用。具体地说，不能在未命名名称空间所属文件之外的其他文件中，使用该名称空间的名称。<strong>这提供了链接性为内部的静态变量的替代品。</strong></p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> counts;</span><br></pre></td></tr></table></figure><p>采用名称空间的方法可替换为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line"><span class="keyword">int</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="名称空间及其前途"><a href="#名称空间及其前途" class="headerlink" title="名称空间及其前途"></a>名称空间及其前途</h1><h2 id="指导原则"><a href="#指导原则" class="headerlink" title="指导原则"></a>指导原则</h2><blockquote><ul><li>使用在已命名的名称空间中声明的变量，而不是使用外部全局变量或静态全局变量</li><li>如果开发了一个函数库或类库，将其放在一个名称空间中。</li><li>仅将编译指令using作为一种将旧代码转换为使用名称空间的权宜之计。</li><li>不要在头文件中使用using编译指令<br>首先，这样做掩盖了要让哪些名称可用；另外，包含头文件的顺序可能影响程序的行为<br>应将其放在所有预处理编译指令<code>#include</code>之后</li><li>导入名称时，首先选用作用域解析符或using声明的方法。</li><li>对于using声明，首选将其作用域设置为局部而不是全局。</li></ul></blockquote><p>注意：使用名称空间的主旨使简化大型编程项目的管理工作。</p>]]></content>
      
      
      <categories>
          
          <category> Programming Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32之库开发</title>
      <link href="/2018/05/26/STM32%E4%B9%8B%E5%BA%93%E5%BC%80%E5%8F%91/"/>
      <url>/2018/05/26/STM32%E4%B9%8B%E5%BA%93%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="STM32-Embedded-Software"><a href="#STM32-Embedded-Software" class="headerlink" title="STM32 Embedded Software"></a>STM32 Embedded Software</h1><p>到目前为止STM32的开发库有：</p><ul><li>标准外设库（STD库）</li><li>HAL库</li><li>LL库（ST最近才添加，随HAL源码包一起提供，目前支持的芯片也偏少）</li></ul><a id="more"></a><h1 id="STM32-Snippets"><a href="#STM32-Snippets" class="headerlink" title="STM32 Snippets"></a>STM32 Snippets</h1><p>代码示例的集合，直接基于STM32外设寄存器，可在文档和软件包中使用。</p><blockquote><p> 注意：</p><ul><li>目前只在STM32F0和L0系列中有提供</li><li>代码在不同ST芯片间没有可移植性</li></ul></blockquote><h1 id="标准外设库（Standard-Peripheral-Libraries）"><a href="#标准外设库（Standard-Peripheral-Libraries）" class="headerlink" title="标准外设库（Standard Peripheral Libraries）"></a>标准外设库（Standard Peripheral Libraries）</h1><p>对STM32芯片的一个完整的封装，包括所有标准器件外设的器件驱动器</p><blockquote><p>注意：</p><ul><li>不支持从STM32 L0，L4和F7开始的之后的STM32系列芯片</li><li>针对某一系列芯片而言，没有可移植性</li><li>其涵盖3个抽象级别<ol><li>包含位，位域和寄存器在内的完整的寄存器地址映射</li><li>涵盖所有外围功能（具有公共API的驱动器）的例程和数据结构的集合</li><li>一组包含所有可用外设的示例，其中包含最常用的开发工具的模板项目</li></ol></li></ul></blockquote><h1 id="STM32Cube"><a href="#STM32Cube" class="headerlink" title="STM32Cube"></a>STM32Cube</h1><p>配套桌面软件STMCubeMX（其中包含了HAL库和LL库）</p><blockquote><p>注意：</p><ul><li>LL库和HAL库两者相互独立，只不过LL库更底层</li><li>部分HAL库会调用LL库（如：USB驱动）</li><li>LL库也会调用HAL库</li><li>用户可以使用STMCubeMX直接生成对应芯片的整个项目，STMCubeMX负责整理各种需要的源码文件</li></ul></blockquote><h1 id="HAL-Hardware-Abstraction-Layer-硬件抽象层-库"><a href="#HAL-Hardware-Abstraction-Layer-硬件抽象层-库" class="headerlink" title="HAL(Hardware Abstraction Layer-硬件抽象层)库"></a>HAL(Hardware Abstraction Layer-硬件抽象层)库</h1><p>抽象层嵌入式软件，确保跨STM32产品的最大可移植性；该库提供了一整套一致的中间组建，如RTOS,USB,TCP/IP和图形等。</p><h1 id="LL库"><a href="#LL库" class="headerlink" title="LL库"></a>LL库</h1><p>更接近硬件层，对需要复杂上层协议栈的外设不适用，直接操作寄存器</p><blockquote><p>使用方法</p><ul><li>独立使用：该库完全独立实现，可以完全抛开HAL库，只用LL库编程完成。在使用STM32CubeMX生成项目时，直接选LL库即可。如果使用了复杂的外设，例如USB，则会调用HAL库</li><li>混合使用：和HAL库结合使用</li></ul></blockquote><p>文章参考:<a href="https://blog.csdn.net/zcshoucsdn/article/details/54613202" target="_blank" rel="noopener">STM32之HAL库、标准外设库、LL库（STM32 Embedded Software）</a></p><p>可参考：<a href="https://blog.csdn.net/zcshoucsdn/article/details/55213616" target="_blank" rel="noopener">STM32之HAL库详解 及 手动移植</a></p>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>气象站</title>
      <link href="/2018/05/26/%E6%B0%94%E8%B1%A1%E7%AB%99/"/>
      <url>/2018/05/26/%E6%B0%94%E8%B1%A1%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="项目框架"><a href="#项目框架" class="headerlink" title="项目框架"></a>项目框架</h1><p><img alt="气象站项目框架" data-src="气象站.jpg"></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
